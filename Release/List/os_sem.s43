///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      06/Jun/2016  16:42:32 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\os_sem.c                       /
//    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\os_sem.c -D NDEBUG -D          /
//                     RAM_VECTOR -lC C:\Users\615\Desktop\MSP430\MSP430F5529 /
//                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\List\ -lA               /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\          /
//                     -D__MSP430F5529__ -e --double=32 --dlib_config         /
//                     "D:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº /
//                     ¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MS /
//                     P430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                 /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                   /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I      /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\12864\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\oled\ -I C:\Users\615\Desktop\MSP430\ /
//                     MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc /
//                     \ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\ /
//                     C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\src\ -I                  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\inc\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\src\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\ -I                           /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\2.2TFT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\delay\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\ -I C:\Users\615\Desktop\MSP430\MSP430F /
//                     5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\inc\ -I              /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\src\ -I C:\Users\615\Desktop\MSP430\MSP /
//                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\ -I                /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\User\USER\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\App\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\ -I                         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\        /
//                     --core=430X --data_model=large -Oh --multiplier=32     /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\os_sem.s43                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME os_sem

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC OSSemAccept
        FUNCTION OSSemAccept,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSSemCreate
        FUNCTION OSSemCreate,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSSemDel
        FUNCTION OSSemDel,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OSSemPend
        FUNCTION OSSemPend,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OSSemPendAbort
        FUNCTION OSSemPendAbort,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OSSemPost
        FUNCTION OSSemPost,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSSemQuery
        FUNCTION OSSemQuery,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSSemSet
        FUNCTION OSSemSet,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN OSCPUSaveSR
        FUNCTION OSCPUSaveSR,0202H
        EXTERN OSCPURestoreSR
        FUNCTION OSCPURestoreSR,0202H
        EXTERN OS_EventTaskRdy
        FUNCTION OS_EventTaskRdy,0202H
        EXTERN OS_Sched
        FUNCTION OS_Sched,0202H
        EXTERN OSIntNesting
        EXTERN OSLockNesting
        EXTERN OSTCBCur
        EXTERN OS_EventTaskWait
        FUNCTION OS_EventTaskWait,0202H
        EXTERN OS_EventTaskRemove
        FUNCTION OS_EventTaskRemove,0202H
        EXTERN OSEventFreeList
        EXTERN OS_EventWaitListInit
        FUNCTION OS_EventWaitListInit,0202H

// C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CORE\os_sem.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/OS-II
//    4 *                                          The Real-Time Kernel
//    5 *                                          SEMAPHORE MANAGEMENT
//    6 *
//    7 *                              (c) Copyright 1992-2009, Micrium, Weston, FL
//    8 *                                           All Rights Reserved
//    9 *
//   10 * File    : OS_SEM.C
//   11 * By      : Jean J. Labrosse
//   12 * Version : V2.91
//   13 *
//   14 * LICENSING TERMS:
//   15 * ---------------
//   16 *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
//   17 * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
//   18 * its use in your product. We provide ALL the source code for your convenience and to help you experience
//   19 * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
//   20 * licensing fee.
//   21 *********************************************************************************************************
//   22 */
//   23 
//   24 #ifndef  OS_MASTER_FILE
//   25 #include "ucos_ii.h"
//   26 #endif
//   27 
//   28 #if OS_SEM_EN > 0u
//   29 /*$PAGE*/
//   30 /*
//   31 *********************************************************************************************************
//   32 *                                           ACCEPT SEMAPHORE
//   33 *
//   34 * Description: This function checks the semaphore to see if a resource is available or, if an event
//   35 *              occurred.  Unlike OSSemPend(), OSSemAccept() does not suspend the calling task if the
//   36 *              resource is not available or the event did not occur.
//   37 *
//   38 * Arguments  : pevent     is a pointer to the event control block
//   39 *
//   40 * Returns    : >  0       if the resource is available or the event did not occur the semaphore is
//   41 *                         decremented to obtain the resource.
//   42 *              == 0       if the resource is not available or the event did not occur or,
//   43 *                         if 'pevent' is a NULL pointer or,
//   44 *                         if you didn't pass a pointer to a semaphore
//   45 *********************************************************************************************************
//   46 */
//   47 
//   48 #if OS_SEM_ACCEPT_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   49 INT16U  OSSemAccept (OS_EVENT *pevent)
OSSemAccept:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function OSSemAccept
//   50 {
        FUNCALL OSSemAccept, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemAccept, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
//   51     INT16U     cnt;
//   52 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//   53     OS_CPU_SR  cpu_sr = 0u;
//   54 #endif
//   55 
//   56 
//   57 
//   58 #if OS_ARG_CHK_EN > 0u
//   59     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//   60         return (0u);
//   61     }
//   62 #endif
//   63     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        CALLA   #??Subroutine0_0
??CrossCallReturnLabel_17:
        JEQ     ??OSSemAccept_0
//   64         return (0u);
        MOV.W   #0x0, R12
        JMP     ??OSSemAccept_1
//   65     }
//   66     OS_ENTER_CRITICAL();
??OSSemAccept_0:
        CALLA   #OSCPUSaveSR
//   67     cnt = pevent->OSEventCnt;
        MOV.W   0x6(R10), R11
//   68     if (cnt > 0u) {                                   /* See if resource is available                  */
        CMP.W   #0x0, R11
        JEQ     ??OSSemAccept_2
//   69         pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
        ADD.W   #0xffff, 0x6(R10)
//   70     }
//   71     OS_EXIT_CRITICAL();
??OSSemAccept_2:
        CALLA   #OSCPURestoreSR
//   72     return (cnt);                                     /* Return semaphore count                        */
        MOV.W   R11, R12
??OSSemAccept_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   73 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond1 Using cfiCommon0
          CFI Function OSSemPendAbort
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond2 Using cfiCommon0
          CFI (cfiCond2) Function OSSemDel
          CFI (cfiCond2) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond2) R6L Frame(CFA, -28)
          CFI (cfiCond2) R6H Frame(CFA, -26)
          CFI (cfiCond2) R7L Frame(CFA, -24)
          CFI (cfiCond2) R7H Frame(CFA, -22)
          CFI (cfiCond2) R8L Frame(CFA, -20)
          CFI (cfiCond2) R8H Frame(CFA, -18)
          CFI (cfiCond2) R9L Frame(CFA, -16)
          CFI (cfiCond2) R9H Frame(CFA, -14)
          CFI (cfiCond2) R10L Frame(CFA, -12)
          CFI (cfiCond2) R10H Frame(CFA, -10)
          CFI (cfiCond2) R11L Frame(CFA, -8)
          CFI (cfiCond2) R11H Frame(CFA, -6)
          CFI (cfiCond2) CFA SP+32
          CFI Block cfiPicker3 Using cfiCommon1
          CFI (cfiPicker3) NoFunction
          CFI (cfiPicker3) Picker
        MOVA    R12, R11
        MOV.B   R13, R6
          CFI EndBlock cfiCond1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiPicker3
        REQUIRE ??Subroutine7_0
        // Fall through to label ??Subroutine7_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine7_0:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function OSSemSet
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+24
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function OSSemPendAbort
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond5) R6L Frame(CFA, -28)
          CFI (cfiCond5) R6H Frame(CFA, -26)
          CFI (cfiCond5) R7L Frame(CFA, -24)
          CFI (cfiCond5) R7H Frame(CFA, -22)
          CFI (cfiCond5) R8L Frame(CFA, -20)
          CFI (cfiCond5) R8H Frame(CFA, -18)
          CFI (cfiCond5) R9L Frame(CFA, -16)
          CFI (cfiCond5) R9H Frame(CFA, -14)
          CFI (cfiCond5) R10L Frame(CFA, -12)
          CFI (cfiCond5) R10H Frame(CFA, -10)
          CFI (cfiCond5) R11L Frame(CFA, -8)
          CFI (cfiCond5) R11H Frame(CFA, -6)
          CFI (cfiCond5) CFA SP+32
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function OSSemDel
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond6) R6L Frame(CFA, -28)
          CFI (cfiCond6) R6H Frame(CFA, -26)
          CFI (cfiCond6) R7L Frame(CFA, -24)
          CFI (cfiCond6) R7H Frame(CFA, -22)
          CFI (cfiCond6) R8L Frame(CFA, -20)
          CFI (cfiCond6) R8H Frame(CFA, -18)
          CFI (cfiCond6) R9L Frame(CFA, -16)
          CFI (cfiCond6) R9H Frame(CFA, -14)
          CFI (cfiCond6) R10L Frame(CFA, -12)
          CFI (cfiCond6) R10H Frame(CFA, -10)
          CFI (cfiCond6) R11L Frame(CFA, -8)
          CFI (cfiCond6) R11H Frame(CFA, -6)
          CFI (cfiCond6) CFA SP+32
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOVA    R14, R8
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7
        REQUIRE ??Subroutine0_0
        // Fall through to label ??Subroutine0_0

        RSEG CODE:CODE:REORDER:NOROOT(1)
??Subroutine0_0:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function OSSemQuery
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function OSSemPost
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond9) R10L Frame(CFA, -12)
          CFI (cfiCond9) R10H Frame(CFA, -10)
          CFI (cfiCond9) R11L Frame(CFA, -8)
          CFI (cfiCond9) R11H Frame(CFA, -6)
          CFI (cfiCond9) CFA SP+16
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function OSSemPend
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond10) R6L Frame(CFA, -28)
          CFI (cfiCond10) R6H Frame(CFA, -26)
          CFI (cfiCond10) R7L Frame(CFA, -24)
          CFI (cfiCond10) R7H Frame(CFA, -22)
          CFI (cfiCond10) R8L Frame(CFA, -20)
          CFI (cfiCond10) R8H Frame(CFA, -18)
          CFI (cfiCond10) R9L Frame(CFA, -16)
          CFI (cfiCond10) R9H Frame(CFA, -14)
          CFI (cfiCond10) R10L Frame(CFA, -12)
          CFI (cfiCond10) R10H Frame(CFA, -10)
          CFI (cfiCond10) R11L Frame(CFA, -8)
          CFI (cfiCond10) R11H Frame(CFA, -6)
          CFI (cfiCond10) CFA SP+32
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function OSSemAccept
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond11) R10L Frame(CFA, -12)
          CFI (cfiCond11) R10H Frame(CFA, -10)
          CFI (cfiCond11) R11L Frame(CFA, -8)
          CFI (cfiCond11) R11H Frame(CFA, -6)
          CFI (cfiCond11) CFA SP+16
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function OSSemSet
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond12) R8L Frame(CFA, -20)
          CFI (cfiCond12) R8H Frame(CFA, -18)
          CFI (cfiCond12) R9L Frame(CFA, -16)
          CFI (cfiCond12) R9H Frame(CFA, -14)
          CFI (cfiCond12) R10L Frame(CFA, -12)
          CFI (cfiCond12) R10H Frame(CFA, -10)
          CFI (cfiCond12) R11L Frame(CFA, -8)
          CFI (cfiCond12) R11H Frame(CFA, -6)
          CFI (cfiCond12) CFA SP+24
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function OSSemPendAbort
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond13) R6L Frame(CFA, -28)
          CFI (cfiCond13) R6H Frame(CFA, -26)
          CFI (cfiCond13) R7L Frame(CFA, -24)
          CFI (cfiCond13) R7H Frame(CFA, -22)
          CFI (cfiCond13) R8L Frame(CFA, -20)
          CFI (cfiCond13) R8H Frame(CFA, -18)
          CFI (cfiCond13) R9L Frame(CFA, -16)
          CFI (cfiCond13) R9H Frame(CFA, -14)
          CFI (cfiCond13) R10L Frame(CFA, -12)
          CFI (cfiCond13) R10H Frame(CFA, -10)
          CFI (cfiCond13) R11L Frame(CFA, -8)
          CFI (cfiCond13) R11H Frame(CFA, -6)
          CFI (cfiCond13) CFA SP+32
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function OSSemDel
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond14) R6L Frame(CFA, -28)
          CFI (cfiCond14) R6H Frame(CFA, -26)
          CFI (cfiCond14) R7L Frame(CFA, -24)
          CFI (cfiCond14) R7H Frame(CFA, -22)
          CFI (cfiCond14) R8L Frame(CFA, -20)
          CFI (cfiCond14) R8H Frame(CFA, -18)
          CFI (cfiCond14) R9L Frame(CFA, -16)
          CFI (cfiCond14) R9H Frame(CFA, -14)
          CFI (cfiCond14) R10L Frame(CFA, -12)
          CFI (cfiCond14) R10H Frame(CFA, -10)
          CFI (cfiCond14) R11L Frame(CFA, -8)
          CFI (cfiCond14) R11H Frame(CFA, -6)
          CFI (cfiCond14) CFA SP+32
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        CMP.B   #0x3, 0(R12)
        RETA
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//   74 #endif
//   75 
//   76 /*$PAGE*/
//   77 /*
//   78 *********************************************************************************************************
//   79 *                                           CREATE A SEMAPHORE
//   80 *
//   81 * Description: This function creates a semaphore.
//   82 *
//   83 * Arguments  : cnt           is the initial value for the semaphore.  If the value is 0, no resource is
//   84 *                            available (or no event has occurred).  You initialize the semaphore to a
//   85 *                            non-zero value to specify how many resources are available (e.g. if you have
//   86 *                            10 resources, you would initialize the semaphore to 10).
//   87 *
//   88 * Returns    : != (void *)0  is a pointer to the event control block (OS_EVENT) associated with the
//   89 *                            created semaphore
//   90 *              == (void *)0  if no event control blocks were available
//   91 *********************************************************************************************************
//   92 */
//   93 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   94 OS_EVENT  *OSSemCreate (INT16U cnt)
OSSemCreate:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function OSSemCreate
//   95 {
        FUNCALL OSSemCreate, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemCreate, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemCreate, OS_EventWaitListInit
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
//   96     OS_EVENT  *pevent;
//   97 #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
//   98     OS_CPU_SR  cpu_sr = 0u;
//   99 #endif
//  100 
//  101 
//  102 
//  103 #ifdef OS_SAFETY_CRITICAL_IEC61508
//  104     if (OSSafetyCriticalStartFlag == OS_TRUE) {
//  105         OS_SAFETY_CRITICAL_EXCEPTION();
//  106     }
//  107 #endif
//  108 
//  109     if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
        CMPX.B  #0x0, &OSIntNesting
        JEQ     ??OSSemCreate_0
//  110         return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
        MOVA    #0x0, R12
        JMP     ??OSSemCreate_1
//  111     }
//  112     OS_ENTER_CRITICAL();
??OSSemCreate_0:
        CALLA   #OSCPUSaveSR
        MOVA    &OSEventFreeList, R15
        MOVA    R15, R11
//  113     pevent = OSEventFreeList;                              /* Get next free event control block        */
//  114     if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
        CMPA    #0x0, R15
        JEQ     ??OSSemCreate_2
//  115         OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
        MOVX.A  0x2(R15), &OSEventFreeList
//  116     }
//  117     OS_EXIT_CRITICAL();
??OSSemCreate_2:
        CALLA   #OSCPURestoreSR
//  118     if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
        CMPA    #0x0, R11
        JEQ     ??OSSemCreate_3
//  119         pevent->OSEventType    = OS_EVENT_TYPE_SEM;
        MOV.B   #0x3, 0(R11)
//  120         pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
        MOV.W   R10, 0x6(R11)
//  121         pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
        MOVX.A  #0x0, 0x2(R11)
//  122 #if OS_EVENT_NAME_EN > 0u
//  123         pevent->OSEventName    = (INT8U *)(void *)"?";
//  124 #endif
//  125         OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
        MOVA    R11, R12
        CALLA   #OS_EventWaitListInit
//  126     }
//  127     return (pevent);
??OSSemCreate_3:
        MOVA    R11, R12
??OSSemCreate_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock16
//  128 }
//  129 
//  130 /*$PAGE*/
//  131 /*
//  132 *********************************************************************************************************
//  133 *                                         DELETE A SEMAPHORE
//  134 *
//  135 * Description: This function deletes a semaphore and readies all tasks pending on the semaphore.
//  136 *
//  137 * Arguments  : pevent        is a pointer to the event control block associated with the desired
//  138 *                            semaphore.
//  139 *
//  140 *              opt           determines delete options as follows:
//  141 *                            opt == OS_DEL_NO_PEND   Delete semaphore ONLY if no task pending
//  142 *                            opt == OS_DEL_ALWAYS    Deletes the semaphore even if tasks are waiting.
//  143 *                                                    In this case, all the tasks pending will be readied.
//  144 *
//  145 *              perr          is a pointer to an error code that can contain one of the following values:
//  146 *                            OS_ERR_NONE             The call was successful and the semaphore was deleted
//  147 *                            OS_ERR_DEL_ISR          If you attempted to delete the semaphore from an ISR
//  148 *                            OS_ERR_INVALID_OPT      An invalid option was specified
//  149 *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the semaphore
//  150 *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a semaphore
//  151 *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
//  152 *
//  153 * Returns    : pevent        upon error
//  154 *              (OS_EVENT *)0 if the semaphore was successfully deleted.
//  155 *
//  156 * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
//  157 *                 the semaphore MUST check the return code of OSSemPend().
//  158 *              2) OSSemAccept() callers will not know that the intended semaphore has been deleted unless
//  159 *                 they check 'pevent' to see that it's a NULL pointer.
//  160 *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
//  161 *                 time is directly proportional to the number of tasks waiting on the semaphore.
//  162 *              4) Because ALL tasks pending on the semaphore will be readied, you MUST be careful in
//  163 *                 applications where the semaphore is used for mutual exclusion because the resource(s)
//  164 *                 will no longer be guarded by the semaphore.
//  165 *********************************************************************************************************
//  166 */
//  167 
//  168 #if OS_SEM_DEL_EN > 0u

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function OSSemPost
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function OSSemDel
          CFI (cfiCond18) Conditional ??OSSemDel_8
          CFI (cfiCond18) R6L Frame(CFA, -28)
          CFI (cfiCond18) R6H Frame(CFA, -26)
          CFI (cfiCond18) R7L Frame(CFA, -24)
          CFI (cfiCond18) R7H Frame(CFA, -22)
          CFI (cfiCond18) R8L Frame(CFA, -20)
          CFI (cfiCond18) R8H Frame(CFA, -18)
          CFI (cfiCond18) R9L Frame(CFA, -16)
          CFI (cfiCond18) R9H Frame(CFA, -14)
          CFI (cfiCond18) R10L Frame(CFA, -12)
          CFI (cfiCond18) R10H Frame(CFA, -10)
          CFI (cfiCond18) R11L Frame(CFA, -8)
          CFI (cfiCond18) R11H Frame(CFA, -6)
          CFI (cfiCond18) CFA SP+32
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV.B   #0x0, R15
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
        REQUIRE ??Subroutine3_0
        // Fall through to label ??Subroutine3_0

        RSEG CODE:CODE:REORDER:NOROOT(1)
??Subroutine3_0:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function OSSemPendAbort
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function OSSemPendAbort
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond21) R6L Frame(CFA, -28)
          CFI (cfiCond21) R6H Frame(CFA, -26)
          CFI (cfiCond21) R7L Frame(CFA, -24)
          CFI (cfiCond21) R7H Frame(CFA, -22)
          CFI (cfiCond21) R8L Frame(CFA, -20)
          CFI (cfiCond21) R8H Frame(CFA, -18)
          CFI (cfiCond21) R9L Frame(CFA, -16)
          CFI (cfiCond21) R9H Frame(CFA, -14)
          CFI (cfiCond21) R10L Frame(CFA, -12)
          CFI (cfiCond21) R10H Frame(CFA, -10)
          CFI (cfiCond21) R11L Frame(CFA, -8)
          CFI (cfiCond21) R11H Frame(CFA, -6)
          CFI (cfiCond21) CFA SP+32
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function OSSemPost
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond22) R10L Frame(CFA, -12)
          CFI (cfiCond22) R10H Frame(CFA, -10)
          CFI (cfiCond22) R11L Frame(CFA, -8)
          CFI (cfiCond22) R11H Frame(CFA, -6)
          CFI (cfiCond22) CFA SP+16
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function OSSemDel
          CFI (cfiCond23) Conditional ??OSSemDel_8
          CFI (cfiCond23) R6L Frame(CFA, -28)
          CFI (cfiCond23) R6H Frame(CFA, -26)
          CFI (cfiCond23) R7L Frame(CFA, -24)
          CFI (cfiCond23) R7H Frame(CFA, -22)
          CFI (cfiCond23) R8L Frame(CFA, -20)
          CFI (cfiCond23) R8H Frame(CFA, -18)
          CFI (cfiCond23) R9L Frame(CFA, -16)
          CFI (cfiCond23) R9H Frame(CFA, -14)
          CFI (cfiCond23) R10L Frame(CFA, -12)
          CFI (cfiCond23) R10H Frame(CFA, -10)
          CFI (cfiCond23) R11L Frame(CFA, -8)
          CFI (cfiCond23) R11H Frame(CFA, -6)
          CFI (cfiCond23) CFA SP+32
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOV.B   #0x1, R14
        MOVA    #0x0, R13
        MOVA    R11, R12
        BRA     #OS_EventTaskRdy
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond25 Using cfiCommon0
          CFI Function OSSemPost
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function OSSemPendAbort
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond26) R6L Frame(CFA, -28)
          CFI (cfiCond26) R6H Frame(CFA, -26)
          CFI (cfiCond26) R7L Frame(CFA, -24)
          CFI (cfiCond26) R7H Frame(CFA, -22)
          CFI (cfiCond26) R8L Frame(CFA, -20)
          CFI (cfiCond26) R8H Frame(CFA, -18)
          CFI (cfiCond26) R9L Frame(CFA, -16)
          CFI (cfiCond26) R9H Frame(CFA, -14)
          CFI (cfiCond26) R10L Frame(CFA, -12)
          CFI (cfiCond26) R10H Frame(CFA, -10)
          CFI (cfiCond26) R11L Frame(CFA, -8)
          CFI (cfiCond26) R11H Frame(CFA, -6)
          CFI (cfiCond26) CFA SP+32
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function OSSemDel
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond27) R6L Frame(CFA, -28)
          CFI (cfiCond27) R6H Frame(CFA, -26)
          CFI (cfiCond27) R7L Frame(CFA, -24)
          CFI (cfiCond27) R7H Frame(CFA, -22)
          CFI (cfiCond27) R8L Frame(CFA, -20)
          CFI (cfiCond27) R8H Frame(CFA, -18)
          CFI (cfiCond27) R9L Frame(CFA, -16)
          CFI (cfiCond27) R9H Frame(CFA, -14)
          CFI (cfiCond27) R10L Frame(CFA, -12)
          CFI (cfiCond27) R10H Frame(CFA, -10)
          CFI (cfiCond27) R11L Frame(CFA, -8)
          CFI (cfiCond27) R11H Frame(CFA, -6)
          CFI (cfiCond27) CFA SP+32
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        CALLA   #OSCPUSaveSR
        MOV.W   R12, R10
        CMP.B   #0x0, 0x8(R11)
        RETA
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  169 OS_EVENT  *OSSemDel (OS_EVENT  *pevent,
OSSemDel:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function OSSemDel
//  170                      INT8U      opt,
//  171                      INT8U     *perr)
//  172 {
        FUNCALL OSSemDel, OSCPUSaveSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemDel, OS_EventTaskRdy
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemDel, OS_Sched
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        CALLA   #?Subroutine0
//  173     BOOLEAN    tasks_waiting;
//  174     OS_EVENT  *pevent_return;
//  175 #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
//  176     OS_CPU_SR  cpu_sr = 0u;
//  177 #endif
//  178 
//  179 
//  180 
//  181 #ifdef OS_SAFETY_CRITICAL
//  182     if (perr == (INT8U *)0) {
//  183         OS_SAFETY_CRITICAL_EXCEPTION();
//  184     }
//  185 #endif
//  186 
//  187 #if OS_ARG_CHK_EN > 0u
//  188     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
//  189         *perr = OS_ERR_PEVENT_NULL;
//  190         return (pevent);
//  191     }
//  192 #endif
//  193     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
??CrossCallReturnLabel_12:
        JEQ     ??OSSemDel_3
//  194         *perr = OS_ERR_EVENT_TYPE;
        MOV.B   #0x1, 0(R14)
//  195         return (pevent);
        JMP     ??OSSemDel_1
//  196     }
//  197     if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
??OSSemDel_3:
        CMPX.B  #0x0, &OSIntNesting
        JEQ     ??OSSemDel_4
//  198         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
        MOV.B   #0xf, 0(R14)
//  199         return (pevent);
        JMP     ??OSSemDel_1
//  200     }
//  201     OS_ENTER_CRITICAL();
??OSSemDel_4:
        CALLA   #?Subroutine1
//  202     if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on semaphore    */
??CrossCallReturnLabel_2:
        JNE     ??OSSemDel_5
        MOV.B   #0x0, R9
        JMP     ??OSSemDel_6
??OSSemDel_5:
        MOV.B   #0x1, R9
//  203         tasks_waiting = OS_TRUE;                           /* Yes                                      */
//  204     } else {
//  205         tasks_waiting = OS_FALSE;                          /* No                                       */
//  206     }
//  207     switch (opt) {
??OSSemDel_6:
        SUB.B   #0x0, R6
        JEQ     ??OSSemDel_7
        SUB.B   #0x1, R6
        JEQ     ??OSSemDel_8
        JMP     ??OSSemDel_9
//  208         case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
//  209              if (tasks_waiting == OS_FALSE) {
??OSSemDel_7:
        BIT.B   #0x1, R9
        JC      ??OSSemDel_10
//  210 #if OS_EVENT_NAME_EN > 0u
//  211                  pevent->OSEventName    = (INT8U *)(void *)"?";
//  212 #endif
//  213                  pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
        CALLA   #?Subroutine4
//  214                  pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
//  215                  pevent->OSEventCnt     = 0u;
//  216                  OSEventFreeList        = pevent;          /* Get next free event control block        */
//  217                  OS_EXIT_CRITICAL();
??CrossCallReturnLabel_3:
        CALLA   #OSCPURestoreSR
//  218                  *perr                  = OS_ERR_NONE;
        JMP     ??OSSemDel_2
//  219                  pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
//  220              } else {
//  221                  OS_EXIT_CRITICAL();
??OSSemDel_10:
        CALLA   #OSCPURestoreSR
//  222                  *perr                  = OS_ERR_TASK_WAITING;
        MOV.B   #0x49, 0(R8)
//  223                  pevent_return          = pevent;
        JMP     ??OSSemDel_11
//  224              }
//  225              break;
//  226 
//  227         case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
//  228              while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for semaphore    */
//  229                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
??OSSemDel_0:
        CALLA   #?Subroutine3
//  230              }
??OSSemDel_8:
        CMP.B   #0x0, 0x8(R11)
        JNE     ??OSSemDel_0
//  231 #if OS_EVENT_NAME_EN > 0u
//  232              pevent->OSEventName    = (INT8U *)(void *)"?";
//  233 #endif
//  234              pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
        CALLA   #?Subroutine4
//  235              pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
//  236              pevent->OSEventCnt     = 0u;
//  237              OSEventFreeList        = pevent;              /* Get next free event control block        */
//  238              OS_EXIT_CRITICAL();
??CrossCallReturnLabel_4:
        MOV.W   R10, R12
        CALLA   #OSCPURestoreSR
//  239              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
        BIT.B   #0x1, R9
        JNC     ??OSSemDel_2
//  240                  OS_Sched();                               /* Find highest priority task ready to run  */
        CALLA   #OS_Sched
//  241              }
//  242              *perr                  = OS_ERR_NONE;
??OSSemDel_2:
        MOV.B   #0x0, 0(R8)
//  243              pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
        MOVA    #0x0, R12
//  244              break;
        JMP     ??OSSemDel_1
//  245 
//  246         default:
//  247              OS_EXIT_CRITICAL();
??OSSemDel_9:
        CALLA   #OSCPURestoreSR
//  248              *perr                  = OS_ERR_INVALID_OPT;
        MOV.B   #0x7, 0(R8)
//  249              pevent_return          = pevent;
??OSSemDel_11:
        MOVA    R11, R12
//  250              break;
//  251     }
//  252     return (pevent_return);
??OSSemDel_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock29
//  253 }

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function OSSemDel
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function OSSemDel
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond31) R6L Frame(CFA, -28)
          CFI (cfiCond31) R6H Frame(CFA, -26)
          CFI (cfiCond31) R7L Frame(CFA, -24)
          CFI (cfiCond31) R7H Frame(CFA, -22)
          CFI (cfiCond31) R8L Frame(CFA, -20)
          CFI (cfiCond31) R8H Frame(CFA, -18)
          CFI (cfiCond31) R9L Frame(CFA, -16)
          CFI (cfiCond31) R9H Frame(CFA, -14)
          CFI (cfiCond31) R10L Frame(CFA, -12)
          CFI (cfiCond31) R10H Frame(CFA, -10)
          CFI (cfiCond31) R11L Frame(CFA, -8)
          CFI (cfiCond31) R11H Frame(CFA, -6)
          CFI (cfiCond31) CFA SP+32
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV.B   #0x0, 0(R11)
        MOVX.A  &OSEventFreeList, 0x2(R11)
        MOV.W   #0x0, 0x6(R11)
        MOVA    R11, &OSEventFreeList
        RETA
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond33 Using cfiCommon0
          CFI Function OSSemPost
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function OSSemPendAbort
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond34) R6L Frame(CFA, -28)
          CFI (cfiCond34) R6H Frame(CFA, -26)
          CFI (cfiCond34) R7L Frame(CFA, -24)
          CFI (cfiCond34) R7H Frame(CFA, -22)
          CFI (cfiCond34) R8L Frame(CFA, -20)
          CFI (cfiCond34) R8H Frame(CFA, -18)
          CFI (cfiCond34) R9L Frame(CFA, -16)
          CFI (cfiCond34) R9H Frame(CFA, -14)
          CFI (cfiCond34) R10L Frame(CFA, -12)
          CFI (cfiCond34) R10H Frame(CFA, -10)
          CFI (cfiCond34) R11L Frame(CFA, -8)
          CFI (cfiCond34) R11H Frame(CFA, -6)
          CFI (cfiCond34) CFA SP+32
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        MOV.W   R10, R12
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35
        REQUIRE ??Subroutine6_0
        // Fall through to label ??Subroutine6_0
//  254 #endif
//  255 
//  256 /*$PAGE*/
//  257 /*
//  258 *********************************************************************************************************
//  259 *                                           PEND ON SEMAPHORE
//  260 *
//  261 * Description: This function waits for a semaphore.
//  262 *
//  263 * Arguments  : pevent        is a pointer to the event control block associated with the desired
//  264 *                            semaphore.
//  265 *
//  266 *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
//  267 *                            wait for the resource up to the amount of time specified by this argument.
//  268 *                            If you specify 0, however, your task will wait forever at the specified
//  269 *                            semaphore or, until the resource becomes available (or the event occurs).
//  270 *
//  271 *              perr          is a pointer to where an error message will be deposited.  Possible error
//  272 *                            messages are:
//  273 *
//  274 *                            OS_ERR_NONE         The call was successful and your task owns the resource
//  275 *                                                or, the event you are waiting for occurred.
//  276 *                            OS_ERR_TIMEOUT      The semaphore was not received within the specified
//  277 *                                                'timeout'.
//  278 *                            OS_ERR_PEND_ABORT   The wait on the semaphore was aborted.
//  279 *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore.
//  280 *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
//  281 *                                                would lead to a suspension.
//  282 *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
//  283 *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
//  284 *
//  285 * Returns    : none
//  286 *********************************************************************************************************
//  287 */
//  288 /*$PAGE*/

        RSEG CODE:CODE:REORDER:NOROOT(1)
??Subroutine6_0:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function OSSemPend
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function OSSemPost
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond37) R10L Frame(CFA, -12)
          CFI (cfiCond37) R10H Frame(CFA, -10)
          CFI (cfiCond37) R11L Frame(CFA, -8)
          CFI (cfiCond37) R11H Frame(CFA, -6)
          CFI (cfiCond37) CFA SP+16
          CFI Block cfiCond38 Using cfiCommon0
          CFI (cfiCond38) Function OSSemPendAbort
          CFI (cfiCond38) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond38) R6L Frame(CFA, -28)
          CFI (cfiCond38) R6H Frame(CFA, -26)
          CFI (cfiCond38) R7L Frame(CFA, -24)
          CFI (cfiCond38) R7H Frame(CFA, -22)
          CFI (cfiCond38) R8L Frame(CFA, -20)
          CFI (cfiCond38) R8H Frame(CFA, -18)
          CFI (cfiCond38) R9L Frame(CFA, -16)
          CFI (cfiCond38) R9H Frame(CFA, -14)
          CFI (cfiCond38) R10L Frame(CFA, -12)
          CFI (cfiCond38) R10H Frame(CFA, -10)
          CFI (cfiCond38) R11L Frame(CFA, -8)
          CFI (cfiCond38) R11H Frame(CFA, -6)
          CFI (cfiCond38) CFA SP+32
          CFI Block cfiPicker39 Using cfiCommon1
          CFI (cfiPicker39) NoFunction
          CFI (cfiPicker39) Picker
        CALLA   #OSCPURestoreSR
        BRA     #OS_Sched
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiCond38
          CFI EndBlock cfiPicker39

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  289 void  OSSemPend (OS_EVENT  *pevent,
OSSemPend:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function OSSemPend
//  290                  INT32U     timeout,
//  291                  INT8U     *perr)
//  292 {
        FUNCALL OSSemPend, OSCPUSaveSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OS_EventTaskWait
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OS_Sched
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OSCPUSaveSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OS_EventTaskRemove
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPend, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R9
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOVA    R13, R6
//  293 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  294     OS_CPU_SR  cpu_sr = 0u;
//  295 #endif
//  296 
//  297 
//  298 
//  299 #ifdef OS_SAFETY_CRITICAL
//  300     if (perr == (INT8U *)0) {
//  301         OS_SAFETY_CRITICAL_EXCEPTION();
//  302     }
//  303 #endif
//  304 
//  305 #if OS_ARG_CHK_EN > 0u
//  306     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  307         *perr = OS_ERR_PEVENT_NULL;
//  308         return;
//  309     }
//  310 #endif
//  311     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        CALLA   #??Subroutine0_0
??CrossCallReturnLabel_16:
        JEQ     ??OSSemPend_0
//  312         *perr = OS_ERR_EVENT_TYPE;
        MOV.B   #0x1, 0(R13)
//  313         return;
        JMP     ??OSSemPend_1
//  314     }
//  315     if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
??OSSemPend_0:
        CMPX.B  #0x0, &OSIntNesting
        JEQ     ??OSSemPend_2
//  316         *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
        MOV.B   #0x2, 0(R13)
//  317         return;
        JMP     ??OSSemPend_1
//  318     }
//  319     if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
??OSSemPend_2:
        CMPX.B  #0x0, &OSLockNesting
        JEQ     ??OSSemPend_3
//  320         *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
        MOV.B   #0xd, 0(R13)
//  321         return;
        JMP     ??OSSemPend_1
//  322     }
//  323     OS_ENTER_CRITICAL();
??OSSemPend_3:
        CALLA   #OSCPUSaveSR
        MOV.W   R12, R8
//  324     if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
        CMP.W   #0x0, 0x6(R9)
        JEQ     ??OSSemPend_4
//  325         pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
        ADD.W   #0xffff, 0x6(R9)
//  326         OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  327         *perr = OS_ERR_NONE;
        MOV.B   #0x0, 0(R6)
//  328         return;
        JMP     ??OSSemPend_1
//  329     }
//  330                                                       /* Otherwise, must wait until event occurs       */
//  331     OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
??OSSemPend_4:
        MOVA    #OSTCBCur, R7
        MOVA    @R7, R15
        BIS.B   #0x1, 0x2e(R15)
//  332     OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
        MOVA    @R7, R15
        MOV.B   #0x0, 0x2f(R15)
//  333     OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
        MOVA    @R7, R15
        MOV.W   R10, 0x2a(R15)
        MOV.W   R11, 0x2c(R15)
//  334     OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
        MOVA    R9, R12
        CALLA   #OS_EventTaskWait
//  335     OS_EXIT_CRITICAL();
        MOV.W   R8, R12
        CALLA   #??Subroutine6_0
//  336     OS_Sched();                                       /* Find next highest priority task ready         */
//  337     OS_ENTER_CRITICAL();
??CrossCallReturnLabel_8:
        CALLA   #OSCPUSaveSR
        MOV.W   R12, R8
        MOVA    @R7, R15
        MOV.B   0x2f(R15), R14
        SUB.B   #0x0, R14
        JEQ     ??OSSemPend_5
        SUB.B   #0x2, R14
        JEQ     ??OSSemPend_6
        JMP     ??OSSemPend_7
//  338     switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
//  339         case OS_STAT_PEND_OK:
//  340              *perr = OS_ERR_NONE;
??OSSemPend_5:
        MOV.B   #0x0, 0(R6)
//  341              break;
        JMP     ??OSSemPend_8
//  342 
//  343         case OS_STAT_PEND_ABORT:
//  344              *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
??OSSemPend_6:
        MOV.B   #0xe, 0(R6)
//  345              break;
        JMP     ??OSSemPend_8
//  346 
//  347         case OS_STAT_PEND_TO:
//  348         default:
//  349              OS_EventTaskRemove(OSTCBCur, pevent);
??OSSemPend_7:
        MOVA    R9, R13
        MOVA    @R7, R12
        CALLA   #OS_EventTaskRemove
//  350              *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
        MOV.B   #0xa, 0(R6)
//  351              break;
//  352     }
//  353     OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
??OSSemPend_8:
        MOVA    @R7, R15
        MOV.B   #0x0, 0x2e(R15)
//  354     OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
        MOVA    @R7, R15
        MOV.B   #0x0, 0x2f(R15)
//  355     OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
        MOVA    @R7, R15
        MOVX.A  #0x0, 0x1c(R15)
//  356 #if (OS_EVENT_MULTI_EN > 0u)
//  357     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
//  358 #endif
//  359     OS_EXIT_CRITICAL();
        MOV.W   R8, R12
        CALLA   #OSCPURestoreSR
//  360 }
??OSSemPend_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock40
//  361 
//  362 /*$PAGE*/
//  363 /*
//  364 *********************************************************************************************************
//  365 *                                      ABORT WAITING ON A SEMAPHORE
//  366 *
//  367 * Description: This function aborts & readies any tasks currently waiting on a semaphore.  This function
//  368 *              should be used to fault-abort the wait on the semaphore, rather than to normally signal
//  369 *              the semaphore via OSSemPost().
//  370 *
//  371 * Arguments  : pevent        is a pointer to the event control block associated with the desired
//  372 *                            semaphore.
//  373 *
//  374 *              opt           determines the type of ABORT performed:
//  375 *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
//  376 *                                                     semaphore
//  377 *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
//  378 *                                                     semaphore
//  379 *
//  380 *              perr          is a pointer to where an error message will be deposited.  Possible error
//  381 *                            messages are:
//  382 *
//  383 *                            OS_ERR_NONE         No tasks were     waiting on the semaphore.
//  384 *                            OS_ERR_PEND_ABORT   At least one task waiting on the semaphore was readied
//  385 *                                                and informed of the aborted wait; check return value
//  386 *                                                for the number of tasks whose wait on the semaphore
//  387 *                                                was aborted.
//  388 *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore.
//  389 *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
//  390 *
//  391 * Returns    : == 0          if no tasks were waiting on the semaphore, or upon error.
//  392 *              >  0          if one or more tasks waiting on the semaphore are now readied and informed.
//  393 *********************************************************************************************************
//  394 */
//  395 
//  396 #if OS_SEM_PEND_ABORT_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  397 INT8U  OSSemPendAbort (OS_EVENT  *pevent,
OSSemPendAbort:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function OSSemPendAbort
//  398                        INT8U      opt,
//  399                        INT8U     *perr)
//  400 {
        FUNCALL OSSemPendAbort, OSCPUSaveSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPendAbort, OS_EventTaskRdy
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPendAbort, OS_EventTaskRdy
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPendAbort, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPendAbort, OS_Sched
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSSemPendAbort, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        CALLA   #?Subroutine0
//  401     INT8U      nbr_tasks;
//  402 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  403     OS_CPU_SR  cpu_sr = 0u;
//  404 #endif
//  405 
//  406 
//  407 
//  408 #ifdef OS_SAFETY_CRITICAL
//  409     if (perr == (INT8U *)0) {
//  410         OS_SAFETY_CRITICAL_EXCEPTION();
//  411     }
//  412 #endif
//  413 
//  414 #if OS_ARG_CHK_EN > 0u
//  415     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  416         *perr = OS_ERR_PEVENT_NULL;
//  417         return (0u);
//  418     }
//  419 #endif
//  420     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
??CrossCallReturnLabel_11:
        JEQ     ??OSSemPendAbort_1
//  421         *perr = OS_ERR_EVENT_TYPE;
        MOV.B   #0x1, 0(R14)
//  422         return (0u);
        JMP     ??OSSemPendAbort_2
//  423     }
//  424     OS_ENTER_CRITICAL();
??OSSemPendAbort_1:
        CALLA   #?Subroutine1
//  425     if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting on semaphore?         */
??CrossCallReturnLabel_1:
        JEQ     ??OSSemPendAbort_3
//  426         nbr_tasks = 0u;
        MOV.B   #0x0, R9
//  427         switch (opt) {
        CMP.B   #0x1, R6
        JNE     ??OSSemPendAbort_4
//  428             case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
//  429                  while (pevent->OSEventGrp != 0u) {   /* Yes, ready ALL tasks waiting on semaphore     */
//  430                      (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
??OSSemPendAbort_0:
        MOV.B   #0x2, R15
        CALLA   #??Subroutine3_0
//  431                      nbr_tasks++;
??CrossCallReturnLabel_6:
        ADD.B   #0x1, R9
//  432                  }
        CMP.B   #0x0, 0x8(R11)
        JEQ     ??OSSemPendAbort_5
        JMP     ??OSSemPendAbort_0
//  433                  break;
//  434 
//  435             case OS_PEND_OPT_NONE:
//  436             default:                                  /* No,  ready HPT       waiting on semaphore     */
//  437                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
??OSSemPendAbort_4:
        MOV.B   #0x2, R15
        CALLA   #??Subroutine3_0
//  438                  nbr_tasks++;
??CrossCallReturnLabel_5:
        MOV.B   #0x1, R9
//  439                  break;
//  440         }
//  441         OS_EXIT_CRITICAL();
??OSSemPendAbort_5:
        CALLA   #?Subroutine2
//  442         OS_Sched();                                   /* Find HPT ready to run                         */
//  443         *perr = OS_ERR_PEND_ABORT;
??CrossCallReturnLabel_9:
        MOV.B   #0xe, 0(R8)
//  444         return (nbr_tasks);
        MOV.B   R9, R12
        JMP     ??OSSemPendAbort_6
//  445     }
//  446     OS_EXIT_CRITICAL();
??OSSemPendAbort_3:
        CALLA   #OSCPURestoreSR
//  447     *perr = OS_ERR_NONE;
        MOV.B   #0x0, 0(R8)
//  448     return (0u);                                      /* No tasks waiting on semaphore                 */
??OSSemPendAbort_2:
        MOV.B   #0x0, R12
??OSSemPendAbort_6:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock41
//  449 }
//  450 #endif
//  451 
//  452 /*$PAGE*/
//  453 /*
//  454 *********************************************************************************************************
//  455 *                                         POST TO A SEMAPHORE
//  456 *
//  457 * Description: This function signals a semaphore
//  458 *
//  459 * Arguments  : pevent        is a pointer to the event control block associated with the desired
//  460 *                            semaphore.
//  461 *
//  462 * Returns    : OS_ERR_NONE         The call was successful and the semaphore was signaled.
//  463 *              OS_ERR_SEM_OVF      If the semaphore count exceeded its limit.  In other words, you have
//  464 *                                  signalled the semaphore more often than you waited on it with either
//  465 *                                  OSSemAccept() or OSSemPend().
//  466 *              OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a semaphore
//  467 *              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
//  468 *********************************************************************************************************
//  469 */
//  470 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  471 INT8U  OSSemPost (OS_EVENT *pevent)
OSSemPost:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function OSSemPost
//  472 {
        FUNCALL OSSemPost, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemPost, OS_EventTaskRdy
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemPost, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemPost, OS_Sched
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemPost, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemPost, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R11
//  473 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  474     OS_CPU_SR  cpu_sr = 0u;
//  475 #endif
//  476 
//  477 
//  478 
//  479 #if OS_ARG_CHK_EN > 0u
//  480     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  481         return (OS_ERR_PEVENT_NULL);
//  482     }
//  483 #endif
//  484     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
        CALLA   #??Subroutine0_0
??CrossCallReturnLabel_15:
        JEQ     ??OSSemPost_0
//  485         return (OS_ERR_EVENT_TYPE);
        MOV.B   #0x1, R12
        JMP     ??OSSemPost_1
//  486     }
//  487     OS_ENTER_CRITICAL();
??OSSemPost_0:
        CALLA   #?Subroutine1
//  488     if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
??CrossCallReturnLabel_0:
        JEQ     ??OSSemPost_2
//  489                                                       /* Ready HPT waiting on event                    */
//  490         (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
        CALLA   #?Subroutine3
//  491         OS_EXIT_CRITICAL();
??CrossCallReturnLabel_7:
        CALLA   #?Subroutine2
//  492         OS_Sched();                                   /* Find HPT ready to run                         */
//  493         return (OS_ERR_NONE);
??CrossCallReturnLabel_10:
        JMP     ??OSSemPost_3
//  494     }
//  495     if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
??OSSemPost_2:
        CMP.W   #0xffff, 0x6(R11)
        JEQ     ??OSSemPost_4
//  496         pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
        ADD.W   #0x1, 0x6(R11)
//  497         OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  498         return (OS_ERR_NONE);
??OSSemPost_3:
        MOV.B   #0x0, R12
        JMP     ??OSSemPost_1
//  499     }
//  500     OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
??OSSemPost_4:
        CALLA   #OSCPURestoreSR
//  501     return (OS_ERR_SEM_OVF);
        MOV.B   #0x33, R12
??OSSemPost_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock42
//  502 }
//  503 
//  504 /*$PAGE*/
//  505 /*
//  506 *********************************************************************************************************
//  507 *                                          QUERY A SEMAPHORE
//  508 *
//  509 * Description: This function obtains information about a semaphore
//  510 *
//  511 * Arguments  : pevent        is a pointer to the event control block associated with the desired
//  512 *                            semaphore
//  513 *
//  514 *              p_sem_data    is a pointer to a structure that will contain information about the
//  515 *                            semaphore.
//  516 *
//  517 * Returns    : OS_ERR_NONE         The call was successful and the message was sent
//  518 *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non semaphore.
//  519 *              OS_ERR_PEVENT_NULL  If 'pevent'     is a NULL pointer.
//  520 *              OS_ERR_PDATA_NULL   If 'p_sem_data' is a NULL pointer
//  521 *********************************************************************************************************
//  522 */
//  523 
//  524 #if OS_SEM_QUERY_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  525 INT8U  OSSemQuery (OS_EVENT     *pevent,
OSSemQuery:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function OSSemQuery
//  526                    OS_SEM_DATA  *p_sem_data)
//  527 {
        FUNCALL OSSemQuery, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSSemQuery, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
        MOVA    R13, R11
//  528     INT8U       i;
//  529     OS_PRIO    *psrc;
//  530     OS_PRIO    *pdest;
//  531 #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
//  532     OS_CPU_SR   cpu_sr = 0u;
//  533 #endif
//  534 
//  535 
//  536 
//  537 #if OS_ARG_CHK_EN > 0u
//  538     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
//  539         return (OS_ERR_PEVENT_NULL);
//  540     }
//  541     if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
//  542         return (OS_ERR_PDATA_NULL);
//  543     }
//  544 #endif
//  545     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
        CALLA   #??Subroutine0_0
??CrossCallReturnLabel_14:
        JEQ     ??OSSemQuery_1
//  546         return (OS_ERR_EVENT_TYPE);
        MOV.B   #0x1, R12
        JMP     ??OSSemQuery_2
//  547     }
//  548     OS_ENTER_CRITICAL();
??OSSemQuery_1:
        CALLA   #OSCPUSaveSR
//  549     p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
        MOV.B   0x8(R10), 0xa(R11)
//  550     psrc                   = &pevent->OSEventTbl[0];
        MOVA    R10, R15
        ADDA    #0x9, R15
//  551     pdest                  = &p_sem_data->OSEventTbl[0];
        MOVA    R11, R14
        ADDA    #0x2, R14
//  552     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
        MOV.B   #0x4, R13
//  553         *pdest++ = *psrc++;
??OSSemQuery_0:
        MOV.B   @R15+, 0(R14)
        ADDA    #0x1, R14
        MOV.B   @R15+, 0(R14)
        ADDA    #0x1, R14
//  554     }
        ADD.B   #0xff, R13
        JNE     ??OSSemQuery_0
//  555     p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
        MOV.W   0x6(R10), 0(R11)
//  556     OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  557     return (OS_ERR_NONE);
        MOV.B   #0x0, R12
??OSSemQuery_2:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock43
//  558 }
//  559 #endif                                                     /* OS_SEM_QUERY_EN                          */
//  560 
//  561 /*$PAGE*/
//  562 /*
//  563 *********************************************************************************************************
//  564 *                                              SET SEMAPHORE
//  565 *
//  566 * Description: This function sets the semaphore count to the value specified as an argument.  Typically,
//  567 *              this value would be 0.
//  568 *
//  569 *              You would typically use this function when a semaphore is used as a signaling mechanism
//  570 *              and, you want to reset the count value.
//  571 *
//  572 * Arguments  : pevent     is a pointer to the event control block
//  573 *
//  574 *              cnt        is the new value for the semaphore count.  You would pass 0 to reset the
//  575 *                         semaphore count.
//  576 *
//  577 *              perr       is a pointer to an error code returned by the function as follows:
//  578 *
//  579 *                            OS_ERR_NONE          The call was successful and the semaphore value was set.
//  580 *                            OS_ERR_EVENT_TYPE    If you didn't pass a pointer to a semaphore.
//  581 *                            OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer.
//  582 *                            OS_ERR_TASK_WAITING  If tasks are waiting on the semaphore.
//  583 *********************************************************************************************************
//  584 */
//  585 
//  586 #if OS_SEM_SET_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  587 void  OSSemSet (OS_EVENT  *pevent,
OSSemSet:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function OSSemSet
//  588                 INT16U     cnt,
//  589                 INT8U     *perr)
//  590 {
        FUNCALL OSSemSet, OSCPUSaveSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSSemSet, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R11
        MOV.W   R13, R10
        CALLA   #??Subroutine7_0
//  591 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  592     OS_CPU_SR  cpu_sr = 0u;
//  593 #endif
//  594 
//  595 
//  596 
//  597 #ifdef OS_SAFETY_CRITICAL
//  598     if (perr == (INT8U *)0) {
//  599         OS_SAFETY_CRITICAL_EXCEPTION();
//  600     }
//  601 #endif
//  602 
//  603 #if OS_ARG_CHK_EN > 0u
//  604     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  605         *perr = OS_ERR_PEVENT_NULL;
//  606         return;
//  607     }
//  608 #endif
//  609     if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
??CrossCallReturnLabel_13:
        JEQ     ??OSSemSet_0
//  610         *perr = OS_ERR_EVENT_TYPE;
        MOV.B   #0x1, 0(R14)
//  611         return;
        JMP     ??OSSemSet_1
//  612     }
//  613     OS_ENTER_CRITICAL();
??OSSemSet_0:
        CALLA   #OSCPUSaveSR
//  614     *perr = OS_ERR_NONE;
        MOV.B   #0x0, 0(R8)
//  615     if (pevent->OSEventCnt > 0u) {                    /* See if semaphore already has a count          */
        CMP.W   #0x0, 0x6(R11)
        JNE     ??OSSemSet_2
//  616         pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
//  617     } else {                                          /* No                                            */
//  618         if (pevent->OSEventGrp == 0u) {               /*      See if task(s) waiting?                  */
        CMP.B   #0x0, 0x8(R11)
        JNE     ??OSSemSet_3
//  619             pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
??OSSemSet_2:
        MOV.W   R10, 0x6(R11)
        JMP     ??OSSemSet_4
//  620         } else {
//  621             *perr              = OS_ERR_TASK_WAITING;
??OSSemSet_3:
        MOV.B   #0x49, 0(R8)
//  622         }
//  623     }
//  624     OS_EXIT_CRITICAL();
??OSSemSet_4:
        CALLA   #OSCPURestoreSR
//  625 }
??OSSemSet_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock44

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  626 #endif
//  627 
//  628 #endif                                                /* OS_SEM_EN                                     */
//  629 	 	   	  		 			 	    		   		 		 	 	 			 	    		   	 			 	  	 		 				 		  			 		 					 	  	  		      		  	   		      		  	 		 	      		   		 		  	 		 	      		  		  		  
// 
// 780 bytes in segment CODE
// 
// 780 bytes of CODE memory
//
//Errors: none
//Warnings: 11
