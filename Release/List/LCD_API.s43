///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      06/Jun/2016  16:42:18 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\LCD_API.c                     /
//    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\LCD_API.c -D NDEBUG -D        /
//                     RAM_VECTOR -lC C:\Users\615\Desktop\MSP430\MSP430F5529 /
//                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\List\ -lA               /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\          /
//                     -D__MSP430F5529__ -e --double=32 --dlib_config         /
//                     "D:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº /
//                     ¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MS /
//                     P430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                 /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                   /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I      /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\12864\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\oled\ -I C:\Users\615\Desktop\MSP430\ /
//                     MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc /
//                     \ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\ /
//                     C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\src\ -I                  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\inc\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\src\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\ -I                           /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\2.2TFT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\delay\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\ -I C:\Users\615\Desktop\MSP430\MSP430F /
//                     5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\inc\ -I              /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\src\ -I C:\Users\615\Desktop\MSP430\MSP /
//                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\ -I                /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\User\USER\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\App\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\ -I                         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\        /
//                     --core=430X --data_model=large -Oh --multiplier=32     /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\LCD_API.s43                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD_API

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__iar_require _Printf", "unknown"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?CopyMemoryWords20
        EXTERN ?DivMod16u
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC BACK_COLOR
        PUBLIC LCD_Display_Full
        FUNCTION LCD_Display_Full,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC LCD_Draw_Circle
        FUNCTION LCD_Draw_Circle,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 46, STACK
        PUBLIC LCD_Draw_Dot
        FUNCTION LCD_Draw_Dot,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC LCD_Draw_Line
        FUNCTION LCD_Draw_Line,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 44, STACK
        PUBLIC LCD_Draw_Part
        FUNCTION LCD_Draw_Part,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC LCD_Draw_Rectangle
        FUNCTION LCD_Draw_Rectangle,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC LCD_Printf
        FUNCTION LCD_Printf,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 48, STACK
        PUBLIC LCD_Printf_8x16
        FUNCTION LCD_Printf_8x16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 46, STACK
        PUBLIC LCD_Show_Char8X16
        FUNCTION LCD_Show_Char8X16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC LCD_Show_FloatNumber8X16
        FUNCTION LCD_Show_FloatNumber8X16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 82, STACK
        PUBLIC LCD_Show_IntNumber8X16
        FUNCTION LCD_Show_IntNumber8X16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 48, STACK
        PUBLIC LCD_Show_NChar8X16
        FUNCTION LCD_Show_NChar8X16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC LCD_Show_Picture
        FUNCTION LCD_Show_Picture,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC LCD_Show_String8X16
        FUNCTION LCD_Show_String8X16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC POINT_COLOR
        PUBLIC asc2_1206
        PUBLIC asc2_1608
        PUBLIC asc2_1608c
        PUBLIC hanzi
        PUBLIC hanzi16x16
        PUBLIC hanzi_Idx
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN LCD_SetPos
        FUNCTION LCD_SetPos,0202H
        EXTERN LCD_Write_DATA16
        FUNCTION LCD_Write_DATA16,0202H
        EXTERN vsprintf
        FUNCTION vsprintf,010202H
        EXTERN strlen
        FUNCTION strlen,010202H
        EXTERN __data20_free
        FUNCTION __data20_free,010202H
        EXTERN _CmpLt32f
        FUNCTION _CmpLt32f,0202H
        EXTERN _Add32f
        FUNCTION _Add32f,0202H
        EXTERN _Mul32f
        FUNCTION _Mul32f,0202H
        EXTERN _CmpGe32f
        FUNCTION _CmpGe32f,0202H
        EXTERN _Div32f
        FUNCTION _Div32f,0202H
        EXTERN _Cast32fto32s
        FUNCTION _Cast32fto32s,0202H
        EXTERN _Cast32sto32f
        FUNCTION _Cast32sto32f,0202H
        EXTERN _Cast32fto32u
        FUNCTION _Cast32fto32u,0202H
        EXTERN _Cast32uto32f
        FUNCTION _Cast32uto32f,0202H
        EXTERN _Sub32f
        FUNCTION _Sub32f,0202H


        RSEG DATA20_C:CONST:SORT:NOROOT(1)
`?<Constant {(4.90000009E-1F), (5.00000007E-2F)`:
        DC32 3EFAE148H, 3D4CCCCDH, 3BA3D70AH, 3A03126FH, 3851B717H, 36A7C5ACH
// C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LCD_API\LCD_API.c
//    1 #include "LCD_API.h"
//    2 #include "LCD_FONT.h"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1206[95][12]
asc2_1206:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0
        DC8 0, 0, 20, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 63, 20, 10
        DC8 63, 10, 10, 0, 0, 0, 4, 30, 21, 5, 6, 12, 20, 21, 15, 4, 0, 0, 0
        DC8 18, 21, 13, 10, 20, 44, 42, 18, 0, 0, 0, 0, 4, 10, 10, 30, 21, 21
        DC8 9, 54, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 8, 8, 8
        DC8 8, 8, 8, 16, 32, 0, 0, 2, 4, 8, 8, 8, 8, 8, 8, 4, 2, 0, 0, 0, 0, 4
        DC8 21, 14, 14, 21, 4, 0, 0, 0, 0, 0, 4, 4, 4, 31, 4, 4, 4, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 8, 8, 8, 4, 4, 2, 2
        DC8 2, 1, 0, 0, 0, 14, 17, 17, 17, 17, 17, 17, 14, 0, 0, 0, 0, 4, 6, 4
        DC8 4, 4, 4, 4, 14, 0, 0, 0, 0, 14, 17, 17, 8, 4, 2, 1, 31, 0, 0, 0, 0
        DC8 14, 17, 16, 12, 16, 16, 17, 14, 0, 0, 0, 0, 8, 12, 10, 10, 9, 30, 8
        DC8 24, 0, 0, 0, 0, 31, 1, 1, 15, 16, 16, 17, 14, 0, 0, 0, 0, 14, 9, 1
        DC8 15, 17, 17, 17, 14, 0, 0, 0, 0, 31, 9, 8, 4, 4, 4, 4, 4, 0, 0, 0, 0
        DC8 14, 17, 17, 14, 17, 17, 17, 14, 0, 0, 0, 0, 14, 17, 17, 17, 30, 16
        DC8 18, 14, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4
        DC8 0, 0, 0, 4, 4, 0, 0, 32, 16, 8, 4, 2, 4, 8, 16, 32, 0, 0, 0, 0, 0
        DC8 0, 31, 0, 0, 31, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 16, 8, 4, 2, 0, 0
        DC8 0, 0, 14, 17, 17, 8, 4, 4, 0, 4, 0, 0, 0, 0, 14, 17, 25, 21, 21, 29
        DC8 1, 30, 0, 0, 0, 0, 4, 4, 12, 10, 10, 30, 18, 51, 0, 0, 0, 0, 15, 18
        DC8 18, 14, 18, 18, 18, 15, 0, 0, 0, 0, 30, 17, 1, 1, 1, 1, 17, 14, 0
        DC8 0, 0, 0, 15, 18, 18, 18, 18, 18, 18, 15, 0, 0, 0, 0, 31, 18, 10, 14
        DC8 10, 2, 18, 31, 0, 0, 0, 0, 31, 18, 10, 14, 10, 2, 2, 7, 0, 0, 0, 0
        DC8 28, 18, 1, 1, 57, 17, 18, 12, 0, 0, 0, 0, 51, 18, 18, 30, 18, 18
        DC8 18, 51, 0, 0, 0, 0, 31, 4, 4, 4, 4, 4, 4, 31, 0, 0, 0, 0, 62, 8, 8
        DC8 8, 8, 8, 8, 9, 7, 0, 0, 0, 55, 18, 10, 6, 10, 10, 18, 55, 0, 0, 0
        DC8 0, 7, 2, 2, 2, 2, 2, 34, 63, 0, 0, 0, 0, 27, 27, 27, 27, 21, 21, 21
        DC8 21, 0, 0, 0, 0, 59, 18, 22, 22, 26, 26, 18, 23, 0, 0, 0, 0, 14, 17
        DC8 17, 17, 17, 17, 17, 14, 0, 0, 0, 0, 15, 18, 18, 14, 2, 2, 2, 7, 0
        DC8 0, 0, 0, 14, 17, 17, 17, 17, 23, 25, 14, 24, 0, 0, 0, 15, 18, 18
        DC8 14, 10, 18, 18, 55, 0, 0, 0, 0, 30, 17, 1, 6, 8, 16, 17, 15, 0, 0
        DC8 0, 0, 31, 21, 4, 4, 4, 4, 4, 14, 0, 0, 0, 0, 51, 18, 18, 18, 18, 18
        DC8 18, 12, 0, 0, 0, 0, 51, 18, 18, 10, 10, 12, 4, 4, 0, 0, 0, 0, 21
        DC8 21, 21, 14, 10, 10, 10, 10, 0, 0, 0, 0, 27, 10, 10, 4, 4, 10, 10
        DC8 27, 0, 0, 0, 0, 27, 10, 10, 4, 4, 4, 4, 14, 0, 0, 0, 0, 31, 9, 8, 4
        DC8 4, 2, 18, 31, 0, 0, 0, 28, 4, 4, 4, 4, 4, 4, 4, 4, 28, 0, 0, 2, 2
        DC8 2, 4, 4, 8, 8, 8, 16, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 14, 0, 0
        DC8 4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 63, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 18, 28
        DC8 18, 60, 0, 0, 0, 0, 3, 2, 2, 14, 18, 18, 18, 14, 0, 0, 0, 0, 0, 0
        DC8 0, 28, 18, 2, 2, 28, 0, 0, 0, 0, 24, 16, 16, 28, 18, 18, 18, 60, 0
        DC8 0, 0, 0, 0, 0, 0, 12, 18, 30, 2, 28, 0, 0, 0, 0, 56, 4, 4, 30, 4, 4
        DC8 4, 30, 0, 0, 0, 0, 0, 0, 0, 60, 18, 12, 2, 30, 34, 28, 0, 0, 3, 2
        DC8 2, 14, 18, 18, 18, 55, 0, 0, 0, 0, 4, 0, 0, 6, 4, 4, 4, 14, 0, 0, 0
        DC8 0, 8, 0, 0, 12, 8, 8, 8, 8, 8, 7, 0, 0, 3, 2, 2, 58, 10, 14, 18, 55
        DC8 0, 0, 0, 0, 7, 4, 4, 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 15, 21
        DC8 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 15, 18, 18, 18, 55, 0, 0, 0, 0, 0
        DC8 0, 0, 12, 18, 18, 18, 12, 0, 0, 0, 0, 0, 0, 0, 15, 18, 18, 18, 14
        DC8 2, 7, 0, 0, 0, 0, 0, 28, 18, 18, 18, 28, 16, 56, 0, 0, 0, 0, 0, 27
        DC8 6, 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 30, 2, 12, 16, 30, 0, 0, 0, 0, 0
        DC8 4, 4, 14, 4, 4, 4, 24, 0, 0, 0, 0, 0, 0, 0, 27, 18, 18, 18, 60, 0
        DC8 0, 0, 0, 0, 0, 0, 55, 18, 10, 12, 4, 0, 0, 0, 0, 0, 0, 0, 21, 21
        DC8 14, 10, 10, 0, 0, 0, 0, 0, 0, 0, 27, 10, 4, 10, 27, 0, 0, 0, 0, 0
        DC8 0, 0, 55, 18, 10, 12, 4, 4, 3, 0, 0, 0, 0, 0, 30, 8, 4, 4, 30, 0, 0
        DC8 0, 24, 8, 8, 8, 4, 8, 8, 8, 8, 24, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
        DC8 8, 8, 0, 6, 4, 4, 4, 8, 4, 4, 4, 4, 6, 0, 2, 37, 24, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1608[95][16]
asc2_1608:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8
        DC8 8, 8, 8, 0, 0, 24, 24, 0, 0, 0, 72, 108, 36, 18, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 127, 18, 18, 18, 127, 18, 18
        DC8 18, 0, 0, 0, 0, 8, 28, 42, 42, 10, 12, 24, 40, 40, 42, 42, 28, 8, 8
        DC8 0, 0, 0, 34, 37, 21, 21, 21, 42, 88, 84, 84, 84, 34, 0, 0, 0, 0, 0
        DC8 12, 18, 18, 18, 10, 118, 37, 41, 17, 145, 110, 0, 0, 0, 6, 6, 4, 3
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32, 16, 16, 8, 8, 8, 8, 8
        DC8 8, 16, 16, 32, 64, 0, 0, 2, 4, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8
        DC8 4, 2, 0, 0, 0, 0, 0, 8, 8, 107, 28, 28, 107, 8, 8, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 8, 8, 8, 8, 127, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 6, 6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 128, 64
        DC8 64, 32, 32, 16, 16, 8, 8, 4, 4, 2, 2, 0, 0, 0, 0, 24, 36, 66, 66
        DC8 66, 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 8, 14, 8, 8, 8, 8, 8, 8
        DC8 8, 8, 62, 0, 0, 0, 0, 0, 60, 66, 66, 66, 32, 32, 16, 8, 4, 66, 126
        DC8 0, 0, 0, 0, 0, 60, 66, 66, 32, 24, 32, 64, 64, 66, 34, 28, 0, 0, 0
        DC8 0, 0, 32, 48, 40, 36, 36, 34, 34, 126, 32, 32, 120, 0, 0, 0, 0, 0
        DC8 126, 2, 2, 2, 26, 38, 64, 64, 66, 34, 28, 0, 0, 0, 0, 0, 56, 36, 2
        DC8 2, 26, 38, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 126, 34, 34, 16, 16
        DC8 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 60, 66, 66, 66, 36, 24, 36, 66, 66
        DC8 66, 60, 0, 0, 0, 0, 0, 24, 36, 66, 66, 66, 100, 88, 64, 64, 36, 28
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 8, 4, 0, 0, 0, 64, 32, 16, 8, 4, 2
        DC8 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2, 0, 0, 0, 0
        DC8 0, 60, 66, 66, 70, 64, 32, 16, 16, 0, 24, 24, 0, 0, 0, 0, 0, 28, 34
        DC8 90, 85, 85, 85, 85, 45, 66, 34, 28, 0, 0, 0, 0, 0, 8, 8, 24, 20, 20
        DC8 36, 60, 34, 66, 66, 231, 0, 0, 0, 0, 0, 31, 34, 34, 34, 30, 34, 66
        DC8 66, 66, 34, 31, 0, 0, 0, 0, 0, 124, 66, 66, 1, 1, 1, 1, 1, 66, 34
        DC8 28, 0, 0, 0, 0, 0, 31, 34, 66, 66, 66, 66, 66, 66, 66, 34, 31, 0, 0
        DC8 0, 0, 0, 63, 66, 18, 18, 30, 18, 18, 2, 66, 66, 63, 0, 0, 0, 0, 0
        DC8 63, 66, 18, 18, 30, 18, 18, 2, 2, 2, 7, 0, 0, 0, 0, 0, 60, 34, 34
        DC8 1, 1, 1, 113, 33, 34, 34, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
        DC8 126, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 62, 8, 8, 8, 8, 8, 8, 8, 8
        DC8 8, 62, 0, 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 17, 15, 0, 0, 0, 119, 34, 18, 10, 14, 10, 18, 18, 34, 34, 119, 0, 0
        DC8 0, 0, 0, 7, 2, 2, 2, 2, 2, 2, 2, 2, 66, 127, 0, 0, 0, 0, 0, 119, 54
        DC8 54, 54, 54, 42, 42, 42, 42, 42, 107, 0, 0, 0, 0, 0, 227, 70, 70, 74
        DC8 74, 82, 82, 82, 98, 98, 71, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65
        DC8 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 63, 66, 66, 66, 66, 62, 2, 2, 2
        DC8 2, 7, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65, 65, 77, 83, 50, 28, 96
        DC8 0, 0, 0, 0, 63, 66, 66, 66, 62, 18, 18, 34, 34, 66, 199, 0, 0, 0, 0
        DC8 0, 124, 66, 66, 2, 4, 24, 32, 64, 66, 66, 62, 0, 0, 0, 0, 0, 127
        DC8 73, 8, 8, 8, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
        DC8 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 231, 66, 66, 34, 36, 36, 20
        DC8 20, 24, 8, 8, 0, 0, 0, 0, 0, 107, 73, 73, 73, 73, 85, 85, 54, 34
        DC8 34, 34, 0, 0, 0, 0, 0, 231, 66, 36, 36, 24, 24, 24, 36, 36, 66, 231
        DC8 0, 0, 0, 0, 0, 119, 34, 34, 20, 20, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0
        DC8 0, 126, 33, 32, 16, 16, 8, 4, 4, 66, 66, 63, 0, 0, 0, 120, 8, 8, 8
        DC8 8, 8, 8, 8, 8, 8, 8, 8, 8, 120, 0, 0, 0, 2, 2, 4, 4, 8, 8, 8, 16
        DC8 16, 32, 32, 32, 64, 64, 0, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 16, 16, 16, 30, 0, 0, 56, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 6, 8, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 120, 68
        DC8 66, 66, 252, 0, 0, 0, 0, 0, 3, 2, 2, 2, 26, 38, 66, 66, 66, 38, 26
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 68, 2, 2, 2, 68, 56, 0, 0, 0, 0, 0
        DC8 96, 64, 64, 64, 120, 68, 66, 66, 66, 100, 216, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 60, 66, 126, 2, 2, 66, 60, 0, 0, 0, 0, 0, 240, 136, 8, 8, 126
        DC8 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 34, 34, 28, 2
        DC8 60, 66, 66, 60, 0, 0, 0, 3, 2, 2, 2, 58, 70, 66, 66, 66, 66, 231, 0
        DC8 0, 0, 0, 0, 12, 12, 0, 0, 14, 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 48
        DC8 48, 0, 0, 56, 32, 32, 32, 32, 32, 32, 34, 30, 0, 0, 0, 3, 2, 2, 2
        DC8 114, 18, 10, 22, 18, 34, 119, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8
        DC8 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 146, 146, 146, 146
        DC8 146, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 70, 66, 66, 66, 66, 231, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 27, 38, 66, 66, 66, 34, 30, 2, 7, 0, 0, 0, 0, 0, 0, 0
        DC8 120, 68, 66, 66, 66, 68, 120, 64, 224, 0, 0, 0, 0, 0, 0, 0, 119, 76
        DC8 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 66, 2, 60, 64, 66
        DC8 62, 0, 0, 0, 0, 0, 0, 0, 8, 8, 62, 8, 8, 8, 8, 8, 48, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 99, 66, 66, 66, 66, 98, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 231, 66, 36, 36, 20, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 73, 73
        DC8 85, 85, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 36, 24, 24, 24, 36
        DC8 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 36, 36, 20, 24, 8, 8, 7, 0
        DC8 0, 0, 0, 0, 0, 0, 126, 34, 16, 8, 8, 68, 126, 0, 0, 0, 192, 32, 32
        DC8 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 192, 0, 16, 16, 16, 16, 16
        DC8 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 6, 8, 8, 8, 8, 8, 16
        DC8 8, 8, 8, 8, 8, 8, 6, 0, 12, 50, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1608c[95][16]
asc2_1608c:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3
        DC8 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 27, 27, 27, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 152, 152, 255, 204, 102, 255, 51, 51, 0, 0
        DC8 0, 0, 0, 0, 0, 12, 126, 13, 13, 13, 127, 204, 204, 63, 12, 12, 0, 0
        DC8 0, 0, 0, 0, 103, 45, 55, 24, 24, 236, 182, 230, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 28, 54, 62, 206, 251, 113, 113, 223, 0, 0, 0, 0, 0, 0, 0, 6, 6
        DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 14, 6, 3, 3, 3, 3, 3
        DC8 3, 6, 6, 12, 0, 0, 0, 0, 1, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 1, 0, 0
        DC8 0, 0, 6, 63, 15, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12
        DC8 12, 63, 63, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 6, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 48, 24, 24
        DC8 12, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 62, 98, 99, 99, 99, 99, 34
        DC8 62, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 15, 12, 12, 12, 12, 63, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 62, 99, 96, 56, 30, 7, 3, 127, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 62, 99, 96, 48, 104, 96, 99, 62, 0, 0, 0, 0, 0, 0, 0, 0, 48, 56
        DC8 52, 50, 49, 255, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 63, 99
        DC8 96, 115, 30, 0, 0, 0, 0, 0, 0, 0, 0, 28, 14, 6, 63, 99, 99, 99, 62
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 96, 48, 24, 24, 12, 14, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 63, 99, 99, 98, 127, 99, 99, 62, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 62, 115, 99, 99, 126, 48, 24, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6
        DC8 6, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 6, 7, 3
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 48, 24, 14, 28, 48, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 28
        DC8 56, 28, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 49, 48, 28, 6, 0, 6, 6, 0
        DC8 0, 0, 0, 0, 0, 0, 252, 134, 51, 57, 77, 109, 249, 3, 134, 252, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 96, 112, 216, 220, 254, 135, 131, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 31, 115, 99, 99, 127, 195, 227, 127, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 124, 102, 3, 3, 1, 1, 97, 62, 0, 0, 0, 0, 0, 0, 0, 0, 15, 59, 99
        DC8 195, 195, 195, 99, 63, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 127, 3, 3
        DC8 3, 126, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 127, 3, 3, 3, 3, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 60, 102, 3, 1, 249, 225, 113, 31, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 131, 131, 131, 255, 131, 131, 131, 131, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 63, 12, 12, 12, 12, 12, 12, 63, 0, 0, 0, 0, 0, 0, 0, 0, 254, 48
        DC8 48, 48, 48, 48, 51, 51, 28, 0, 0, 0, 0, 0, 0, 0, 195, 99, 59, 31
        DC8 15, 31, 115, 227, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 127
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 198, 198, 231, 239, 191, 189, 57, 25, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 131, 135, 143, 159, 187, 243, 227, 131, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 252, 135, 3, 1, 1, 1, 131, 124, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 15, 25, 25, 25, 15, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 252, 6, 3
        DC8 1, 1, 49, 247, 252, 0, 0, 0, 0, 0, 0, 0, 0, 31, 51, 99, 115, 31, 59
        DC8 99, 195, 0, 0, 0, 0, 0, 0, 0, 0, 124, 7, 3, 126, 192, 192, 225, 63
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 195, 195, 195, 195, 195, 99, 102, 60, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 195, 99, 102, 54, 52, 20, 28, 8, 0, 0, 0, 0, 0, 0, 0, 0, 97
        DC8 99, 115, 247, 222, 222, 140, 140, 0, 0, 0, 0, 0, 0, 0, 0, 129, 199
        DC8 110, 56, 60, 110, 199, 129, 0, 0, 0, 0, 0, 0, 0, 0, 193, 227, 102
        DC8 60, 56, 24, 28, 12, 0, 0, 0, 0, 0, 0, 0, 0, 255, 112, 56, 28, 14, 7
        DC8 3, 255, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15
        DC8 0, 0, 0, 0, 0, 3, 3, 6, 12, 12, 24, 24, 48, 48, 0, 0, 0, 0, 0, 0, 7
        DC8 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 24, 60, 102, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0
        DC8 0, 0, 0, 0, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 30, 51, 49, 49, 49, 63, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 31, 51, 51
        DC8 51, 51, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 3, 1, 1, 1, 31, 0, 0
        DC8 0, 0, 0, 0, 0, 48, 48, 48, 63, 49, 49, 49, 49, 63, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 62, 57, 7, 1, 3, 63, 0, 0, 0, 0, 0, 0, 0, 60, 6, 6, 63
        DC8 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 25, 25, 25, 29, 31
        DC8 24, 28, 15, 0, 0, 0, 0, 3, 3, 3, 63, 55, 51, 51, 51, 51, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0
        DC8 12, 12, 12, 12, 12, 12, 12, 13, 7, 0, 0, 0, 0, 1, 1, 1, 49, 29, 15
        DC8 31, 57, 49, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 253, 155, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 15, 27, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 15, 25, 25, 25, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 25, 25, 25
        DC8 25, 15, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 31, 27, 25, 25, 25, 31, 24
        DC8 24, 24, 0, 0, 0, 0, 0, 0, 0, 31, 27, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 31, 1, 7, 30, 24, 15, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 31
        DC8 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 31
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 59, 27, 15, 14, 6, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 153, 153, 221, 247, 119, 51, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 51, 59, 14, 14, 27, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 115
        DC8 55, 62, 28, 12, 12, 6, 6, 0, 0, 0, 0, 0, 0, 0, 63, 56, 28, 14, 7
        DC8 63, 0, 0, 0, 0, 0, 0, 0, 12, 14, 6, 3, 3, 3, 3, 3, 3, 6, 6, 12, 0
        DC8 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 1, 3, 3, 6
        DC8 6, 6, 6, 6, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 103, 109, 57, 0, 0, 0
        DC8 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const hanzi_Idx[41]
hanzi_Idx:
        DC8 "\261\261\276\251\301\372\307\361\307\360\326\307\304\334\277\306\274\274\314\324\261\246\265\352\322\272\276\247\265\245\306\254\273\372\326\307\304\334\263\265"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const hanzi[480]
hanzi:
        DC8 0, 0, 0, 0, 8, 128, 8, 128, 8, 140, 248, 240, 8, 128, 8, 128, 56
        DC8 132, 200, 132, 8, 248, 0, 0, 0, 0, 0, 0, 3, 0, 255, 252, 63, 240
        DC8 32, 16, 32, 16, 63, 240, 25, 96, 49, 24, 199, 12, 0, 0, 0, 0, 0, 0
        DC8 4, 96, 4, 48, 127, 252, 4, 136, 4, 144, 8, 224, 9, 132, 54, 132, 96
        DC8 248, 0, 0, 0, 0, 14, 0, 120, 248, 64, 136, 64, 144, 126, 160, 72
        DC8 144, 72, 136, 72, 136, 74, 240, 244, 128, 0, 128, 0, 0, 0, 0, 0
        DC8 120, 31, 128, 16, 0, 16, 0, 31, 248, 16, 64, 16, 64, 16, 64, 127
        DC8 252, 0, 0, 0, 0, 32, 0, 126, 248, 144, 136, 254, 136, 56, 248, 198
        DC8 0, 63, 240, 63, 240, 32, 16, 63, 240, 0, 0, 0, 0, 0, 0, 48, 140, 70
        DC8 244, 255, 132, 126, 248, 66, 132, 126, 152, 126, 228, 66, 132, 78
        DC8 252, 0, 0, 0, 0, 0, 0, 0, 16, 125, 144, 16, 208, 127, 16, 25, 144
        DC8 55, 252, 80, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 32, 64, 255, 252
        DC8 32, 64, 39, 248, 50, 8, 225, 16, 32, 224, 33, 224, 238, 28, 0, 0, 0
        DC8 0, 0, 0, 98, 0, 55, 248, 106, 8, 55, 232, 15, 248, 36, 168, 36, 168
        DC8 71, 232, 64, 120, 0, 0, 0, 0, 0, 0, 3, 0, 127, 248, 64, 8, 127, 248
        DC8 2, 0, 63, 240, 2, 96, 2, 16, 127, 248, 0, 0, 0, 0, 0, 0, 1, 128, 63
        DC8 248, 33, 0, 33, 248, 33, 0, 47, 240, 40, 16, 104, 16, 79, 240, 0, 0
        DC8 0, 0, 0, 0, 96, 192, 63, 252, 98, 64, 52, 248, 13, 72, 54, 176, 36
        DC8 96, 68, 224, 71, 28, 0, 0, 0, 0, 0, 0, 63, 240, 32, 16, 63, 240, 63
        DC8 240, 124, 248, 68, 136, 124, 248, 68, 136, 124, 248, 68, 136, 0, 0
        DC8 16, 32, 8, 192, 63, 240, 34, 16, 63, 240, 34, 16, 63, 240, 2, 0
        DC8 127, 248, 2, 0, 2, 0, 0, 0, 0, 0, 16, 64, 16, 64, 16, 64, 31, 252
        DC8 16, 0, 31, 224, 16, 32, 32, 32, 96, 32, 0, 0, 0, 0, 32, 0, 35, 224
        DC8 250, 32, 34, 32, 114, 32, 106, 32, 162, 32, 162, 36, 36, 36, 40, 56
        DC8 0, 0, 0, 0, 32, 0, 126, 248, 144, 136, 254, 136, 56, 248, 198, 0
        DC8 63, 240, 63, 240, 32, 16, 63, 240, 0, 0, 0, 0, 0, 0, 48, 140, 70
        DC8 244, 255, 132, 126, 248, 66, 132, 126, 152, 126, 228, 66, 132, 78
        DC8 252, 0, 0, 0, 0, 4, 0, 8, 0, 127, 248, 17, 0, 49, 0, 63, 240, 1, 0
        DC8 1, 0, 255, 252, 1, 0, 1, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const hanzi16x16[640]
hanzi16x16:
        DC8 4, 64, 4, 64, 4, 64, 4, 68, 4, 72, 124, 80, 4, 96, 4, 64, 4, 64, 4
        DC8 64, 4, 64, 4, 66, 28, 66, 228, 66, 68, 62, 4, 0, 2, 0, 1, 0, 255
        DC8 254, 0, 0, 0, 0, 31, 240, 16, 16, 16, 16, 16, 16, 31, 240, 1, 0, 17
        DC8 16, 17, 8, 33, 4, 69, 4, 2, 0, 4, 32, 4, 16, 4, 16, 4, 0, 255, 254
        DC8 4, 128, 4, 136, 4, 136, 4, 144, 8, 160, 8, 192, 16, 130, 17, 130
        DC8 34, 130, 68, 126, 128, 0, 0, 0, 3, 62, 60, 34, 32, 36, 32, 36, 32
        DC8 40, 63, 164, 34, 36, 34, 34, 34, 34, 34, 34, 34, 52, 39, 168, 248
        DC8 32, 64, 32, 0, 32, 0, 16, 0, 120, 31, 128, 16, 0, 16, 0, 16, 0, 16
        DC8 0, 31, 252, 16, 64, 16, 64, 16, 64, 16, 64, 16, 64, 16, 64, 255
        DC8 254, 0, 0, 32, 0, 62, 124, 72, 68, 8, 68, 255, 68, 20, 68, 34, 124
        DC8 64, 0, 31, 240, 16, 16, 16, 16, 31, 240, 16, 16, 16, 16, 31, 240
        DC8 16, 16, 16, 64, 36, 68, 66, 72, 255, 112, 1, 64, 0, 66, 126, 66, 66
        DC8 62, 66, 0, 126, 68, 66, 72, 66, 112, 126, 64, 66, 66, 74, 66, 68
        DC8 62, 8, 16, 29, 16, 240, 144, 16, 144, 16, 16, 253, 16, 16, 144, 56
        DC8 144, 52, 16, 80, 30, 83, 240, 144, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 16, 16, 32, 16, 32, 16, 32, 19, 254, 252, 32, 16, 32, 16, 32, 21
        DC8 252, 24, 132, 48, 136, 208, 72, 16, 80, 16, 32, 16, 80, 81, 136, 38
        DC8 6, 1, 0, 33, 0, 17, 252, 18, 4, 133, 4, 65, 228, 66, 132, 16, 132
        DC8 23, 244, 32, 132, 226, 164, 34, 164, 35, 228, 32, 4, 32, 40, 0, 16
        DC8 2, 0, 1, 0, 127, 254, 64, 2, 128, 4, 0, 0, 127, 252, 1, 0, 1, 0, 1
        DC8 0, 63, 248, 1, 0, 1, 32, 1, 16, 255, 254, 0, 0, 1, 0, 0, 128, 63
        DC8 254, 32, 128, 32, 128, 32, 128, 32, 252, 32, 128, 32, 128, 39, 248
        DC8 36, 8, 36, 8, 68, 8, 68, 8, 135, 248, 4, 8, 0, 128, 32, 64, 23, 254
        DC8 17, 32, 129, 32, 66, 60, 66, 68, 22, 100, 18, 148, 35, 72, 226, 72
        DC8 34, 48, 34, 32, 34, 80, 34, 136, 3, 6, 15, 224, 8, 32, 8, 32, 15
        DC8 224, 8, 32, 8, 32, 15, 224, 0, 0, 126, 252, 66, 132, 66, 132, 126
        DC8 252, 66, 132, 66, 132, 126, 252, 66, 132, 16, 16, 8, 32, 4, 64, 63
        DC8 248, 33, 8, 33, 8, 63, 248, 33, 8, 33, 8, 63, 248, 1, 0, 1, 0, 255
        DC8 254, 1, 0, 1, 0, 1, 0, 0, 64, 16, 64, 16, 64, 16, 64, 16, 64, 31
        DC8 252, 16, 0, 16, 0, 16, 0, 31, 224, 16, 32, 16, 32, 16, 32, 32, 32
        DC8 32, 32, 64, 32, 16, 0, 17, 240, 17, 16, 17, 16, 253, 16, 17, 16, 49
        DC8 16, 57, 16, 85, 16, 85, 16, 145, 16, 17, 18, 17, 18, 18, 18, 18, 14
        DC8 20, 0, 32, 0, 62, 124, 72, 68, 8, 68, 255, 68, 20, 68, 34, 124, 64
        DC8 0, 31, 240, 16, 16, 16, 16, 31, 240, 16, 16, 16, 16, 31, 240, 16
        DC8 16, 16, 64, 36, 68, 66, 72, 255, 112, 1, 64, 0, 66, 126, 66, 66, 62
        DC8 66, 0, 126, 68, 66, 72, 66, 112, 126, 64, 66, 66, 74, 66, 68, 62, 2
        DC8 0, 2, 0, 2, 0, 127, 252, 4, 0, 9, 0, 17, 0, 33, 0, 63, 248, 1, 0, 1
        DC8 0, 255, 254, 1, 0, 1, 0, 1, 0, 1, 0
//    3 #include <stdarg.h>
//    4 #include <string.h>
//    5 #include <stdio.h>
//    6 #include <stdlib.h>
//    7 //±³¾°É«£¬»­±ÊÉ«

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//    8 uint16_t POINT_COLOR=RED,BACK_COLOR=WHITE; 
POINT_COLOR:
        DS8 2
        REQUIRE `?<Initializer for POINT_COLOR>`

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
BACK_COLOR:
        DS8 2
        REQUIRE `?<Initializer for BACK_COLOR>`
//    9 /*************************************************************************
//   10 *  º¯ÊýÃû³Æ£º
//   11 *  ¹¦ÄÜËµÃ÷£º²¿·ÖÇøÓòÓÃÒ»ÖÖÑÕÉ«Ìî³ä
//   12 *  ²ÎÊýËµÃ÷£º
//   13 *  º¯Êý·µ»Ø£º
//   14 *  Ê¹ÓÃÊ¾Àý£º
//   15 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   16 void LCD_Draw_Part(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_Draw_Part:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function LCD_Draw_Part
//   17 {
        FUNCALL LCD_Draw_Part, LCD_SetPos
        LOCFRAME CSTACK, 20, STACK
        FUNCALL LCD_Draw_Part, LCD_Write_DATA16
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R14, R10
        MOV.W   R15, R11
//   18   uint16_t i,j;
//   19   LCD_PTLON(xs,ys,xe,ye);
        CALLA   #LCD_SetPos
//   20   for(j=0;j<(ye-ys+1);j++)
        SUB.W   R9, R11
        ADD.W   #0x1, R11
        JEQ     ??LCD_Draw_Part_2
        SUB.W   R8, R10
        ADD.W   #0x1, R10
        MOV.W   0x14(SP), R8
//   21   {
//   22     for(i=0;i<(xe-xs+1);i++)
??LCD_Draw_Part_1:
        CMP.W   #0x0, R10
        JEQ     ??LCD_Draw_Part_3
        MOV.W   R10, R9
//   23     {
//   24       LCD_WR_WORD(color_dat);
??LCD_Draw_Part_0:
        MOV.W   R8, R12
        CALLA   #LCD_Write_DATA16
//   25     }
        ADD.W   #0xffff, R9
        JNE     ??LCD_Draw_Part_0
//   26   }  
??LCD_Draw_Part_3:
        ADD.W   #0xffff, R11
        JNE     ??LCD_Draw_Part_1
//   27 }
??LCD_Draw_Part_2:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   28 /*************************************************************************
//   29 *  º¯ÊýÃû³Æ£º
//   30 *  ¹¦ÄÜËµÃ÷£ºÈ«ÆÁÓÃÒ»ÖÖÑÕÉ«Ìî³ä
//   31 *  ²ÎÊýËµÃ÷£º
//   32 *  º¯Êý·µ»Ø£º
//   33 *  Ê¹ÓÃÊ¾Àý£º
//   34 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   35 void LCD_Display_Full(uint16_t color)
LCD_Display_Full:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function LCD_Display_Full
//   36 {
        FUNCALL LCD_Display_Full, LCD_SetPos
        LOCFRAME CSTACK, 20, STACK
        FUNCALL LCD_Display_Full, LCD_Write_DATA16
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R10
//   37   unsigned int i,j;	
//   38   LCD_PTLON(0,0,LCD_W,LCD_H);
        MOV.W   #0x140, R15
        MOV.W   #0xf0, R14
        MOV.W   #0x0, R13
        MOV.W   #0x0, R12
        CALLA   #LCD_SetPos
//   39   for(i=0;i<=LCD_H;i++)
        MOV.W   #0x141, R11
//   40   {
//   41     for(j=0;j<=LCD_W;j++)
??LCD_Display_Full_1:
        MOV.B   #0xf1, R8
//   42     {
//   43        LCD_WR_WORD(color);
??LCD_Display_Full_0:
        MOV.W   R10, R12
        CALLA   #LCD_Write_DATA16
//   44     }
        ADD.B   #0xff, R8
        JNE     ??LCD_Display_Full_0
//   45   }
        ADD.W   #0xffff, R11
        JNE     ??LCD_Display_Full_1
//   46 }
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   47 /*************************************************************************
//   48 *  º¯ÊýÃû³Æ£º
//   49 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
//   50 *  ²ÎÊýËµÃ÷£º
//   51 *  º¯Êý·µ»Ø£º
//   52 *  Ê¹ÓÃÊ¾Àý£º
//   53 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   54 void LCD_Show_Char8X16(uint16_t x, uint16_t y, char c_dat,uint16_t word_color,uint16_t back_color)
LCD_Show_Char8X16:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function LCD_Show_Char8X16
//   55 { 
        FUNCALL LCD_Show_Char8X16, LCD_SetPos
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Show_Char8X16, LCD_Write_DATA16
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Show_Char8X16, LCD_Write_DATA16
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.B   R14, R10
        MOV.W   R15, R11
//   56   if(c_dat<' '||c_dat>'~')return;
        ADD.B   #0xe0, R10
        CMP.B   #0x5f, R10
        JC      ??LCD_Show_Char8X16_2
//   57   uint16_t i,j;
//   58   char temp;
//   59   c_dat=c_dat-' ';
//   60   LCD_PTLON(x,y,x+7,y+15);			//¶¨Î»×Ö·ûÏÔÊ¾ÇøÓò
        MOV.W   R13, R15
        ADD.W   #0xf, R15
        MOV.W   R12, R14
        ADD.W   #0x7, R14
        CALLA   #LCD_SetPos
//   61   for(j=0; j<16; j++)
        RLAM.A  #0x4, R10
        ADDA    #asc2_1608, R10
        MOVA    R10, R8
        ADDA    #0x10, R8
        MOV.W   0x1c(SP), R9
//   62   {
//   63     temp=asc2_1608[c_dat][j];
??LCD_Show_Char8X16_1:
        MOV.B   @R10, R6
//   64     for(i=0; i<8; i++)
        MOV.B   #0x0, R7
//   65     {
//   66       if((temp) & (0x01<<i))
??LCD_Show_Char8X16_0:
        MOV.W   #0x1, R14
        SUB.B   #0x1, R7
        JN      ??LCD_Show_Char8X16_3
        RPT     R7
        RLAX.W  R14
??LCD_Show_Char8X16_3:
        ADD.B   #0x1, R7
        BIT.B   R14, R6
        JEQ     ??LCD_Show_Char8X16_4
//   67       { 
//   68         LCD_WR_WORD(word_color);
        MOV.W   R11, R12
        JMP     ??LCD_Show_Char8X16_5
//   69       }
//   70       else
//   71       {
//   72         LCD_WR_WORD(back_color);
??LCD_Show_Char8X16_4:
        MOV.W   R9, R12
??LCD_Show_Char8X16_5:
        CALLA   #LCD_Write_DATA16
//   73       }
//   74     }
        ADD.W   #0x1, R7
        CMP.W   #0x8, R7
        JNC     ??LCD_Show_Char8X16_0
//   75   }
        ADDA    #0x1, R10
        CMPA    R8, R10
        JNE     ??LCD_Show_Char8X16_1
??LCD_Show_Char8X16_2:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   76 }
//   77 /*************************************************************************
//   78 *  º¯ÊýÃû³Æ£º
//   79 *  ¹¦ÄÜËµÃ÷£º
//   80 *  ²ÎÊýËµÃ÷£º
//   81 *  º¯Êý·µ»Ø£º
//   82 *  Ê¹ÓÃÊ¾Àý£º
//   83 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   84 void LCD_Show_NChar8X16(uint16_t x, uint16_t y, char *s_dat,int num,uint16_t word_color,uint16_t back_color)
LCD_Show_NChar8X16:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function LCD_Show_NChar8X16
//   85 {
        FUNCALL LCD_Show_NChar8X16, LCD_Show_Char8X16
        LOCFRAME CSTACK, 30, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R7
        MOV.W   R15, R8
        MOV.W   0x1c(SP), R6
        MOV.W   0x1e(SP), R9
        JMP     ??LCD_Show_NChar8X16_1
//   86   while(num--)
??LCD_Show_NChar8X16_0:
        ADD.W   #0xffff, R8
//   87   {
//   88     LCD_Show_Char8X16( x, y,*s_dat++, word_color, back_color);
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R6, R15
        MOV.B   @R7+, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_Show_Char8X16
//   89     x+=8;
        ADD.W   #0x8, R10
//   90     if(x>LCD_W-8)
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CALLA   #?Subroutine8
//   91     {
//   92        x=0;
//   93        y+=16;
//   94     }
//   95   }
??LCD_Show_NChar8X16_1:
        CMP.W   #0x0, R8
        JNE     ??LCD_Show_NChar8X16_0
//   96 }
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine8:
          CFI Block cfiCond4 Using cfiCommon0
          CFI Function LCD_Show_NChar8X16
          CFI Conditional ??LCD_Show_NChar8X16_1
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function LCD_Show_String8X16
          CFI (cfiCond5) Conditional ??LCD_Show_String8X16_1
          CFI (cfiCond5) R6L Frame(CFA, -28)
          CFI (cfiCond5) R6H Frame(CFA, -26)
          CFI (cfiCond5) R7L Frame(CFA, -24)
          CFI (cfiCond5) R7H Frame(CFA, -22)
          CFI (cfiCond5) R8L Frame(CFA, -20)
          CFI (cfiCond5) R8H Frame(CFA, -18)
          CFI (cfiCond5) R9L Frame(CFA, -16)
          CFI (cfiCond5) R9H Frame(CFA, -14)
          CFI (cfiCond5) R10L Frame(CFA, -12)
          CFI (cfiCond5) R10H Frame(CFA, -10)
          CFI (cfiCond5) R11L Frame(CFA, -8)
          CFI (cfiCond5) R11H Frame(CFA, -6)
          CFI (cfiCond5) CFA SP+32
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        CMP.W   #0xe9, R10
        JNC     ??LCD_Show_NChar8X16_2
        MOV.W   #0x0, R10
        ADD.W   #0x10, R11
??LCD_Show_NChar8X16_2:
        RETA
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6
//   97 /*************************************************************************
//   98 *  º¯ÊýÃû³Æ£º
//   99 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û´®
//  100 *  ²ÎÊýËµÃ÷£º
//  101 *  º¯Êý·µ»Ø£º
//  102 *  Ê¹ÓÃÊ¾Àý£º
//  103 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  104 void LCD_Show_String8X16(uint16_t x, uint16_t y, char *s_dat,uint16_t word_color,uint16_t back_color)
LCD_Show_String8X16:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function LCD_Show_String8X16
//  105 {
        FUNCALL LCD_Show_String8X16, LCD_Show_Char8X16
        LOCFRAME CSTACK, 30, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R8
        MOV.W   R15, R6
        MOV.W   0x1c(SP), R9
        JMP     ??LCD_Show_String8X16_1
//  106   while(*s_dat!='\0') 
//  107   {
//  108     LCD_Show_Char8X16(x, y, *s_dat++,word_color,back_color);
??LCD_Show_String8X16_0:
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R6, R15
        MOV.B   @R8+, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_Show_Char8X16
//  109     x+=8;
        ADD.W   #0x8, R10
//  110     if(x>LCD_W-8)
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CALLA   #?Subroutine8
//  111     {
//  112        x=0;
//  113        y+=16;
//  114     }
//  115   }
??LCD_Show_String8X16_1:
        CMP.B   #0x0, 0(R8)
        JNE     ??LCD_Show_String8X16_0
//  116 }
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock7
//  117 /*************************************************************************
//  118 *  º¯ÊýÃû³Æ£º
//  119 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öÕûÊý
//  120 *  ²ÎÊýËµÃ÷£º
//  121 *  º¯Êý·µ»Ø£º
//  122 *  Ê¹ÓÃÊ¾Àý£º
//  123 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  124 void LCD_Show_IntNumber8X16(uint16_t x,uint16_t y,int number,uint16_t word_color,uint16_t back_color)
LCD_Show_IntNumber8X16:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function LCD_Show_IntNumber8X16
//  125 { 
        FUNCALL LCD_Show_IntNumber8X16, LCD_Show_String8X16
        LOCFRAME CSTACK, 48, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R12
          CFI CFA SP+38
        SUB.W   #0x8, SP
          CFI CFA SP+46
        MOV.W   R13, R10
        MOV.W   R14, R7
        MOV.W   R15, R11
        MOV.W   0x2e(SP), R8
//  126   char str[7],j,k=0,i;
        MOV.B   #0x0, R9
//  127   unsigned int c=10000;
        MOV.W   #0x2710, R6
//  128   if(number<0)
        CMP.W   #0x0, R14
        JGE     ??LCD_Show_IntNumber8X16_1
//  129     {str[0]='-';number=-number;}
        MOV.B   #0x2d, 0(SP)
        XOR.W   #0xffff, R7
        ADD.W   #0x1, R7
        JMP     ??LCD_Show_IntNumber8X16_2
//  130   else str[0]=' ';
??LCD_Show_IntNumber8X16_1:
        MOV.B   #0x20, 0(SP)
//  131   for( i=1;i<=5;i++)
??LCD_Show_IntNumber8X16_2:
        MOV.B   #0x1, R4
        MOV.W   SP, R5
        ADD.W   #0x1, R5
//  132   {
//  133     j=number/c%10;
??LCD_Show_IntNumber8X16_0:
        MOV.W   R7, R12
        MOV.W   R6, R14
        CALLA   #?DivMod16u
        MOV.W   #0xa, R14
        CALLA   #?DivMod16u
//  134     if(j==0&&k==0&&i<5)
        CMP.B   #0x0, R14
        JNE     ??LCD_Show_IntNumber8X16_3
        BIT.B   #0x1, R9
        JC      ??LCD_Show_IntNumber8X16_3
        CMP.B   #0x5, R4
        JC      ??LCD_Show_IntNumber8X16_3
//  135     {
//  136       str[i]=' ';
        MOV.B   #0x20, R14
        JMP     ??LCD_Show_IntNumber8X16_4
//  137     }
//  138     else
//  139     {
//  140       k=1;
??LCD_Show_IntNumber8X16_3:
        MOV.B   #0x1, R9
//  141       str[i]=j+'0';
        ADD.B   #0x30, R14
??LCD_Show_IntNumber8X16_4:
        MOV.B   R14, 0(R5)
//  142     }
//  143     c/=10;
        MOV.W   R6, R12
        MOV.W   #0xa, R14
        CALLA   #?DivMod16u
        MOV.W   R12, R6
//  144   }
        ADD.B   #0x1, R4
        ADD.W   #0x1, R5
        CMP.B   #0x6, R4
        JNC     ??LCD_Show_IntNumber8X16_0
//  145   str[6]='\0';
        MOV.B   #0x0, 0x6(SP)
//  146   LCD_Show_String8X16(x,y,str,word_color,back_color);
        PUSH.W  R8
          CFI CFA SP+48
        MOV.W   R11, R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   R10, R13
        MOV.W   0xa(SP), R12
        CALLA   #LCD_Show_String8X16
//  147 }
        ADD.W   #0xc, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8
//  148 /*************************************************************************
//  149 *  º¯ÊýÃû³Æ£º
//  150 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö¸¡µãÊý£¬×¢ÒâÈôÊÇÖ®Ç°ÏÔÊ¾µÄ¸¡µãÊýÎ»Êý¶àÓàµ±Ç°µÄ£¬Ôò¿ÉÄÜ»á±£ÁôÉÏÒ»´ÎµÄÏÔÊ¾
//  151 *  ²ÎÊýËµÃ÷£º
//  152 *  º¯Êý·µ»Ø£º
//  153 *  Ê¹ÓÃÊ¾Àý£º
//  154 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  155 void LCD_Show_FloatNumber8X16(uint16_t x,uint16_t y,float number,int decimals,uint16_t word_color,uint16_t back_color)
LCD_Show_FloatNumber8X16:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function LCD_Show_FloatNumber8X16
//  156 {
        FUNCALL LCD_Show_FloatNumber8X16, _CmpLt32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Add32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Mul32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _CmpGe32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Div32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Add32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Cast32fto32s
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Cast32sto32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Div32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Cast32fto32u
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Cast32uto32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Mul32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Sub32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, LCD_Show_String8X16
        LOCFRAME CSTACK, 82, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Mul32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Cast32fto32u
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Cast32uto32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, _Sub32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_Show_FloatNumber8X16, LCD_Show_String8X16
        LOCFRAME CSTACK, 82, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R12
          CFI CFA SP+38
        PUSH.W  R13
          CFI CFA SP+40
        SUB.W   #0x28, SP
          CFI CFA SP+80
        MOV.W   R14, R10
        MOV.W   R15, R11
//  157   const float _fround[6]={0.49,0.05,0.005,0.0005,0.00005,0.000005};
        MOV.W   SP, R12
        ADD.W   #0x10, R12
        MOVA    #`?<Constant {(4.90000009E-1F), (5.00000007E-2F)`, R14
        MOVA    #0xc, R13
        CALLA   #?CopyMemoryWords20
        MOV.W   SP, R5
        ADD.W   #0x0, R5
        MOVA    R5, R8
//  158   char Str[15];
//  159   char * str=Str;
//  160   float scale;
//  161   unsigned char i,d;
//  162   if (number<0.0) {number=-number; *str++='-';};
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??LCD_Show_FloatNumber8X16_5
        XOR.W   #0x8000, R11
        MOV.B   #0x2d, 0(R5)
        ADDA    #0x1, R8
??LCD_Show_FloatNumber8X16_5:
        MOV.W   0x50(SP), R9
//  163   if (decimals>5) decimals=5;
        CMP.W   #0x6, R9
        JL      ??LCD_Show_FloatNumber8X16_6
        MOV.W   #0x5, R9
//  164   number=number+_fround[decimals];
??LCD_Show_FloatNumber8X16_6:
        MOV.W   R9, R15
        RLAM.W  #0x2, R15
        ADD.W   SP, R15
        MOV.W   0x10(R15), R14
        MOV.W   0x12(R15), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  165   i=0;
        MOV.B   #0x0, R4
//  166   scale=1.0;
        MOV.W   #0x0, R6
        MOV.W   #0x3f80, R7
        JMP     ??LCD_Show_FloatNumber8X16_7
//  167   while (number>=scale) {scale=scale*10.0; ++i;};
??LCD_Show_FloatNumber8X16_0:
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        ADD.B   #0x1, R4
??LCD_Show_FloatNumber8X16_7:
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JNE     ??LCD_Show_FloatNumber8X16_0
//  168   if (i==0) *str++='0';
        CMP.B   #0x0, R4
        JNE     ??LCD_Show_FloatNumber8X16_1
        MOV.B   #0x30, 0(R8)
        ADDA    #0x1, R8
        JMP     ??LCD_Show_FloatNumber8X16_8
??LCD_Show_FloatNumber8X16_1:
        ADD.B   #0xff, R4
//  169   else
//  170     while (i--)
//  171     {
//  172       scale=(float)((int32_t)(0.5+scale/10.0));
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        CALLA   #_Div32f
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
        CALLA   #_Add32f
        CALLA   #_Cast32fto32s
        CALLA   #_Cast32sto32f
        MOV.W   R12, R6
        MOV.W   R13, R7
//  173       d=(unsigned char) (number/scale);
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Div32f
        CALLA   #?Subroutine13
//  174       *str++=d+'0';
//  175       number=number-scale*d;
//  176      };
??CrossCallReturnLabel_16:
        MOV.W   R6, R14
        MOV.W   R7, R15
        CALLA   #_Mul32f
        CALLA   #?Subroutine2
??CrossCallReturnLabel_0:
        CMP.B   #0x0, R4
        JNE     ??LCD_Show_FloatNumber8X16_1
??LCD_Show_FloatNumber8X16_8:
        MOV.W   0x52(SP), R6
        MOV.W   0x54(SP), R7
//  177   if (decimals==0) {*str=0; LCD_Show_String8X16(x,y,Str,word_color,back_color);return;};
        CMP.W   #0x0, R9
        JEQ     ??LCD_Show_FloatNumber8X16_4
//  178   *str++='.';
        MOV.B   #0x2e, 0(R8)
        ADDA    #0x1, R8
??LCD_Show_FloatNumber8X16_2:
        ADD.W   #0xffff, R9
//  179   while (decimals--)
//  180   {
//  181     number=number*10.0;
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  182     d=(unsigned char)number;
        CALLA   #?Subroutine13
//  183     *str++=d+'0';
//  184     number=number-d;
//  185   }
??CrossCallReturnLabel_15:
        CALLA   #?Subroutine2
??CrossCallReturnLabel_1:
        CMP.W   #0x0, R9
        JNE     ??LCD_Show_FloatNumber8X16_2
//  186   *str=0;
??LCD_Show_FloatNumber8X16_4:
        MOV.B   #0x0, 0(R8)
//  187   LCD_Show_String8X16(x,y,Str,word_color,back_color);
        PUSH.W  R7
          CFI CFA SP+82
        MOV.W   R6, R15
        MOVA    R5, R14
        MOV.W   0x2a(SP), R13
        MOV.W   0x2c(SP), R12
        CALLA   #LCD_Show_String8X16
//  188 }
        ADD.W   #0x2, SP
          CFI CFA SP+80
        ADD.W   #0x2c, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock9

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine13:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function LCD_Show_FloatNumber8X16
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+84
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function LCD_Show_FloatNumber8X16
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond11) R4L Frame(CFA, -36)
          CFI (cfiCond11) R4H Frame(CFA, -34)
          CFI (cfiCond11) R5L Frame(CFA, -32)
          CFI (cfiCond11) R5H Frame(CFA, -30)
          CFI (cfiCond11) R6L Frame(CFA, -28)
          CFI (cfiCond11) R6H Frame(CFA, -26)
          CFI (cfiCond11) R7L Frame(CFA, -24)
          CFI (cfiCond11) R7H Frame(CFA, -22)
          CFI (cfiCond11) R8L Frame(CFA, -20)
          CFI (cfiCond11) R8H Frame(CFA, -18)
          CFI (cfiCond11) R9L Frame(CFA, -16)
          CFI (cfiCond11) R9H Frame(CFA, -14)
          CFI (cfiCond11) R10L Frame(CFA, -12)
          CFI (cfiCond11) R10H Frame(CFA, -10)
          CFI (cfiCond11) R11L Frame(CFA, -8)
          CFI (cfiCond11) R11H Frame(CFA, -6)
          CFI (cfiCond11) CFA SP+84
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        CALLA   #_Cast32fto32u
        MOV.B   R12, R14
        ADD.B   #0x30, R14
        MOV.B   R14, 0(R8)
        ADDA    #0x1, R8
        MOV.B   R12, R12
        MOV.W   #0x0, R13
        BRA     #_Cast32uto32f
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function LCD_Show_FloatNumber8X16
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+84
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function LCD_Show_FloatNumber8X16
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond14) R4L Frame(CFA, -36)
          CFI (cfiCond14) R4H Frame(CFA, -34)
          CFI (cfiCond14) R5L Frame(CFA, -32)
          CFI (cfiCond14) R5H Frame(CFA, -30)
          CFI (cfiCond14) R6L Frame(CFA, -28)
          CFI (cfiCond14) R6H Frame(CFA, -26)
          CFI (cfiCond14) R7L Frame(CFA, -24)
          CFI (cfiCond14) R7H Frame(CFA, -22)
          CFI (cfiCond14) R8L Frame(CFA, -20)
          CFI (cfiCond14) R8H Frame(CFA, -18)
          CFI (cfiCond14) R9L Frame(CFA, -16)
          CFI (cfiCond14) R9H Frame(CFA, -14)
          CFI (cfiCond14) R10L Frame(CFA, -12)
          CFI (cfiCond14) R10H Frame(CFA, -10)
          CFI (cfiCond14) R11L Frame(CFA, -8)
          CFI (cfiCond14) R11H Frame(CFA, -6)
          CFI (cfiCond14) CFA SP+84
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Sub32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        RETA
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
//  189 /*************************************************************************
//  190 *  º¯ÊýÃû³Æ£º
//  191 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Á½¸öµãÁ¬Ïß
//  192 *  ²ÎÊýËµÃ÷£º
//  193 *  º¯Êý·µ»Ø£º
//  194 *  Ê¹ÓÃÊ¾Àý£º
//  195 *************************************************************************/ 
//  196 void LCD_Draw_Line(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
//  197 {
//  198   uint16_t i,ds;
//  199   int dx,dy,inc_x, inc_y;
//  200   int xerr = 0, yerr = 0;				//³õÊ¼»¯±äÁ¿
//  201 
//  202   if(xs==xe)	  						//Èç¹ûÊÇ»­´¹Ö±ÏßÔòÖ»Ðè¶ÔÊúÖ±×ø±ê¼ÆÊý
//  203   {
//  204     LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
//  205     for(i=0;i<(ye-ys+1);i++)
//  206     {
//  207        LCD_WR_WORD(color_dat);
//  208     }
//  209   }
//  210   else if(ys==ye)						//Èç¹ûÊÇË®Æ½ÏßÔòÖ»ÐèÒª¶ÔË®Æ½×ø±ê¼ÆÊý
//  211   {
//  212     LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
//  213     for(i=0;i<(xe-xs+1);i++)
//  214     {
//  215        LCD_WR_WORD(color_dat);
//  216     }
//  217   } 
//  218   else											//Èç¹ûÊÇÐ±Ïß£¬ÔòÖØÐÂ¼ÆËã£¬Ê¹ÓÃ»­µãº¯Êý»­³öÖ±Ïß
//  219   {
//  220     dx = xe - xs;								//¼ÆËã×ø±êÔöÁ¿
//  221     dy = ye - ys;
//  222 
//  223     if(dx > 0) inc_x = 1;						//ÉèÖÃµ¥²½·½Ïò
//  224     else 
//  225     {
//  226       inc_x = -1; dx = -dx;
//  227     }
//  228     if(dy > 0) inc_y = 1;						//ÉèÖÃµ¥²½·½Ïò
//  229     else
//  230     {
//  231       inc_y = -1; dy = -dy;
//  232     }
//  233 
//  234     if(dx > dy) ds = dx;						//Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá
//  235     else		
//  236       ds = dy;
//  237     for(i = 0; i <= ds+1; i++)					//»­ÏßÊä³ö
//  238     {
//  239       LCD_PTLON(xs,ys,xe,ye);//LCD_draw_dot(xs, ys,color_dat);	//»­µã
//  240       xerr += dx;
//  241       yerr += dy;
//  242       if(xerr > ds)
//  243       {
//  244         xerr -= ds;
//  245         xs   += inc_x;
//  246       }
//  247       if(yerr > ds)
//  248       {
//  249         yerr -= ds;
//  250         ys   += inc_y;
//  251       }
//  252     }
//  253   }  
//  254 }
//  255 /*************************************************************************
//  256 *  º¯ÊýÃû³Æ£º
//  257 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸ö³¤·½ÐÎ
//  258 *  ²ÎÊýËµÃ÷£º
//  259 *  º¯Êý·µ»Ø£º
//  260 *  Ê¹ÓÃÊ¾Àý£º
//  261 *************************************************************************/ 
//  262 void LCD_Draw_Rectangle(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
//  263 {
//  264   LCD_Draw_Line(xs,ys,xs,ye,color_dat);	  //»­¾ØÐÎ×ó±ß
//  265   LCD_Draw_Line(xe,ys,xe,ye,color_dat);	  //»­¾ØÐÎÓÒ±ß
//  266   LCD_Draw_Line(xs,ys,xe,ys,color_dat);	  //»­¾ØÐÎÉÏ±ß
//  267   LCD_Draw_Line(xs,ye,xe,ye,color_dat);	  //»­¾ØÐÎÏÂ±ß
//  268 }
//  269 /*************************************************************************
//  270 *  º¯ÊýÃû³Æ£º
//  271 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸öÈ·¶¨°ë¾¶µÄÔ²
//  272 *  ²ÎÊýËµÃ÷£º
//  273 *  º¯Êý·µ»Ø£º
//  274 *  Ê¹ÓÃÊ¾Àý£º
//  275 *************************************************************************/ 
//  276 void LCD_Draw_Circle(uint16_t x,uint16_t y,uint16_t r,uint16_t color_dat)
//  277 {
//  278   unsigned char dx, dy = r; 
//  279   if((x>=r) &&((128-x)>=r) && (y>=r) && ((160-y)>=r))		//È·¶¨Ëù»­Ô²ÔÚÆÁÄ»·¶Î§ÄÚ£¬Ã»ÓÐ³¬³ö×îÍâ±ß£¬(ÔÝ²»Ö§³ÖÓëÆÁÄ»±ßÏà½»)
//  280   {
//  281     for(dx = 0; dx <= r; dx++)
//  282     {
//  283       while((r * r + 1 - dx * dx) < (dy * dy)) dy--;
//  284       LCD_Draw_Dot(x + dx, y - dy, color_dat);
//  285       LCD_Draw_Dot(x - dx, y - dy, color_dat);
//  286       LCD_Draw_Dot(x - dx, y + dy, color_dat);
//  287       LCD_Draw_Dot(x + dx, y + dy, color_dat);
//  288       LCD_Draw_Dot(x + dy, y - dx, color_dat);
//  289       LCD_Draw_Dot(x - dy, y - dx, color_dat);
//  290       LCD_Draw_Dot(x - dy, y + dx, color_dat);
//  291       LCD_Draw_Dot(x + dy, y + dx, color_dat);
//  292     }
//  293   }
//  294 }
//  295 /*************************************************************************
//  296 *  º¯ÊýÃû³Æ£º
//  297 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸öµã
//  298 *  ²ÎÊýËµÃ÷£º
//  299 *  º¯Êý·µ»Ø£º
//  300 *  Ê¹ÓÃÊ¾Àý£º
//  301 *************************************************************************/ 
//  302 void LCD_Draw_Dot(uint16_t x,uint16_t y,uint16_t color_dat)
//  303 {
//  304   LCD_PTLON(x,y,x,y); 
//  305   LCD_WR_WORD(color_dat);
//  306 }
//  307 /*************************************************************************
//  308 *  º¯ÊýÃû³Æ£º
//  309 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨ÇøÓòÏÔÊ¾Ò»¸±Í¼Ïñ
//  310 *  ²ÎÊýËµÃ÷£º
//  311 *  º¯Êý·µ»Ø£º
//  312 *  Ê¹ÓÃÊ¾Àý£º
//  313 *************************************************************************/ 
//  314 void LCD_Show_Picture(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t pic[])
//  315 {
//  316   unsigned int i,j,k=0;
//  317 
//  318   LCD_PTLON(xs,ys,xe,ye);
//  319   for(i=0;i<ye-ys;i++)
//  320   { 
//  321     for(j=0;j<xe-xs;j++)
//  322     {
//  323       LCD_WR_WORD(pic[k++]);	
//  324     }
//  325   }
//  326 }
//  327 /*************************************************************************
//  328 *  º¯ÊýÃû³Æ£ºLCD_Printf_8x16
//  329 *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
//  330 *  ²ÎÊýËµÃ÷£º
//  331 *  º¯Êý·µ»Ø£ºÎÞ
//  332 *  Ê¹ÓÃÊ¾Àý£ºLCD_Printf_8x16("Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
//  333 *************************************************************************/  
//  334 void LCD_Printf_8x16(uint16_t x,uint16_t y,const char * fmt,...)
//  335 {

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//  336   static char LCD_String[256];
??LCD_String:
        DS8 256

        RSEG CODE:CODE:NOROOT(1)
LCD_Printf:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function LCD_Printf
        FUNCALL LCD_Printf, vsprintf
        LOCFRAME CSTACK, 48, STACK
        FUNCALL LCD_Printf, strlen
        LOCFRAME CSTACK, 48, STACK
        FUNCALL LCD_Printf, LCD_Show_NChar8X16
        LOCFRAME CSTACK, 48, STACK
        FUNCALL LCD_Printf, LCD_Display_Full
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf, LCD_Show_NChar8X16
        LOCFRAME CSTACK, 48, STACK
        FUNCALL LCD_Printf, LCD_Show_Char8X16
        LOCFRAME CSTACK, 46, STACK
        FUNCALL LCD_Printf, LCD_Display_Full
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf, LCD_Show_NChar8X16
        LOCFRAME CSTACK, 48, STACK
        FUNCALL LCD_Printf, LCD_Display_Full
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf, LCD_Show_Char8X16
        LOCFRAME CSTACK, 46, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x8, SP
          CFI CFA SP+44
        MOV.W   SP, R15
        ADD.W   #0x2c, R15
        MOVA    R15, 0x4(SP)
        MOVA    #??LCD_String_1, R6
        PUSH.W  #0x0
          CFI CFA SP+46
        PUSH.W  R15
          CFI CFA SP+48
        MOVA    R12, R13
        MOVA    R6, R12
        CALLA   #vsprintf
        MOV.B   #0x0, R10
        MOVA    R6, R12
        CALLA   #strlen
        MOV.W   R12, R4
        MOV.W   #0x0, 0x6(SP)
        ADD.W   #0x4, SP
          CFI CFA SP+44
        CMP.W   #0x0, R12
        JL      ??LCD_Printf_9
        MOVA    R6, 0x4(SP)
        CALLA   #?Subroutine9
??LCD_Printf_2:
        MOVA    0x4(SP), R15
        CMP.B   #0xa, 0(R15)
        JNE     ??LCD_Printf_10
        MOV.B   0x2(SP), 0(SP)
        MOV.B   @SP, R7
        SUB.W   R10, R7
        MOVA    R6, R5
        ADDA    R10, R5
        JMP     ??LCD_Printf_11
??LCD_Printf_0:
        PUSH.W  @R9
          CFI CFA SP+46
        PUSHX.W &POINT_COLOR
          CFI CFA SP+48
        MOV.W   #0x1e, R15
        MOVA    R5, R14
        CALLA   #?Subroutine7
??CrossCallReturnLabel_9:
        ADD.W   #0x10, 0(R8)
        ADD.W   #0x4, SP
          CFI CFA SP+44
        CALLA   #?Subroutine6
??CrossCallReturnLabel_6:
        MOV.W   #0x0, 0(R11)
        ADD.B   #0x1e, R10
        ADDA    #0x1e, R5
        ADD.W   #0xffe2, R7
??LCD_Printf_11:
        CMP.B   @SP, R10
        JC      ??LCD_Printf_12
        CMP.W   #0x1f, R7
        JGE     ??LCD_Printf_0
        MOV.B   @SP, R7
        SUB.W   R10, R7
        PUSH.W  @R9
          CFI CFA SP+46
        PUSHX.W &POINT_COLOR
          CFI CFA SP+48
        MOV.W   R7, R15
        MOVA    R6, R14
        ADDA    R10, R14
        CALLA   #?Subroutine7
??CrossCallReturnLabel_8:
        RLAM.W  #0x3, R7
        ADD.W   R7, 0(R11)
        ADD.W   #0x4, SP
          CFI CFA SP+44
        JMP     ??LCD_Printf_13
??LCD_Printf_1:
        PUSH.W  @R9
          CFI CFA SP+46
        CALLA   #?Subroutine11
??CrossCallReturnLabel_11:
        MOV.W   @R11, R12
        CALLA   #LCD_Show_Char8X16
        ADD.W   #0x8, 0(R11)
        ADD.W   #0x2, SP
          CFI CFA SP+44
??LCD_Printf_13:
        CMP.W   #0xf0, 0(R11)
        JNC     ??LCD_Printf_1
??LCD_Printf_12:
        MOV.B   @SP, R10
        ADD.B   #0x1, R10
        MOV.W   #0x0, 0(R11)
        ADD.W   #0x10, 0(R8)
        CMP.W   #0x140, 0(R8)
        JNC     ??LCD_Printf_10
        MOV.W   #0x0, 0(R8)
        MOVX.W  &BACK_COLOR, R12
        CALLA   #LCD_Display_Full
??LCD_Printf_10:
        MOV.W   0x2(SP), R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0x2(SP)
        MOVA    0x4(SP), R15
        ADDA    #0x1, R15
        MOVA    R15, 0x4(SP)
        CMP.W   0x2(SP), R4
        JGE     ??LCD_Printf_2
??LCD_Printf_9:
        MOV.B   R10, R15
        CMP.W   R4, R15
        JGE     ??LCD_Printf_14
        SUB.W   R15, R4
        CALLA   #?Subroutine9
??CrossCallReturnLabel_10:
        PUSH.W  @R9
          CFI CFA SP+46
        PUSHX.W &POINT_COLOR
          CFI CFA SP+48
        MOV.W   R4, R15
        ADDA    R10, R6
        MOVA    R6, R14
        CALLA   #?Subroutine7
??CrossCallReturnLabel_7:
        RLAM.W  #0x3, R4
        ADD.W   R4, 0(R11)
        ADD.W   #0x4, SP
          CFI CFA SP+44
        JMP     ??LCD_Printf_6
??LCD_Printf_3:
        ADD.W   #0x10, 0(R8)
        ADD.W   #0xff10, 0(R11)
        CALLA   #?Subroutine6
??LCD_Printf_6:
        CMP.W   #0xf0, 0(R11)
        JC      ??LCD_Printf_3
        MOV.W   @R11, R11
??LCD_Printf_4:
        PUSH.W  @R9
          CFI CFA SP+46
        CALLA   #?Subroutine11
??CrossCallReturnLabel_12:
        MOV.W   R11, R12
        CALLA   #LCD_Show_Char8X16
        ADD.W   #0x1, R11
        ADD.W   #0x2, SP
          CFI CFA SP+44
        CMP.W   #0xf0, R11
        JL      ??LCD_Printf_4
          CFI EndBlock cfiBlock16
??LCD_Printf_14:
        REQUIRE ?Subroutine0
        // Fall through to label ?Subroutine0

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI NoFunction
          CFI CFA SP+44
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
        ADD.W   #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI CFA SP+4
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R11L SameValue
          CFI R11H SameValue
        RETA
          CFI EndBlock cfiBlock17

        RSEG CODE:CODE:NOROOT(1)
?Subroutine11:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function LCD_Printf
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+50
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function LCD_Printf
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond19) R4L Frame(CFA, -36)
          CFI (cfiCond19) R4H Frame(CFA, -34)
          CFI (cfiCond19) R5L Frame(CFA, -32)
          CFI (cfiCond19) R5H Frame(CFA, -30)
          CFI (cfiCond19) R6L Frame(CFA, -28)
          CFI (cfiCond19) R6H Frame(CFA, -26)
          CFI (cfiCond19) R7L Frame(CFA, -24)
          CFI (cfiCond19) R7H Frame(CFA, -22)
          CFI (cfiCond19) R8L Frame(CFA, -20)
          CFI (cfiCond19) R8H Frame(CFA, -18)
          CFI (cfiCond19) R9L Frame(CFA, -16)
          CFI (cfiCond19) R9H Frame(CFA, -14)
          CFI (cfiCond19) R10L Frame(CFA, -12)
          CFI (cfiCond19) R10H Frame(CFA, -10)
          CFI (cfiCond19) R11L Frame(CFA, -8)
          CFI (cfiCond19) R11H Frame(CFA, -6)
          CFI (cfiCond19) CFA SP+50
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOV.W   @R8, R13
        RETA
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG CODE:CODE:NOROOT(1)
?Subroutine9:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function LCD_Printf
          CFI Conditional ??LCD_Printf_2
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+48
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function LCD_Printf
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond22) R4L Frame(CFA, -36)
          CFI (cfiCond22) R4H Frame(CFA, -34)
          CFI (cfiCond22) R5L Frame(CFA, -32)
          CFI (cfiCond22) R5H Frame(CFA, -30)
          CFI (cfiCond22) R6L Frame(CFA, -28)
          CFI (cfiCond22) R6H Frame(CFA, -26)
          CFI (cfiCond22) R7L Frame(CFA, -24)
          CFI (cfiCond22) R7H Frame(CFA, -22)
          CFI (cfiCond22) R8L Frame(CFA, -20)
          CFI (cfiCond22) R8H Frame(CFA, -18)
          CFI (cfiCond22) R9L Frame(CFA, -16)
          CFI (cfiCond22) R9H Frame(CFA, -14)
          CFI (cfiCond22) R10L Frame(CFA, -12)
          CFI (cfiCond22) R10H Frame(CFA, -10)
          CFI (cfiCond22) R11L Frame(CFA, -8)
          CFI (cfiCond22) R11H Frame(CFA, -6)
          CFI (cfiCond22) CFA SP+48
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVA    #??x, R11
        MOVA    #??y, R8
        MOVA    #BACK_COLOR, R9
        RETA
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG CODE:CODE:NOROOT(1)
?Subroutine7:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function LCD_Printf
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+52
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function LCD_Printf
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond25) R4L Frame(CFA, -36)
          CFI (cfiCond25) R4H Frame(CFA, -34)
          CFI (cfiCond25) R5L Frame(CFA, -32)
          CFI (cfiCond25) R5H Frame(CFA, -30)
          CFI (cfiCond25) R6L Frame(CFA, -28)
          CFI (cfiCond25) R6H Frame(CFA, -26)
          CFI (cfiCond25) R7L Frame(CFA, -24)
          CFI (cfiCond25) R7H Frame(CFA, -22)
          CFI (cfiCond25) R8L Frame(CFA, -20)
          CFI (cfiCond25) R8H Frame(CFA, -18)
          CFI (cfiCond25) R9L Frame(CFA, -16)
          CFI (cfiCond25) R9H Frame(CFA, -14)
          CFI (cfiCond25) R10L Frame(CFA, -12)
          CFI (cfiCond25) R10H Frame(CFA, -10)
          CFI (cfiCond25) R11L Frame(CFA, -8)
          CFI (cfiCond25) R11H Frame(CFA, -6)
          CFI (cfiCond25) CFA SP+52
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function LCD_Printf
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond26) R4L Frame(CFA, -36)
          CFI (cfiCond26) R4H Frame(CFA, -34)
          CFI (cfiCond26) R5L Frame(CFA, -32)
          CFI (cfiCond26) R5H Frame(CFA, -30)
          CFI (cfiCond26) R6L Frame(CFA, -28)
          CFI (cfiCond26) R6H Frame(CFA, -26)
          CFI (cfiCond26) R7L Frame(CFA, -24)
          CFI (cfiCond26) R7H Frame(CFA, -22)
          CFI (cfiCond26) R8L Frame(CFA, -20)
          CFI (cfiCond26) R8H Frame(CFA, -18)
          CFI (cfiCond26) R9L Frame(CFA, -16)
          CFI (cfiCond26) R9H Frame(CFA, -14)
          CFI (cfiCond26) R10L Frame(CFA, -12)
          CFI (cfiCond26) R10H Frame(CFA, -10)
          CFI (cfiCond26) R11L Frame(CFA, -8)
          CFI (cfiCond26) R11H Frame(CFA, -6)
          CFI (cfiCond26) CFA SP+52
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV.W   @R8, R13
        MOV.W   @R11, R12
        BRA     #LCD_Show_NChar8X16
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG CODE:CODE:NOROOT(1)
?Subroutine6:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function LCD_Printf
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+48
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function LCD_Printf
          CFI (cfiCond29) Conditional ??LCD_Printf_6
          CFI (cfiCond29) R4L Frame(CFA, -36)
          CFI (cfiCond29) R4H Frame(CFA, -34)
          CFI (cfiCond29) R5L Frame(CFA, -32)
          CFI (cfiCond29) R5H Frame(CFA, -30)
          CFI (cfiCond29) R6L Frame(CFA, -28)
          CFI (cfiCond29) R6H Frame(CFA, -26)
          CFI (cfiCond29) R7L Frame(CFA, -24)
          CFI (cfiCond29) R7H Frame(CFA, -22)
          CFI (cfiCond29) R8L Frame(CFA, -20)
          CFI (cfiCond29) R8H Frame(CFA, -18)
          CFI (cfiCond29) R9L Frame(CFA, -16)
          CFI (cfiCond29) R9H Frame(CFA, -14)
          CFI (cfiCond29) R10L Frame(CFA, -12)
          CFI (cfiCond29) R10H Frame(CFA, -10)
          CFI (cfiCond29) R11L Frame(CFA, -8)
          CFI (cfiCond29) R11H Frame(CFA, -6)
          CFI (cfiCond29) CFA SP+48
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        CMP.W   #0x140, 0(R8)
        JNC     ??LCD_Printf_7
        MOV.W   #0x0, 0(R8)
        MOV.W   @R9, R12
        CALLA   #LCD_Display_Full
??LCD_Printf_7:
        RETA
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG CODE:CODE:NOROOT(1)
LCD_Printf_8x16:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function LCD_Printf_8x16
        FUNCALL LCD_Printf_8x16, vsprintf
        LOCFRAME CSTACK, 46, STACK
        FUNCALL LCD_Printf_8x16, strlen
        LOCFRAME CSTACK, 46, STACK
        FUNCALL LCD_Printf_8x16, LCD_Show_NChar8X16
        LOCFRAME CSTACK, 46, STACK
        FUNCALL LCD_Printf_8x16, LCD_Show_NChar8X16
        LOCFRAME CSTACK, 46, STACK
        FUNCALL LCD_Printf_8x16, LCD_Show_Char8X16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf_8x16, LCD_Show_NChar8X16
        LOCFRAME CSTACK, 46, STACK
        FUNCALL LCD_Printf_8x16, __data20_free
        LOCFRAME CSTACK, 42, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x6, SP
          CFI CFA SP+42
        MOV.W   R12, R11
        MOV.W   R13, R8
        MOV.W   SP, R15
        ADD.W   #0x2a, R15
        MOVA    R15, 0x2(SP)
        MOVA    #??LCD_String, R9
        PUSH.W  #0x0
          CFI CFA SP+44
        PUSH.W  R15
          CFI CFA SP+46
        MOVA    R14, R13
        MOVA    R9, R12
        CALLA   #vsprintf
        MOV.B   #0x0, R10
        MOVA    R9, R12
        CALLA   #strlen
        MOV.W   R12, R4
        MOV.W   #0x0, R7
        ADD.W   #0x4, SP
          CFI CFA SP+42
        CMP.W   #0x0, R12
        JL      ??LCD_Printf_8x16_3
        MOVA    R9, 0x2(SP)
??LCD_Printf_8x16_2:
        MOVA    0x2(SP), R15
        CMP.B   #0xa, 0(R15)
        JNE     ??LCD_Printf_8x16_4
        MOV.B   R7, 0(SP)
        MOV.B   R7, R6
        SUB.W   R10, R6
        MOVA    R9, R5
        ADDA    R10, R5
        JMP     ??LCD_Printf_8x16_5
??LCD_Printf_8x16_0:
        PUSHX.W &BACK_COLOR
          CFI CFA SP+44
        PUSHX.W &POINT_COLOR
          CFI CFA SP+46
        MOV.W   #0x1e, R15
        MOVA    R5, R14
        CALLA   #??Subroutine15_0
??CrossCallReturnLabel_21:
        ADD.W   #0x10, R8
        MOV.W   #0x0, R11
        ADD.B   #0x1e, R10
        ADDA    #0x1e, R5
        ADD.W   #0xffe2, R6
        ADD.W   #0x4, SP
          CFI CFA SP+42
??LCD_Printf_8x16_5:
        CMP.B   @SP, R10
        JC      ??LCD_Printf_8x16_6
        CMP.W   #0x1f, R6
        JGE     ??LCD_Printf_8x16_0
        MOV.B   @SP, R6
        SUB.W   R10, R6
        PUSHX.W &BACK_COLOR
          CFI CFA SP+44
        PUSHX.W &POINT_COLOR
          CFI CFA SP+46
        MOV.W   R6, R15
        CALLA   #?Subroutine10
??CrossCallReturnLabel_23:
        RLAM.W  #0x3, R6
        ADD.W   R6, R11
        ADD.W   #0x4, SP
          CFI CFA SP+42
        CMP.W   #0xf0, R11
        JC      ??LCD_Printf_8x16_6
??LCD_Printf_8x16_1:
        PUSHX.W &BACK_COLOR
          CFI CFA SP+44
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOV.W   R8, R13
        MOV.W   R11, R12
        CALLA   #LCD_Show_Char8X16
        ADD.W   #0x8, R11
        ADD.W   #0x2, SP
          CFI CFA SP+42
        CMP.W   #0xf0, R11
        JNC     ??LCD_Printf_8x16_1
??LCD_Printf_8x16_6:
        MOV.B   @SP, R10
        ADD.B   #0x1, R10
        MOV.W   #0x0, R11
        ADD.W   #0x10, R8
        CMP.W   #0x140, R8
        JNC     ??LCD_Printf_8x16_4
        MOV.W   #0x0, R8
??LCD_Printf_8x16_4:
        ADD.W   #0x1, R7
        MOVA    0x2(SP), R15
        ADDA    #0x1, R15
        MOVA    R15, 0x2(SP)
        CMP.W   R7, R4
        JGE     ??LCD_Printf_8x16_2
??LCD_Printf_8x16_3:
        MOV.B   R10, R15
        CMP.W   R4, R15
        JGE     ??LCD_Printf_8x16_7
        PUSHX.W &BACK_COLOR
          CFI CFA SP+44
        PUSHX.W &POINT_COLOR
          CFI CFA SP+46
        SUB.W   R15, R4
        MOV.W   R4, R15
        CALLA   #?Subroutine10
??CrossCallReturnLabel_22:
        ADD.W   #0x4, SP
          CFI CFA SP+42
??LCD_Printf_8x16_7:
        MOVA    R9, R12
        CALLA   #__data20_free
        ADD.W   #0x6, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock31

        RSEG CODE:CODE:NOROOT(1)
?Subroutine10:
          CFI Block cfiCond32 Using cfiCommon0
          CFI Function LCD_Printf_8x16
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+50
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function LCD_Printf_8x16
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond33) R4L Frame(CFA, -36)
          CFI (cfiCond33) R4H Frame(CFA, -34)
          CFI (cfiCond33) R5L Frame(CFA, -32)
          CFI (cfiCond33) R5H Frame(CFA, -30)
          CFI (cfiCond33) R6L Frame(CFA, -28)
          CFI (cfiCond33) R6H Frame(CFA, -26)
          CFI (cfiCond33) R7L Frame(CFA, -24)
          CFI (cfiCond33) R7H Frame(CFA, -22)
          CFI (cfiCond33) R8L Frame(CFA, -20)
          CFI (cfiCond33) R8H Frame(CFA, -18)
          CFI (cfiCond33) R9L Frame(CFA, -16)
          CFI (cfiCond33) R9H Frame(CFA, -14)
          CFI (cfiCond33) R10L Frame(CFA, -12)
          CFI (cfiCond33) R10H Frame(CFA, -10)
          CFI (cfiCond33) R11L Frame(CFA, -8)
          CFI (cfiCond33) R11H Frame(CFA, -6)
          CFI (cfiCond33) CFA SP+50
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOVA    R9, R14
        ADDA    R10, R14
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34
        REQUIRE ??Subroutine15_0
        // Fall through to label ??Subroutine15_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine15_0:
          CFI Block cfiCond35 Using cfiCommon0
          CFI Function LCD_Printf_8x16
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+50
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function LCD_Printf_8x16
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond36) R4L Frame(CFA, -36)
          CFI (cfiCond36) R4H Frame(CFA, -34)
          CFI (cfiCond36) R5L Frame(CFA, -32)
          CFI (cfiCond36) R5H Frame(CFA, -30)
          CFI (cfiCond36) R6L Frame(CFA, -28)
          CFI (cfiCond36) R6H Frame(CFA, -26)
          CFI (cfiCond36) R7L Frame(CFA, -24)
          CFI (cfiCond36) R7H Frame(CFA, -22)
          CFI (cfiCond36) R8L Frame(CFA, -20)
          CFI (cfiCond36) R8H Frame(CFA, -18)
          CFI (cfiCond36) R9L Frame(CFA, -16)
          CFI (cfiCond36) R9H Frame(CFA, -14)
          CFI (cfiCond36) R10L Frame(CFA, -12)
          CFI (cfiCond36) R10H Frame(CFA, -10)
          CFI (cfiCond36) R11L Frame(CFA, -8)
          CFI (cfiCond36) R11H Frame(CFA, -6)
          CFI (cfiCond36) CFA SP+50
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function LCD_Printf_8x16
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond37) R4L Frame(CFA, -36)
          CFI (cfiCond37) R4H Frame(CFA, -34)
          CFI (cfiCond37) R5L Frame(CFA, -32)
          CFI (cfiCond37) R5H Frame(CFA, -30)
          CFI (cfiCond37) R6L Frame(CFA, -28)
          CFI (cfiCond37) R6H Frame(CFA, -26)
          CFI (cfiCond37) R7L Frame(CFA, -24)
          CFI (cfiCond37) R7H Frame(CFA, -22)
          CFI (cfiCond37) R8L Frame(CFA, -20)
          CFI (cfiCond37) R8H Frame(CFA, -18)
          CFI (cfiCond37) R9L Frame(CFA, -16)
          CFI (cfiCond37) R9H Frame(CFA, -14)
          CFI (cfiCond37) R10L Frame(CFA, -12)
          CFI (cfiCond37) R10H Frame(CFA, -10)
          CFI (cfiCond37) R11L Frame(CFA, -8)
          CFI (cfiCond37) R11H Frame(CFA, -6)
          CFI (cfiCond37) CFA SP+50
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        MOV.W   R8, R13
        MOV.W   R11, R12
        BRA     #LCD_Show_NChar8X16
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG CODE:CODE:NOROOT(1)
LCD_Show_Picture:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function LCD_Show_Picture
        FUNCALL LCD_Show_Picture, LCD_SetPos
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Show_Picture, LCD_Write_DATA16
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R6
        MOV.W   R13, R11
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   #0x0, R10
        CALLA   #LCD_SetPos
        SUB.W   R11, R9
        JEQ     ??LCD_Show_Picture_2
        SUB.W   R6, R8
        MOVA    0x1c(SP), R11
??LCD_Show_Picture_1:
        CMP.W   #0x0, R8
        JEQ     ??LCD_Show_Picture_3
        MOV.W   R8, R6
??LCD_Show_Picture_0:
        MOV.W   R10, R14
        ADDA    R14, R14
        MOVA    R11, R15
        ADDA    R14, R15
        MOV.W   @R15, R12
        CALLA   #LCD_Write_DATA16
        ADD.W   #0x1, R10
        ADD.W   #0xffff, R6
        JNE     ??LCD_Show_Picture_0
??LCD_Show_Picture_3:
        ADD.W   #0xffff, R9
        JNE     ??LCD_Show_Picture_1
??LCD_Show_Picture_2:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock39

        RSEG CODE:CODE:NOROOT(1)
LCD_Draw_Dot:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function LCD_Draw_Dot
        FUNCALL LCD_Draw_Dot, LCD_SetPos
        LOCFRAME CSTACK, 8, STACK
        FUNCALL LCD_Draw_Dot, LCD_Write_DATA16
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.W   R14, R10
        MOV.W   R13, R15
        MOV.W   R12, R14
        CALLA   #LCD_SetPos
        MOV.W   R10, R12
        CALLA   #LCD_Write_DATA16
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock40

        RSEG CODE:CODE:NOROOT(1)
LCD_Draw_Circle:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function LCD_Draw_Circle
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Circle, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x8, SP
          CFI CFA SP+44
        MOV.W   R12, R5
        MOV.W   R13, R4
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOV.B   R10, 0(SP)
        CMP.W   R14, R12
        JNC     ??LCD_Draw_Circle_2
        MOV.W   #0x80, R15
        SUB.W   R12, R15
        CMP.W   R14, R15
        JNC     ??LCD_Draw_Circle_2
        CMP.W   R14, R13
        JNC     ??LCD_Draw_Circle_2
        MOV.W   #0xa0, R15
        SUB.W   R13, R15
        CMP.W   R14, R15
        JNC     ??LCD_Draw_Circle_2
        MOV.B   #0x0, 0x1(SP)
        MOV.W   R12, R7
        MOV.W   R13, R6
        MOV.W   R12, R8
        MOV.W   R13, R9
        PUSH.W  SR
          CFI CFA SP+46
        CALLA   #?Subroutine12
??CrossCallReturnLabel_13:
        MOV.W   &0x4ca, R15
        POP.W   SR
          CFI CFA SP+44
        ADD.W   #0x1, R15
        MOV.W   R15, 0x6(SP)
        JMP     ??LCD_Draw_Circle_3
??LCD_Draw_Circle_0:
        MOV.B   @SP, R14
        ADD.B   #0xff, R14
        MOV.B   R14, 0(SP)
??LCD_Draw_Circle_1:
        MOV.B   @SP, R15
        MOV.B   0x1(SP), R14
        MOV.W   0x6(SP), R13
        PUSH.W  SR
          CFI CFA SP+46
        CALLA   #?Subroutine12
??CrossCallReturnLabel_14:
        MOV.W   &0x4ca, R14
        POP.W   SR
          CFI CFA SP+44
        SUB.W   R14, R13
        PUSH.W  SR
          CFI CFA SP+46
        DINT
        NOP
        MOV.W   R15, &0x4c0
        MOV.W   R15, &0x4c8
        MOV.W   &0x4ca, R15
        POP.W   SR
          CFI CFA SP+44
        CMP.W   R15, R13
        JNC     ??LCD_Draw_Circle_0
        MOV.B   @SP, R15
        MOV.W   R4, R14
        SUB.W   R15, R14
        MOV.W   R14, 0x2(SP)
        MOV.W   R14, R13
        MOV.W   R14, R15
        MOV.W   R7, R14
        MOV.W   R7, R12
        CALLA   #?Subroutine3
??CrossCallReturnLabel_2:
        MOV.W   R8, R14
        MOV.W   R8, R12
        CALLA   #?Subroutine14
??CrossCallReturnLabel_19:
        MOV.B   @SP, R15
        MOV.W   R4, R14
        ADD.W   R15, R14
        MOV.W   R14, 0x2(SP)
        MOV.W   R14, R13
        MOV.W   R14, R15
        MOV.W   R8, R14
        MOV.W   R8, R12
        CALLA   #?Subroutine3
??CrossCallReturnLabel_3:
        MOV.W   R7, R14
        MOV.W   R7, R12
        CALLA   #?Subroutine4
??CrossCallReturnLabel_4:
        ADD.W   R15, R14
        MOV.W   R14, 0x4(SP)
        MOV.W   R14, R12
        MOV.W   R9, R15
        MOV.W   R9, R13
        CALLA   #?Subroutine4
??CrossCallReturnLabel_5:
        SUB.W   R15, R14
        MOV.W   R14, 0x2(SP)
        MOV.W   R14, R12
        MOV.W   R9, R15
        MOV.W   R9, R13
        CALLA   #?Subroutine14
??CrossCallReturnLabel_20:
        MOV.W   0x2(SP), R12
        CALLA   #?Subroutine1
??CrossCallReturnLabel_17:
        MOV.W   0x4(SP), R12
        CALLA   #?Subroutine1
??CrossCallReturnLabel_18:
        MOV.B   0x1(SP), R14
        ADD.B   #0x1, R14
        MOV.B   R14, 0x1(SP)
        ADD.W   #0xffff, R9
        ADD.W   #0xffff, R8
        ADD.W   #0x1, R6
        ADD.W   #0x1, R7
??LCD_Draw_Circle_3:
        MOV.B   0x1(SP), R15
        CMP.W   R15, R10
        JC      ??LCD_Draw_Circle_1
??LCD_Draw_Circle_2:
        JMP     ?Subroutine0
        NOP
          CFI EndBlock cfiBlock41

        RSEG CODE:CODE:NOROOT(1)
?Subroutine12:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function LCD_Draw_Circle
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+50
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function LCD_Draw_Circle
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond43) R4L Frame(CFA, -36)
          CFI (cfiCond43) R4H Frame(CFA, -34)
          CFI (cfiCond43) R5L Frame(CFA, -32)
          CFI (cfiCond43) R5H Frame(CFA, -30)
          CFI (cfiCond43) R6L Frame(CFA, -28)
          CFI (cfiCond43) R6H Frame(CFA, -26)
          CFI (cfiCond43) R7L Frame(CFA, -24)
          CFI (cfiCond43) R7H Frame(CFA, -22)
          CFI (cfiCond43) R8L Frame(CFA, -20)
          CFI (cfiCond43) R8H Frame(CFA, -18)
          CFI (cfiCond43) R9L Frame(CFA, -16)
          CFI (cfiCond43) R9H Frame(CFA, -14)
          CFI (cfiCond43) R10L Frame(CFA, -12)
          CFI (cfiCond43) R10H Frame(CFA, -10)
          CFI (cfiCond43) R11L Frame(CFA, -8)
          CFI (cfiCond43) R11H Frame(CFA, -6)
          CFI (cfiCond43) CFA SP+50
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        DINT
        NOP
        MOV.W   R14, &0x4c0
        MOV.W   R14, &0x4c8
        RETA
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG CODE:CODE:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function LCD_Draw_Circle
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+48
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function LCD_Draw_Circle
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond46) R4L Frame(CFA, -36)
          CFI (cfiCond46) R4H Frame(CFA, -34)
          CFI (cfiCond46) R5L Frame(CFA, -32)
          CFI (cfiCond46) R5H Frame(CFA, -30)
          CFI (cfiCond46) R6L Frame(CFA, -28)
          CFI (cfiCond46) R6H Frame(CFA, -26)
          CFI (cfiCond46) R7L Frame(CFA, -24)
          CFI (cfiCond46) R7H Frame(CFA, -22)
          CFI (cfiCond46) R8L Frame(CFA, -20)
          CFI (cfiCond46) R8H Frame(CFA, -18)
          CFI (cfiCond46) R9L Frame(CFA, -16)
          CFI (cfiCond46) R9H Frame(CFA, -14)
          CFI (cfiCond46) R10L Frame(CFA, -12)
          CFI (cfiCond46) R10H Frame(CFA, -10)
          CFI (cfiCond46) R11L Frame(CFA, -8)
          CFI (cfiCond46) R11H Frame(CFA, -6)
          CFI (cfiCond46) CFA SP+48
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        CALLA   #LCD_SetPos
        MOV.W   R11, R12
        CALLA   #LCD_Write_DATA16
        MOV.B   0x4(SP), R15
        MOV.W   R5, R14
        RETA
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47

        RSEG CODE:CODE:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function LCD_Draw_Circle
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+48
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function LCD_Draw_Circle
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond49) R4L Frame(CFA, -36)
          CFI (cfiCond49) R4H Frame(CFA, -34)
          CFI (cfiCond49) R5L Frame(CFA, -32)
          CFI (cfiCond49) R5H Frame(CFA, -30)
          CFI (cfiCond49) R6L Frame(CFA, -28)
          CFI (cfiCond49) R6H Frame(CFA, -26)
          CFI (cfiCond49) R7L Frame(CFA, -24)
          CFI (cfiCond49) R7H Frame(CFA, -22)
          CFI (cfiCond49) R8L Frame(CFA, -20)
          CFI (cfiCond49) R8H Frame(CFA, -18)
          CFI (cfiCond49) R9L Frame(CFA, -16)
          CFI (cfiCond49) R9H Frame(CFA, -14)
          CFI (cfiCond49) R10L Frame(CFA, -12)
          CFI (cfiCond49) R10H Frame(CFA, -10)
          CFI (cfiCond49) R11L Frame(CFA, -8)
          CFI (cfiCond49) R11H Frame(CFA, -6)
          CFI (cfiCond49) CFA SP+48
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        CALLA   #LCD_SetPos
        MOV.W   R11, R12
        CALLA   #LCD_Write_DATA16
        MOV.W   0x6(SP), R13
        MOV.W   R13, R15
        RETA
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function LCD_Draw_Circle
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+48
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function LCD_Draw_Circle
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond52) R4L Frame(CFA, -36)
          CFI (cfiCond52) R4H Frame(CFA, -34)
          CFI (cfiCond52) R5L Frame(CFA, -32)
          CFI (cfiCond52) R5H Frame(CFA, -30)
          CFI (cfiCond52) R6L Frame(CFA, -28)
          CFI (cfiCond52) R6H Frame(CFA, -26)
          CFI (cfiCond52) R7L Frame(CFA, -24)
          CFI (cfiCond52) R7H Frame(CFA, -22)
          CFI (cfiCond52) R8L Frame(CFA, -20)
          CFI (cfiCond52) R8H Frame(CFA, -18)
          CFI (cfiCond52) R9L Frame(CFA, -16)
          CFI (cfiCond52) R9H Frame(CFA, -14)
          CFI (cfiCond52) R10L Frame(CFA, -12)
          CFI (cfiCond52) R10H Frame(CFA, -10)
          CFI (cfiCond52) R11L Frame(CFA, -8)
          CFI (cfiCond52) R11H Frame(CFA, -6)
          CFI (cfiCond52) CFA SP+48
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV.W   R6, R15
        MOV.W   R12, R14
        MOV.W   R6, R13
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
        REQUIRE ?Subroutine14
        // Fall through to label ?Subroutine14

        RSEG CODE:CODE:NOROOT(1)
?Subroutine14:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function LCD_Draw_Circle
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+48
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function LCD_Draw_Circle
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond55) R4L Frame(CFA, -36)
          CFI (cfiCond55) R4H Frame(CFA, -34)
          CFI (cfiCond55) R5L Frame(CFA, -32)
          CFI (cfiCond55) R5H Frame(CFA, -30)
          CFI (cfiCond55) R6L Frame(CFA, -28)
          CFI (cfiCond55) R6H Frame(CFA, -26)
          CFI (cfiCond55) R7L Frame(CFA, -24)
          CFI (cfiCond55) R7H Frame(CFA, -22)
          CFI (cfiCond55) R8L Frame(CFA, -20)
          CFI (cfiCond55) R8H Frame(CFA, -18)
          CFI (cfiCond55) R9L Frame(CFA, -16)
          CFI (cfiCond55) R9H Frame(CFA, -14)
          CFI (cfiCond55) R10L Frame(CFA, -12)
          CFI (cfiCond55) R10H Frame(CFA, -10)
          CFI (cfiCond55) R11L Frame(CFA, -8)
          CFI (cfiCond55) R11H Frame(CFA, -6)
          CFI (cfiCond55) CFA SP+48
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function LCD_Draw_Circle
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond56) R4L Frame(CFA, -36)
          CFI (cfiCond56) R4H Frame(CFA, -34)
          CFI (cfiCond56) R5L Frame(CFA, -32)
          CFI (cfiCond56) R5H Frame(CFA, -30)
          CFI (cfiCond56) R6L Frame(CFA, -28)
          CFI (cfiCond56) R6H Frame(CFA, -26)
          CFI (cfiCond56) R7L Frame(CFA, -24)
          CFI (cfiCond56) R7H Frame(CFA, -22)
          CFI (cfiCond56) R8L Frame(CFA, -20)
          CFI (cfiCond56) R8H Frame(CFA, -18)
          CFI (cfiCond56) R9L Frame(CFA, -16)
          CFI (cfiCond56) R9H Frame(CFA, -14)
          CFI (cfiCond56) R10L Frame(CFA, -12)
          CFI (cfiCond56) R10H Frame(CFA, -10)
          CFI (cfiCond56) R11L Frame(CFA, -8)
          CFI (cfiCond56) R11H Frame(CFA, -6)
          CFI (cfiCond56) CFA SP+48
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function LCD_Draw_Circle
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond57) R4L Frame(CFA, -36)
          CFI (cfiCond57) R4H Frame(CFA, -34)
          CFI (cfiCond57) R5L Frame(CFA, -32)
          CFI (cfiCond57) R5H Frame(CFA, -30)
          CFI (cfiCond57) R6L Frame(CFA, -28)
          CFI (cfiCond57) R6H Frame(CFA, -26)
          CFI (cfiCond57) R7L Frame(CFA, -24)
          CFI (cfiCond57) R7H Frame(CFA, -22)
          CFI (cfiCond57) R8L Frame(CFA, -20)
          CFI (cfiCond57) R8H Frame(CFA, -18)
          CFI (cfiCond57) R9L Frame(CFA, -16)
          CFI (cfiCond57) R9H Frame(CFA, -14)
          CFI (cfiCond57) R10L Frame(CFA, -12)
          CFI (cfiCond57) R10H Frame(CFA, -10)
          CFI (cfiCond57) R11L Frame(CFA, -8)
          CFI (cfiCond57) R11H Frame(CFA, -6)
          CFI (cfiCond57) CFA SP+48
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        CALLA   #LCD_SetPos
        MOV.W   R11, R12
        BRA     #LCD_Write_DATA16
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58

        RSEG CODE:CODE:REORDER:NOROOT(1)
LCD_Draw_Line:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function LCD_Draw_Line
        FUNCALL LCD_Draw_Line, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R14
          CFI CFA SP+38
        SUB.W   #0x6, SP
          CFI CFA SP+44
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R15, R8
        MOV.W   #0x0, R7
        MOV.W   #0x0, R6
        MOV.W   0x2c(SP), R9
        CMP.W   R14, R12
        JNE     ??LCD_Draw_Line_3
        CALLA   #LCD_SetPos
        SUB.W   R11, R8
        ADD.W   #0x1, R8
        JEQ     ??LCD_Draw_Line_4
??LCD_Draw_Line_0:
        MOV.W   R9, R12
        CALLA   #LCD_Write_DATA16
        ADD.W   #0xffff, R8
        JEQ     ??LCD_Draw_Line_4
        JMP     ??LCD_Draw_Line_0
??LCD_Draw_Line_3:
        MOV.W   R14, R4
        SUB.W   R12, R4
        CMP.W   R15, R13
        JNE     ??LCD_Draw_Line_5
        CALLA   #LCD_SetPos
        ADD.W   #0x1, R4
        JEQ     ??LCD_Draw_Line_4
??LCD_Draw_Line_1:
        MOV.W   R9, R12
        CALLA   #LCD_Write_DATA16
        ADD.W   #0xffff, R4
        JEQ     ??LCD_Draw_Line_4
        JMP     ??LCD_Draw_Line_1
??LCD_Draw_Line_5:
        MOV.W   R15, R9
        SUB.W   R13, R9
        CMP.W   #0x1, R4
        JL      ??LCD_Draw_Line_6
        MOV.W   #0x1, 0x4(SP)
        JMP     ??LCD_Draw_Line_7
??LCD_Draw_Line_6:
        MOV.W   #0xffff, 0x4(SP)
        XOR.W   #0xffff, R4
        ADD.W   #0x1, R4
??LCD_Draw_Line_7:
        CMP.W   #0x1, R9
        JL      ??LCD_Draw_Line_8
        MOV.W   #0x1, 0x2(SP)
        JMP     ??LCD_Draw_Line_9
??LCD_Draw_Line_8:
        MOV.W   #0xffff, 0x2(SP)
        XOR.W   #0xffff, R9
        ADD.W   #0x1, R9
??LCD_Draw_Line_9:
        CMP.W   R4, R9
        JGE     ??LCD_Draw_Line_10
        MOV.W   R4, R5
        JMP     ??LCD_Draw_Line_11
??LCD_Draw_Line_10:
        MOV.W   R9, R5
??LCD_Draw_Line_11:
        MOV.W   #0x0, 0(SP)
??LCD_Draw_Line_2:
        MOV.W   R8, R15
        MOV.W   0x6(SP), R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_SetPos
        ADD.W   R4, R7
        ADD.W   R9, R6
        CMP.W   R7, R5
        JC      ??LCD_Draw_Line_12
        SUB.W   R5, R7
        ADD.W   0x4(SP), R10
??LCD_Draw_Line_12:
        CMP.W   R6, R5
        JC      ??LCD_Draw_Line_13
        SUB.W   R5, R6
        ADD.W   0x2(SP), R11
??LCD_Draw_Line_13:
        MOV.W   @SP, R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0(SP)
        MOV.W   R5, R15
        ADD.W   #0x1, R15
        CMP.W   @SP, R15
        JC      ??LCD_Draw_Line_2
??LCD_Draw_Line_4:
        JMP     ?Subroutine0
        NOP
          CFI EndBlock cfiBlock59

        RSEG CODE:CODE:REORDER:NOROOT(1)
LCD_Draw_Rectangle:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI Function LCD_Draw_Rectangle
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 30, STACK
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 32, STACK
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 34, STACK
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R6
        MOV.W   R13, R10
        MOV.W   R14, R11
        MOV.W   R15, R8
        MOV.W   0x1c(SP), R9
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R12, R14
        CALLA   #LCD_Draw_Line
        PUSH.W  R9
          CFI CFA SP+32
        MOV.W   R8, R15
        MOV.W   R11, R14
        MOV.W   R10, R13
        MOV.W   R11, R12
        CALLA   #LCD_Draw_Line
        PUSH.W  R9
          CFI CFA SP+34
        MOV.W   R10, R15
        MOV.W   R11, R14
        MOV.W   R10, R13
        MOV.W   R6, R12
        CALLA   #LCD_Draw_Line
        PUSH.W  R9
          CFI CFA SP+36
        MOV.W   R8, R15
        MOV.W   R11, R14
        MOV.W   R8, R13
        MOV.W   R6, R12
        CALLA   #LCD_Draw_Line
        ADD.W   #0x8, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock60
//  337   va_list ap;
//  338   va_start(ap,fmt);
//  339   vsprintf(LCD_String,fmt,ap);
//  340   uint8_t lastposition=0;
//  341   int length=strlen(LCD_String);
//  342   int TEXT_SIZE=LCD_W/8;
//  343   for(int i=0;i <= length;i++)
//  344   {
//  345     if(LCD_String[i] == '\n')
//  346     {
//  347       uint8_t position=i;
//  348       while(position>lastposition)
//  349       {
//  350         if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
//  351         {
//  352            LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
//  353            y+=16;//»»ÐÐ
//  354            x=0;
//  355            lastposition+=TEXT_SIZE;
//  356         }
//  357         else
//  358         {
//  359           LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
//  360           for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
//  361           {
//  362              LCD_Show_Char8X16(x,y,' ',POINT_COLOR,BACK_COLOR);
//  363           }
//  364           break;
//  365         }
//  366       } 
//  367       lastposition=position+1;
//  368       //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
//  369       x=0;
//  370       y+=16;
//  371       if(y>=LCD_H)y=0;
//  372     }
//  373   }
//  374   if(lastposition<length)
//  375     LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
//  376   va_end(ap);
//  377   free(LCD_String);
//  378 }
//  379 /*************************************************************************
//  380 *  º¯ÊýÃû³Æ£ºLCD_Printf
//  381 *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
//  382 *  ²ÎÊýËµÃ÷£º
//  383 *  º¯Êý·µ»Ø£ºÎÞ
//  384 *  Ê¹ÓÃÊ¾Àý£ºLCD_Printf"Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
//  385 *************************************************************************/  
//  386 void LCD_Printf(const char * fmt,...)
//  387 {

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
//  388   static char LCD_String[256];
??LCD_String_1:
        DS8 256

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//  389   static uint16_t x=0,y=0;
??x:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??y:
        DS8 2

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for POINT_COLOR>`:
        DC16 63488

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for BACK_COLOR>`:
        DC16 65535

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  390   va_list ap;
//  391   va_start(ap,fmt);
//  392   vsprintf(LCD_String,fmt,ap);
//  393   uint8_t lastposition=0;
//  394   int length=strlen(LCD_String);          
//  395   int TEXT_SIZE=LCD_W/8;
//  396   for(int i=0;i<=length;i++)
//  397   {
//  398     if(LCD_String[i]=='\n')     //Óöµ½»»ÐÐ·û
//  399     {
//  400       uint8_t position=i;
//  401       while(position>lastposition)  //ÈôÓÐÒ»¶Î×Ö·û´®Ã»ÓÐÏÔÊ¾£¬ÔòÏÔÊ¾ÍêÎªÖ¹
//  402       {
//  403         if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
//  404         {
//  405            LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
//  406            y+=16;//»»ÐÐ
//  407            if(y>=LCD_H)
//  408            {
//  409              y=0;
//  410              LCD_Display_Full(BACK_COLOR);
//  411            }
//  412            x=0;
//  413            lastposition+=TEXT_SIZE;
//  414         }
//  415         else
//  416         {
//  417           LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
//  418           for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
//  419           {
//  420              LCD_Show_Char8X16(x,y,' ',POINT_COLOR,BACK_COLOR);
//  421           }
//  422           break;
//  423         }
//  424       } 
//  425       lastposition=position+1;
//  426       //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
//  427       x=0;
//  428       y+=16;
//  429       if(y>=LCD_H)
//  430       {
//  431         y=0;
//  432         LCD_Display_Full(BACK_COLOR);
//  433       }
//  434     }
//  435   }
//  436   if(lastposition<length)
//  437   {
//  438     LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
//  439     x+=(length-lastposition)*8;
//  440     while(x>=LCD_W)
//  441     {
//  442        y+=16;
//  443        x-=LCD_W;
//  444        if(y>=LCD_H)
//  445        {
//  446          y=0;
//  447          LCD_Display_Full(BACK_COLOR);
//  448        }
//  449     }
//  450     for(int i=x;i < LCD_W;i++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
//  451     {
//  452       LCD_Show_Char8X16(i,y,' ',POINT_COLOR,BACK_COLOR);
//  453     }
//  454   }
//  455   va_end(ap);
//  456 }
// 
// 2 210 bytes in segment CODE
// 5 365 bytes in segment DATA20_C
//     4 bytes in segment DATA20_I
//     4 bytes in segment DATA20_ID
//   516 bytes in segment DATA20_Z
// 
// 2 210 bytes of CODE  memory
// 5 369 bytes of CONST memory
//   520 bytes of DATA  memory
//
//Errors: none
//Warnings: none
