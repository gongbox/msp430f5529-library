###############################################################################
#                                                                             #
#                                                       06/Jun/2016  16:42:17 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  large                                                   #
#    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\2.2TFT\LCD.c                            #
#    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\2.2TFT\LCD.c -D NDEBUG -D RAM_VECTOR    #
#                     -lC C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C° #
#                     æ\¹¤³ÌÄ£°å\Release\List\ -lA                            #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\             #
#                     -D__MSP430F5529__ -e --double=32 --dlib_config          #
#                     "D:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Ê #
#                     ý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MSP4 #
#                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                   #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                     #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\12864\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\oled\ -I      #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\inc\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\src\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\src\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LCD_API\ -I                             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\2.2TFT\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\delay\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\System\inc\ -I C:\Users\615\Desktop\MSP430\MSP43 #
#                     0F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\src\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\User\ -I C:\Users\615\Desktop\MSP430\MSP430F5529 #
#                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\USER\ -I                    #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\uCOSII\App\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\    #
#                     -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ #
#                     \¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CORE\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP430 #
#                     F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\           #
#                     --core=430X --data_model=large -Oh --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\LCD.lst                             #
#    Object file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\Obj\LCD.r43                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\2.2TFT\LCD.c
      1          #include "LCD.h"

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> __data16 _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2
      2          #include "delay.h" 

   \                                 In  segment CODE, align 2
      3          void LCD_Port_Init(void)
   \                     LCD_Port_Init:
      4          {
      5          #if(LCDHardWareSPI)
      6            LCDHardWareSPI_Init();
   \   000000   70120300     PUSH.B  #0x3
   \   000004   4312         PUSH.B  #0x0
   \   000006   5D43         MOV.B   #0x1, R13
   \   000008   3E4080F0     MOV.W   #0xf080, R14
   \   00000C   3F40FA02     MOV.W   #0x2fa, R15
   \   000010   6C43         MOV.B   #0x2, R12
   \   000012   ........     CALLA   #SPI_Master_Init
      7          #else
      8            GPIO_Init(LCD_SCL_Port,LCD_SCL_Pin,GPO);
      9            GPIO_Init(LCD_SDI_Port,LCD_SDI_Pin,GPO);
     10          #endif
     11            GPIO_Init(LCD_RST_Port,LCD_RST_Pin,GPO);
   \   000016   2E43         MOV.W   #0x2, R14
   \   000018   7D401000     MOV.B   #0x10, R13
   \   00001C   5C43         MOV.B   #0x1, R12
   \   00001E   ........     CALLA   #GPIO_MultiBits_Init
     12            GPIO_Init(LCD_DC_Port,LCD_DC_Pin,GPO);
   \   000022   2E43         MOV.W   #0x2, R14
   \   000024   5D43         MOV.B   #0x1, R13
   \   000026   5C43         MOV.B   #0x1, R12
   \   000028   ........     CALLA   #GPIO_MultiBits_Init
     13            GPIO_Init(LCD_CS_Port, LCD_CS_Pin,GPO);
   \   00002C   2E43         MOV.W   #0x2, R14
   \   00002E   7D408000     MOV.B   #0x80, R13
   \   000032   5C43         MOV.B   #0x1, R12
   \   000034   ........     CALLA   #GPIO_MultiBits_Init
     14          }
   \   000038   2152         ADD.W   #0x4, SP
   \   00003A   1001         RETA

   \                                 In  segment CODE, align 2
     15          void LCD_Writ_Bus(char data)   //´®ÐÐÊý¾ÝÐ´Èë
   \                     LCD_Writ_Bus:
     16          {  
     17          #if(LCDHardWareSPI)
     18            LCD_CS=0;
   \   000000   F2C080000302 BIC.B   #0x80, &0x203
     19            LCDHardWareSPI_SendByte(data);
   \   000006   4D4C         MOV.B   R12, R13
   \   000008   6C43         MOV.B   #0x2, R12
   \   00000A   ........     CALLA   #SPI_SendReadByte
     20            LCD_CS=1;
   \   00000E   F2D080000302 BIS.B   #0x80, &0x203
     21          #else
     22            LCD_CS=0;	
     23            LCD_SCL=0;
     24            for(uint8_t i=0;i<8;i++)
     25            {
     26              LCD_SDI=(data&0x80)==0x80?1:0;//ÉÏÉýÑØ·¢ËÍÊý¾Ý
     27              LCD_SCL=1;
     28              LCD_SCL=0;		
     29              data<<=1;    
     30            }
     31            LCD_CS=1;
     32          #endif 
     33          } 
   \   000014   1001         RETA
   \   000016                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2
     34          void LCD_Write_DATA8(char da) //·¢ËÍÊý¾Ý-8Î»²ÎÊý
   \                     LCD_Write_DATA8:
     35          {
     36              LCD_DC=1;
   \   000000   D2D30302     BIS.B   #0x1, &0x203
     37          	LCD_Writ_Bus(da);
   \   000004   ........     BRA     #LCD_Writ_Bus
   \   000008                REQUIRE _A_PAOUT_L
     38          }  

   \                                 In  segment CODE, align 2
     39           void LCD_Write_DATA16(uint16_t da)
   \                     LCD_Write_DATA16:
     40          {
   \   000000   0A14         PUSHM.A #0x1, R10
   \   000002   4A4C         MOV.B   R12, R10
     41              LCD_DC=1;
   \   000004   D2D30302     BIS.B   #0x1, &0x203
     42          	LCD_Writ_Bus(da>>8);
   \   000008   8C10         SWPB    R12
   \   00000A   ........     CALLA   #LCD_Writ_Bus
     43          	LCD_Writ_Bus(da);
   \   00000E   4C4A         MOV.B   R10, R12
   \   000010   ........     CALLA   #LCD_Writ_Bus
     44          }	  
   \   000014   0A16         POPM.A  #0x1, R10
   \   000016   1001         RETA
   \   000018                REQUIRE _A_PAOUT_L

   \                                 In  segment CODE, align 2
     45          void LCD_Write_REG(char da)	 
   \                     LCD_Write_REG:
     46          {
     47              LCD_DC=0;
   \   000000   D2C30302     BIC.B   #0x1, &0x203
     48                  LCD_Writ_Bus(da);
   \   000004   ........     BRA     #LCD_Writ_Bus
   \   000008                REQUIRE _A_PAOUT_L
     49          }

   \                                 In  segment CODE, align 2
     50           void LCD_Write_REG_DATA(int reg,int da)
   \                     LCD_Write_REG_DATA:
     51          {
   \   000000   0A14         PUSHM.A #0x1, R10
   \   000002   0A4D         MOV.W   R13, R10
     52              LCD_Write_REG(reg);
   \   000004   ........     CALLA   #LCD_Write_REG
     53          	LCD_Write_DATA16(da);
   \   000008   0C4A         MOV.W   R10, R12
   \   00000A   ........     CALLA   #LCD_Write_DATA16
     54          }
   \   00000E   0A16         POPM.A  #0x1, R10
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2
     55          void LCD_SetPos(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
   \                     LCD_SetPos:
     56          {  
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   084C         MOV.W   R12, R8
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   0A4E         MOV.W   R14, R10
   \   000008   094F         MOV.W   R15, R9
     57             LCD_Write_REG(0x2a);
   \   00000A   7C402A00     MOV.B   #0x2a, R12
   \   00000E   ........     CALLA   #LCD_Write_REG
     58             LCD_Write_DATA8(x1>>8);
   \   000012   0C48         MOV.W   R8, R12
   \   000014   ........     CALLA   #?Subroutine7
     59             LCD_Write_DATA8(x1);
   \                     ??CrossCallReturnLabel_17:
   \   000018   4C48         MOV.B   R8, R12
   \   00001A   ........     CALLA   #LCD_Write_DATA8
     60             LCD_Write_DATA8(x2>>8);
   \   00001E   0C4A         MOV.W   R10, R12
   \   000020   ........     CALLA   #?Subroutine7
     61             LCD_Write_DATA8(x2);
   \                     ??CrossCallReturnLabel_16:
   \   000024   4C4A         MOV.B   R10, R12
   \   000026   ........     CALLA   #LCD_Write_DATA8
     62            
     63             LCD_Write_REG(0x2b);
   \   00002A   7C402B00     MOV.B   #0x2b, R12
   \   00002E   ........     CALLA   #LCD_Write_REG
     64             LCD_Write_DATA8(y1>>8);
   \   000032   0C4B         MOV.W   R11, R12
   \   000034   ........     CALLA   #?Subroutine7
     65             LCD_Write_DATA8(y1);
   \                     ??CrossCallReturnLabel_15:
   \   000038   4C4B         MOV.B   R11, R12
   \   00003A   ........     CALLA   #LCD_Write_DATA8
     66             LCD_Write_DATA8(y2>>8);
   \   00003E   0C49         MOV.W   R9, R12
   \   000040   ........     CALLA   #?Subroutine7
     67             LCD_Write_DATA8(y2);
   \                     ??CrossCallReturnLabel_14:
   \   000044   4C49         MOV.B   R9, R12
   \   000046   ........     CALLA   #LCD_Write_DATA8
     68          
     69             LCD_Write_REG(0x2C);
   \   00004A   7C402C00     MOV.B   #0x2c, R12
   \   00004E   ........     CALLA   #LCD_Write_REG
     70          }
   \   000052   3816         POPM.A  #0x4, R11
   \   000054   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine7:
   \   000000   8C10         SWPB    R12
   \   000002   ........     BRA     #LCD_Write_DATA8

   \                                 In  segment CODE, align 2
     71          void LCD_Init(void)
   \                     LCD_Init:
     72          {
     73                  LCD_Port_Init();
   \   000000   ........     CALLA   #LCD_Port_Init
     74          //µ÷ÓÃÒ»´ÎÕâÐ©º¯Êý£¬ÃâµÃ±àÒëµÄÊ±ºòÌáÊ¾¾¯¸æ
     75             	//LCD_CS=1;   
     76          	LCD_RST=0;
   \   000004   F2C010000302 BIC.B   #0x10, &0x203
     77          	delay_ms(10);
   \   00000A   ........     CALLA   #?Subroutine1
     78          	LCD_RST=1;
   \                     ??CrossCallReturnLabel_2:
   \   00000E   F2D010000302 BIS.B   #0x10, &0x203
     79          	delay_ms(10);
   \   000014   ........     CALLA   #?Subroutine1
     80          	//LCD_CS =0;  //´ò¿ªÆ¬Ñ¡Ê¹ÄÜ
     81          
     82          	LCD_Write_REG(0xCB);  
   \                     ??CrossCallReturnLabel_1:
   \   000018   7C40CB00     MOV.B   #0xcb, R12
   \   00001C   ........     CALLA   #LCD_Write_REG
     83                  LCD_Write_DATA8(0x39); 
   \   000020   7C403900     MOV.B   #0x39, R12
   \   000024   ........     CALLA   #LCD_Write_DATA8
     84                  LCD_Write_DATA8(0x2C); 
   \   000028   7C402C00     MOV.B   #0x2c, R12
   \   00002C   ........     CALLA   #?Subroutine4
     85                  LCD_Write_DATA8(0x00); 
     86                  LCD_Write_DATA8(0x34); 
   \                     ??CrossCallReturnLabel_25:
   \   000030   7C403400     MOV.B   #0x34, R12
   \   000034   ........     CALLA   #LCD_Write_DATA8
     87                  LCD_Write_DATA8(0x02); 
   \   000038   6C43         MOV.B   #0x2, R12
   \   00003A   ........     CALLA   #LCD_Write_DATA8
     88          
     89                  LCD_Write_REG(0xCF);  
   \   00003E   7C40CF00     MOV.B   #0xcf, R12
   \   000042   ........     CALLA   #?Subroutine0
     90                  LCD_Write_DATA8(0x00); 
     91                  LCD_Write_DATA8(0XC1); 
   \                     ??CrossCallReturnLabel_22:
   \   000046   7C40C100     MOV.B   #0xc1, R12
   \   00004A   ........     CALLA   #LCD_Write_DATA8
     92                  LCD_Write_DATA8(0X30); 
   \   00004E   7C403000     MOV.B   #0x30, R12
   \   000052   ........     CALLA   #LCD_Write_DATA8
     93           
     94                  LCD_Write_REG(0xE8);  
   \   000056   7C40E800     MOV.B   #0xe8, R12
   \   00005A   ........     CALLA   #LCD_Write_REG
     95                  LCD_Write_DATA8(0x85); 
   \   00005E   7C408500     MOV.B   #0x85, R12
   \   000062   ........     CALLA   #?Subroutine4
     96                  LCD_Write_DATA8(0x00); 
     97                  LCD_Write_DATA8(0x78); 
   \                     ??CrossCallReturnLabel_24:
   \   000066   7C407800     MOV.B   #0x78, R12
   \   00006A   ........     CALLA   #LCD_Write_DATA8
     98           
     99                  LCD_Write_REG(0xEA);  
   \   00006E   7C40EA00     MOV.B   #0xea, R12
   \   000072   ........     CALLA   #?Subroutine0
    100                  LCD_Write_DATA8(0x00); 
    101                  LCD_Write_DATA8(0x00); 
   \                     ??CrossCallReturnLabel_21:
   \   000076   4C43         MOV.B   #0x0, R12
   \   000078   ........     CALLA   #LCD_Write_DATA8
    102           
    103                  LCD_Write_REG(0xED);  
   \   00007C   7C40ED00     MOV.B   #0xed, R12
   \   000080   ........     CALLA   #LCD_Write_REG
    104                  LCD_Write_DATA8(0x64); 
   \   000084   7C406400     MOV.B   #0x64, R12
   \   000088   ........     CALLA   #?Subroutine2
    105                  LCD_Write_DATA8(0x03); 
    106                  LCD_Write_DATA8(0X12); 
   \                     ??CrossCallReturnLabel_5:
   \   00008C   7C401200     MOV.B   #0x12, R12
   \   000090   ........     CALLA   #LCD_Write_DATA8
    107                  LCD_Write_DATA8(0X81); 
   \   000094   7C408100     MOV.B   #0x81, R12
   \   000098   ........     CALLA   #LCD_Write_DATA8
    108          
    109                  LCD_Write_REG(0xF7);  
   \   00009C   7C40F700     MOV.B   #0xf7, R12
   \   0000A0   ........     CALLA   #LCD_Write_REG
    110                  LCD_Write_DATA8(0x20); 
   \   0000A4   7C402000     MOV.B   #0x20, R12
   \   0000A8   ........     CALLA   #LCD_Write_DATA8
    111            
    112                  LCD_Write_REG(0xC0);    //Power control 
   \   0000AC   7C40C000     MOV.B   #0xc0, R12
   \   0000B0   ........     CALLA   #LCD_Write_REG
    113                  LCD_Write_DATA8(0x23);   //VRH[5:0] 
   \   0000B4   7C402300     MOV.B   #0x23, R12
   \   0000B8   ........     CALLA   #LCD_Write_DATA8
    114           
    115                  LCD_Write_REG(0xC1);    //Power control 
   \   0000BC   7C40C100     MOV.B   #0xc1, R12
   \   0000C0   ........     CALLA   #LCD_Write_REG
    116                  LCD_Write_DATA8(0x10);   //SAP[2:0];BT[3:0] 
   \   0000C4   7C401000     MOV.B   #0x10, R12
   \   0000C8   ........     CALLA   #LCD_Write_DATA8
    117           
    118                  LCD_Write_REG(0xC5);    //VCM control 
   \   0000CC   7C40C500     MOV.B   #0xc5, R12
   \   0000D0   ........     CALLA   #LCD_Write_REG
    119                  LCD_Write_DATA8(0x3e); //¶Ô±È¶Èµ÷½Ú
   \   0000D4   7C403E00     MOV.B   #0x3e, R12
   \   0000D8   ........     CALLA   #LCD_Write_DATA8
    120                  LCD_Write_DATA8(0x28); 
   \   0000DC   7C402800     MOV.B   #0x28, R12
   \   0000E0   ........     CALLA   #LCD_Write_DATA8
    121           
    122                  LCD_Write_REG(0xC7);    //VCM control2 
   \   0000E4   7C40C700     MOV.B   #0xc7, R12
   \   0000E8   ........     CALLA   #LCD_Write_REG
    123                  LCD_Write_DATA8(0x86);  //--
   \   0000EC   7C408600     MOV.B   #0x86, R12
   \   0000F0   ........     CALLA   #LCD_Write_DATA8
    124           
    125                  LCD_Write_REG(0x36);    // Memory Access Control 
   \   0000F4   7C403600     MOV.B   #0x36, R12
   \   0000F8   ........     CALLA   #LCD_Write_REG
    126                  LCD_Write_DATA8(0x48); //C8	   //48 68ÊúÆÁ//28 E8 ºáÆÁ
   \   0000FC   7C404800     MOV.B   #0x48, R12
   \   000100   ........     CALLA   #LCD_Write_DATA8
    127          
    128                  LCD_Write_REG(0x3A);    
   \   000104   7C403A00     MOV.B   #0x3a, R12
   \   000108   ........     CALLA   #LCD_Write_REG
    129                  LCD_Write_DATA8(0x55); 
   \   00010C   7C405500     MOV.B   #0x55, R12
   \   000110   ........     CALLA   #LCD_Write_DATA8
    130          
    131                  LCD_Write_REG(0xB1);    
   \   000114   7C40B100     MOV.B   #0xb1, R12
   \   000118   ........     CALLA   #?Subroutine0
    132                  LCD_Write_DATA8(0x00);  
    133                  LCD_Write_DATA8(0x18); 
   \                     ??CrossCallReturnLabel_20:
   \   00011C   7C401800     MOV.B   #0x18, R12
   \   000120   ........     CALLA   #LCD_Write_DATA8
    134           
    135                  LCD_Write_REG(0xB6);    // Display Function Control 
   \   000124   7C40B600     MOV.B   #0xb6, R12
   \   000128   ........     CALLA   #LCD_Write_REG
    136                  LCD_Write_DATA8(0x08); 
   \   00012C   7C42         MOV.B   #0x8, R12
   \   00012E   ........     CALLA   #LCD_Write_DATA8
    137                  LCD_Write_DATA8(0x82);
   \   000132   7C408200     MOV.B   #0x82, R12
   \   000136   ........     CALLA   #LCD_Write_DATA8
    138                  LCD_Write_DATA8(0x27);  
   \   00013A   7C402700     MOV.B   #0x27, R12
   \   00013E   ........     CALLA   #LCD_Write_DATA8
    139           
    140                  LCD_Write_REG(0xF2);    // 3Gamma Function Disable 
   \   000142   7C40F200     MOV.B   #0xf2, R12
   \   000146   ........     CALLA   #?Subroutine0
    141                  LCD_Write_DATA8(0x00); 
    142           
    143                  LCD_Write_REG(0x26);    //Gamma curve selected 
   \                     ??CrossCallReturnLabel_19:
   \   00014A   7C402600     MOV.B   #0x26, R12
   \   00014E   ........     CALLA   #LCD_Write_REG
    144                  LCD_Write_DATA8(0x01); 
   \   000152   5C43         MOV.B   #0x1, R12
   \   000154   ........     CALLA   #LCD_Write_DATA8
    145           
    146                  LCD_Write_REG(0xE0);    //Set Gamma 
   \   000158   7C40E000     MOV.B   #0xe0, R12
   \   00015C   ........     CALLA   #LCD_Write_REG
    147                  LCD_Write_DATA8(0x0F); 
   \   000160   7C400F00     MOV.B   #0xf, R12
   \   000164   ........     CALLA   #?Subroutine3
    148                  LCD_Write_DATA8(0x31); 
    149                  LCD_Write_DATA8(0x2B); 
   \                     ??CrossCallReturnLabel_8:
   \   000168   7C402B00     MOV.B   #0x2b, R12
   \   00016C   ........     CALLA   #LCD_Write_DATA8
    150                  LCD_Write_DATA8(0x0C); 
   \   000170   7C400C00     MOV.B   #0xc, R12
   \   000174   ........     CALLA   #LCD_Write_DATA8
    151                  LCD_Write_DATA8(0x0E); 
   \   000178   ........     CALLA   #?Subroutine6
    152                  LCD_Write_DATA8(0x08); 
   \                     ??CrossCallReturnLabel_13:
   \   00017C   7C42         MOV.B   #0x8, R12
   \   00017E   ........     CALLA   #LCD_Write_DATA8
    153                  LCD_Write_DATA8(0x4E); 
   \   000182   7C404E00     MOV.B   #0x4e, R12
   \   000186   ........     CALLA   #LCD_Write_DATA8
    154                  LCD_Write_DATA8(0xF1); 
   \   00018A   7C40F100     MOV.B   #0xf1, R12
   \   00018E   ........     CALLA   #LCD_Write_DATA8
    155                  LCD_Write_DATA8(0x37); 
   \   000192   7C403700     MOV.B   #0x37, R12
   \   000196   ........     CALLA   #LCD_Write_DATA8
    156                  LCD_Write_DATA8(0x07); 
   \   00019A   7C400700     MOV.B   #0x7, R12
   \   00019E   ........     CALLA   #LCD_Write_DATA8
    157                  LCD_Write_DATA8(0x10); 
   \   0001A2   7C401000     MOV.B   #0x10, R12
   \   0001A6   ........     CALLA   #?Subroutine2
    158                  LCD_Write_DATA8(0x03); 
    159                  LCD_Write_DATA8(0x0E); 
   \                     ??CrossCallReturnLabel_4:
   \   0001AA   ........     CALLA   #?Subroutine6
    160                  LCD_Write_DATA8(0x09); 
   \                     ??CrossCallReturnLabel_12:
   \   0001AE   7C400900     MOV.B   #0x9, R12
   \   0001B2   ........     CALLA   #?Subroutine4
    161                  LCD_Write_DATA8(0x00); 
    162          
    163                  LCD_Write_REG(0XE1);    //Set Gamma 
   \                     ??CrossCallReturnLabel_23:
   \   0001B6   7C40E100     MOV.B   #0xe1, R12
   \   0001BA   ........     CALLA   #?Subroutine0
    164                  LCD_Write_DATA8(0x00); 
    165                  LCD_Write_DATA8(0x0E); 
   \                     ??CrossCallReturnLabel_18:
   \   0001BE   ........     CALLA   #?Subroutine6
    166                  LCD_Write_DATA8(0x14); 
   \                     ??CrossCallReturnLabel_11:
   \   0001C2   7C401400     MOV.B   #0x14, R12
   \   0001C6   ........     CALLA   #?Subroutine2
    167                  LCD_Write_DATA8(0x03); 
    168                  LCD_Write_DATA8(0x11); 
   \                     ??CrossCallReturnLabel_3:
   \   0001CA   7C401100     MOV.B   #0x11, R12
   \   0001CE   ........     CALLA   #LCD_Write_DATA8
    169                  LCD_Write_DATA8(0x07); 
   \   0001D2   7C400700     MOV.B   #0x7, R12
   \   0001D6   ........     CALLA   #?Subroutine3
    170                  LCD_Write_DATA8(0x31); 
    171                  LCD_Write_DATA8(0xC1); 
   \                     ??CrossCallReturnLabel_7:
   \   0001DA   7C40C100     MOV.B   #0xc1, R12
   \   0001DE   ........     CALLA   #LCD_Write_DATA8
    172                  LCD_Write_DATA8(0x48); 
   \   0001E2   7C404800     MOV.B   #0x48, R12
   \   0001E6   ........     CALLA   #LCD_Write_DATA8
    173                  LCD_Write_DATA8(0x08); 
   \   0001EA   7C42         MOV.B   #0x8, R12
   \   0001EC   ........     CALLA   #?Subroutine5
    174                  LCD_Write_DATA8(0x0F); 
    175                  LCD_Write_DATA8(0x0C); 
   \                     ??CrossCallReturnLabel_10:
   \   0001F0   7C400C00     MOV.B   #0xc, R12
   \   0001F4   ........     CALLA   #?Subroutine3
    176                  LCD_Write_DATA8(0x31); 
    177                  LCD_Write_DATA8(0x36); 
   \                     ??CrossCallReturnLabel_6:
   \   0001F8   7C403600     MOV.B   #0x36, R12
   \   0001FC   ........     CALLA   #?Subroutine5
    178                  LCD_Write_DATA8(0x0F); 
    179           
    180                  LCD_Write_REG(0x11);    //Exit Sleep 
   \                     ??CrossCallReturnLabel_9:
   \   000200   7C401100     MOV.B   #0x11, R12
   \   000204   ........     CALLA   #LCD_Write_REG
    181                  delay_ms(10); 
   \   000208   ........     CALLA   #?Subroutine1
    182          				
    183                  LCD_Write_REG(0x29);    //Display on 
   \                     ??CrossCallReturnLabel_0:
   \   00020C   7C402900     MOV.B   #0x29, R12
   \   000210   ........     CALLA   #LCD_Write_REG
    184                  LCD_Write_REG(0x2c); 
   \   000214   7C402C00     MOV.B   #0x2c, R12
   \   000218   ........     BRA     #LCD_Write_REG
   \   00021C                REQUIRE _A_PAOUT_L
    185          }

   \                                 In  segment CODE, align 2
   \                     ?Subroutine6:
   \   000000   7C400E00     MOV.B   #0xe, R12
   \   000004   ........     BRA     #LCD_Write_DATA8

   \                                 In  segment CODE, align 2
   \                     ?Subroutine5:
   \   000000   ........     CALLA   #LCD_Write_DATA8
   \   000004   7C400F00     MOV.B   #0xf, R12
   \   000008   ........     BRA     #LCD_Write_DATA8

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   000000   ........     CALLA   #LCD_Write_DATA8
   \   000004                REQUIRE ?Subroutine8
   \   000004                // Fall through to label ?Subroutine8

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   000000   4C43         MOV.B   #0x0, R12
   \   000002   ........     BRA     #LCD_Write_DATA8

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   000000   ........     CALLA   #LCD_Write_DATA8
   \   000004   7C403100     MOV.B   #0x31, R12
   \   000008   ........     BRA     #LCD_Write_DATA8

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   000000   ........     CALLA   #LCD_Write_DATA8
   \   000004   7C400300     MOV.B   #0x3, R12
   \   000008   ........     BRA     #LCD_Write_DATA8

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   3C401027     MOV.W   #0x2710, R12
   \   000004   0D43         MOV.W   #0x0, R13
   \   000006   ........     BRA     #delay_us

   \                                 In  segment CODE, align 2
   \                     ?Subroutine0:
   \   000000   ........     CALLA   #LCD_Write_REG
   \   000004   ....         JMP     ?Subroutine8
   \   000006   0343         NOP
    186          
    187          
    188          
    189          
    190          
    191          
    192          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
       4  LCD_Init
             4 -> LCD_Port_Init
             4 -> LCD_Write_DATA8
             4 -> LCD_Write_REG
             4 -> delay_us
       8  LCD_Port_Init
             8 -> GPIO_MultiBits_Init
             8 -> SPI_Master_Init
      20  LCD_SetPos
            20 -> LCD_Write_DATA8
            20 -> LCD_Write_REG
       4  LCD_Writ_Bus
             4 -> SPI_SendReadByte
       8  LCD_Write_DATA16
             8 -> LCD_Writ_Bus
       4  LCD_Write_DATA8
             4 -> LCD_Writ_Bus
       4  LCD_Write_REG
             4 -> LCD_Writ_Bus
       8  LCD_Write_REG_DATA
             8 -> LCD_Write_DATA16
             8 -> LCD_Write_REG


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?Subroutine0
      10  ?Subroutine1
      12  ?Subroutine2
      12  ?Subroutine3
       4  ?Subroutine4
      12  ?Subroutine5
       8  ?Subroutine6
       6  ?Subroutine7
       6  ?Subroutine8
     540  LCD_Init
      60  LCD_Port_Init
      86  LCD_SetPos
      22  LCD_Writ_Bus
      24  LCD_Write_DATA16
       8  LCD_Write_DATA8
       8  LCD_Write_REG
      18  LCD_Write_REG_DATA
       2  _A_PAOUT_L

 
 844 bytes in segment CODE
   2 bytes in segment DATA16_AN
 
 844 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
