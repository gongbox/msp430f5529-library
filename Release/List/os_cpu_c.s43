///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      06/Jun/2016  16:42:29 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\PORT\os_cpu_c.c                     /
//    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\PORT\os_cpu_c.c -D NDEBUG -D        /
//                     RAM_VECTOR -lC C:\Users\615\Desktop\MSP430\MSP430F5529 /
//                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\List\ -lA               /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\          /
//                     -D__MSP430F5529__ -e --double=32 --dlib_config         /
//                     "D:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº /
//                     ¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MS /
//                     P430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                 /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                   /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I      /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\12864\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\oled\ -I C:\Users\615\Desktop\MSP430\ /
//                     MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc /
//                     \ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\ /
//                     C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\src\ -I                  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\inc\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\src\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\ -I                           /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\2.2TFT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\delay\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\ -I C:\Users\615\Desktop\MSP430\MSP430F /
//                     5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\inc\ -I              /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\src\ -I C:\Users\615\Desktop\MSP430\MSP /
//                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\ -I                /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\User\USER\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\App\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\ -I                         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\        /
//                     --core=430X --data_model=large -Oh --multiplier=32     /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\os_cpu_c.s43                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME os_cpu_c

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC OSISRStkPtr
        PUBLIC OSInitHookBegin
        FUNCTION OSInitHookBegin,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSInitHookEnd
        FUNCTION OSInitHookEnd,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTCBInitHook
        FUNCTION OSTCBInitHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTaskCreateHook
        FUNCTION OSTaskCreateHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTaskDelHook
        FUNCTION OSTaskDelHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTaskIdleHook
        FUNCTION OSTaskIdleHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTaskStatHook
        FUNCTION OSTaskStatHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTaskStkInit
        FUNCTION OSTaskStkInit,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSTaskSwHook
        FUNCTION OSTaskSwHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC OSTimeTickHook
        FUNCTION OSTimeTickHook,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
// C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\PORT\os_cpu_c.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/OS-II
//    4 *                                          The Real-Time Kernel
//    5 *
//    6 *                              (c) Copyright 2002, Micrium, Inc., Weston, FL
//    7 *                                           All Rights Reserved
//    8 *
//    9 *                                                TI MSP430
//   10 *
//   11 *
//   12 * File         : OS_CPU_C.C
//   13 * By           : Jian Chen (yenger@hotmail.com)
//   14 *                Jean J. Labrosse
//   15 * Compiler     : IAR System Embedded Workbench for TI MSP430 V1.26A
//   16 *********************************************************************************************************
//   17 */
//   18 
//   19 #define  OS_CPU_GLOBALS
//   20 #include "ucos_ii.h"

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
// unsigned int *__data20 OSISRStkPtr
OSISRStkPtr:
        DS8 4
//   21 
//   22 /*
//   23 *********************************************************************************************************
//   24 *                                       OS INITIALIZATION HOOK
//   25 *                                            (BEGINNING)
//   26 *
//   27 * Description: This function is called by OSInit() at the beginning of OSInit().
//   28 *
//   29 * Arguments  : none
//   30 *
//   31 * Note(s)    : 1) Interrupts should be disabled during this call.
//   32 *********************************************************************************************************
//   33 */
//   34 #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   35 void  OSInitHookBegin (void)
OSInitHookBegin:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function OSInitHookBegin
//   36 {
//   37 }
        RETA
          CFI EndBlock cfiBlock0
//   38 #endif
//   39 
//   40 /*
//   41 *********************************************************************************************************
//   42 *                                       OS INITIALIZATION HOOK
//   43 *                                               (END)
//   44 *
//   45 * Description: This function is called by OSInit() at the end of OSInit().
//   46 *
//   47 * Arguments  : none
//   48 *
//   49 * Note(s)    : 1) Interrupts should be disabled during this call.
//   50 *********************************************************************************************************
//   51 */
//   52 #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   53 void  OSInitHookEnd (void)
OSInitHookEnd:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function OSInitHookEnd
//   54 {
//   55 }
        RETA
          CFI EndBlock cfiBlock1
//   56 #endif
//   57 
//   58 /*$PAGE*/
//   59 /*
//   60 *********************************************************************************************************
//   61 *                                          TASK CREATION HOOK
//   62 *
//   63 * Description: This function is called when a task is created.
//   64 *
//   65 * Arguments  : ptcb   is a pointer to the task control block of the task being created.
//   66 *
//   67 * Note(s)    : 1) Interrupts are disabled during this call.
//   68 *********************************************************************************************************
//   69 */
//   70 #if OS_CPU_HOOKS_EN > 0 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   71 void  OSTaskCreateHook (OS_TCB *ptcb)
OSTaskCreateHook:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function OSTaskCreateHook
//   72 {
//   73     ptcb = ptcb;                       /* Prevent compiler warning                                     */
//   74 }
        RETA
          CFI EndBlock cfiBlock2
//   75 #endif
//   76 
//   77 
//   78 /*
//   79 *********************************************************************************************************
//   80 *                                           TASK DELETION HOOK
//   81 *
//   82 * Description: This function is called when a task is deleted.
//   83 *
//   84 * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
//   85 *
//   86 * Note(s)    : 1) Interrupts are disabled during this call.
//   87 *********************************************************************************************************
//   88 */
//   89 #if OS_CPU_HOOKS_EN > 0 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   90 void  OSTaskDelHook (OS_TCB *ptcb)
OSTaskDelHook:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function OSTaskDelHook
//   91 {
//   92     ptcb = ptcb;                       /* Prevent compiler warning                                     */
//   93 }
        RETA
          CFI EndBlock cfiBlock3
//   94 #endif
//   95 
//   96 /*
//   97 *********************************************************************************************************
//   98 *                                             IDLE TASK HOOK
//   99 *
//  100 * Description: This function is called by the idle task.  This hook has been added to allow you to do  
//  101 *              such things as STOP the CPU to conserve power.
//  102 *
//  103 * Arguments  : none
//  104 *
//  105 * Note(s)    : 1) Interrupts are enabled during this call.
//  106 *********************************************************************************************************
//  107 */
//  108 #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  109 void  OSTaskIdleHook (void)
OSTaskIdleHook:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function OSTaskIdleHook
//  110 {
//  111 #if 0
//  112     LPM0;                                         /* Enter low power mode                              */
//  113 #endif    
//  114 }
        RETA
          CFI EndBlock cfiBlock4
//  115 #endif
//  116 
//  117 /*
//  118 *********************************************************************************************************
//  119 *                                           STATISTIC TASK HOOK
//  120 *
//  121 * Description: This function is called every second by uC/OS-II's statistics task.  This allows your 
//  122 *              application to add functionality to the statistics task.
//  123 *
//  124 * Arguments  : none
//  125 *********************************************************************************************************
//  126 */
//  127 
//  128 #if OS_CPU_HOOKS_EN > 0 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  129 void  OSTaskStatHook (void)
OSTaskStatHook:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function OSTaskStatHook
//  130 {
//  131 }
        RETA
          CFI EndBlock cfiBlock5
//  132 #endif
//  133 
//  134 /*$PAGE*/
//  135 /*
//  136 *********************************************************************************************************
//  137 *                                        INITIALIZE A TASK'S STACK
//  138 *
//  139 * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
//  140 *              stack frame of the task being created.  This function is highly processor specific.
//  141 *
//  142 * Arguments  : task          is a pointer to the task code
//  143 *
//  144 *              pdata         is a pointer to a user supplied data area that will be passed to the task
//  145 *                            when the task first executes.
//  146 *
//  147 *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
//  148 *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then 
//  149 *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
//  150 *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
//  151 *                            of the stack.
//  152 *
//  153 *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
//  154 *                            (see uCOS_II.H for OS_TASK_OPT_???).
//  155 *
//  156 * Returns    : Always returns the location of the new top-of-stack' once the processor registers have
//  157 *              been placed on the stack in the proper order.
//  158 *
//  159 * Note(s)    : The register passing convention for the IAR compiler is that the LEFTMOST two parameters
//  160 *              are passed in registers:
//  161 *              1st parameter:  R12 for a 16-bit value or,  R13:R12 for a 32-bit value
//  162 *              2nd parameter:  R14 for a 16-bit value or,  R15:R14 for a 32-bit value
//  163 *
//  164 *              OSTaskStkInit() thus needs to place 'p_arg' in R12 since when the task is started, 'p_arg'
//  165 *              is the FIRST argument of the task declaration:
//  166 *
//  167 *                 void  Task (void *p_arg)
//  168 *                 {
//  169 *                 }
//  170 *********************************************************************************************************
//  171 */
//  172 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  173 OS_STK  *OSTaskStkInit (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT16U opt)
OSTaskStkInit:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function OSTaskStkInit
//  174 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
//  175     INT16U  *top;
//  176 
//  177     opt    = opt;                 
//  178     top    = (INT16U *)ptos;
//  179     top--;  
        MOVA    #0xffffe, R15
        ADDA    R15, R14
//  180     *top = (INT16U)(((INT32U)task)&0xffff);//*top = ((INT32U)task)&0xffff;
        MOV.W   R12, 0(R14)
//  181     top--;
        ADDA    R15, R14
//  182     *top = (INT16U) ( ( ((INT32U)task) & 0x000f0000 ) >>4 );
//  183     *top |=  (INT16U)0x0008;                        //ÈÎÎñ³õÊ¼ÅäÖÃÎªÔÊÐíÖÐ¶Ï
        PUSHM.A #0x1, R12
          CFI CFA SP+16
        POPM.W  #0x2, R11
          CFI CFA SP+12
        RRUM.W  #0x1, R11
        RRC.W   R10
        RRA.W   R11
        RRC.W   R10
        RRA.W   R11
        RRC.W   R10
        RRA.W   R11
        RRC.W   R10
        AND.W   #0xf000, R10
        BIS.W   #0x8, R10
        MOV.W   R10, 0(R14)
//  184     top--;
        ADDA    R15, R14
//  185     //
//  186     *top = (INT16U)0x0404;
        MOV.W   #0x404, 0(R14)
//  187     top--;
        ADDA    R15, R14
//  188     *top = (INT16U)0x0505;
        MOV.W   #0x505, 0(R14)
//  189     top--;
        ADDA    R15, R14
//  190     *top = (INT16U)0x0606;
        MOV.W   #0x606, 0(R14)
//  191     top--;
        ADDA    R15, R14
//  192     *top = (INT16U)0x0707;
        MOV.W   #0x707, 0(R14)
//  193     top--;
        ADDA    R15, R14
//  194     *top = (INT16U)0x0808;
        MOV.W   #0x808, 0(R14)
//  195     top--;
        ADDA    R15, R14
//  196     *top = (INT16U)0x0909;
        MOV.W   #0x909, 0(R14)
//  197     top--;
        ADDA    R15, R14
//  198     *top = (INT16U)0x1010;
        MOV.W   #0x1010, 0(R14)
//  199     top--;
        ADDA    R15, R14
//  200     *top = (INT16U)0x1111;
        MOV.W   #0x1111, 0(R14)
//  201     top--;
        ADDA    R15, R14
//  202     *top = (INT16U)p_arg;                          /* Pass 'p_arg' through register R12                 */
        MOV.W   R13, 0(R14)
//  203     top--;
        ADDA    R15, R14
//  204     *top = (INT16U)0x1313;
        MOV.W   #0x1313, 0(R14)
//  205     top--;
        ADDA    R15, R14
//  206     *top = (INT16U)0x1414;                         
        MOV.W   #0x1414, 0(R14)
//  207     top--;
        ADDA    R15, R14
//  208     *top = (INT16U)0x1515;
        MOV.W   #0x1515, 0(R14)
//  209     return ((OS_STK *)top);    
        MOVA    R14, R12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock6
//  210 }
//  211 
//  212 /*$PAGE*/
//  213 /*
//  214 *********************************************************************************************************
//  215 *                                           TASK SWITCH HOOK
//  216 *
//  217 * Description: This function is called when a task switch is performed.  This allows you to perform other
//  218 *              operations during a context switch.
//  219 *
//  220 * Arguments  : none
//  221 *
//  222 * Note(s)    : 1) Interrupts are disabled during this call.
//  223 *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
//  224 *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the 
//  225 *                 task being switched out (i.e. the preempted task).
//  226 *********************************************************************************************************
//  227 */
//  228 #if OS_CPU_HOOKS_EN > 0

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  229 void  OSTaskSwHook (void)
OSTaskSwHook:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function OSTaskSwHook
//  230 {
//  231 }
        RETA
          CFI EndBlock cfiBlock7
//  232 #endif
//  233 
//  234 /*
//  235 *********************************************************************************************************
//  236 *                                           OSTCBInit() HOOK
//  237 *
//  238 * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
//  239 *
//  240 * Arguments  : ptcb    is a pointer to the TCB of the task being created.
//  241 *
//  242 * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
//  243 *********************************************************************************************************
//  244 */
//  245 #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  246 void  OSTCBInitHook (OS_TCB *ptcb)
OSTCBInitHook:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function OSTCBInitHook
//  247 {
//  248     ptcb = ptcb;                                           /* Prevent Compiler warning                 */
//  249 }
        RETA
          CFI EndBlock cfiBlock8
//  250 #endif
//  251 
//  252 
//  253 /*
//  254 *********************************************************************************************************
//  255 *                                               TICK HOOK
//  256 *
//  257 * Description: This function is called every tick.
//  258 *
//  259 * Arguments  : none
//  260 *
//  261 * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
//  262 *********************************************************************************************************
//  263 */
//  264 #if OS_CPU_HOOKS_EN > 0

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  265 void  OSTimeTickHook (void)
OSTimeTickHook:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function OSTimeTickHook
//  266 {
//  267 }
        RETA
          CFI EndBlock cfiBlock9

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  268 #endif
// 
// 162 bytes in segment CODE
//   4 bytes in segment DATA20_Z
// 
// 162 bytes of CODE memory
//   4 bytes of DATA memory
//
//Errors: none
//Warnings: 12
