###############################################################################
#                                                                             #
#                                                       06/Jun/2016  16:42:19 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  large                                                   #
#    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\oled\OLED.c                             #
#    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\oled\OLED.c -D NDEBUG -D RAM_VECTOR     #
#                     -lC C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C° #
#                     æ\¹¤³ÌÄ£°å\Release\List\ -lA                            #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\             #
#                     -D__MSP430F5529__ -e --double=32 --dlib_config          #
#                     "D:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Ê #
#                     ý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MSP4 #
#                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                   #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                     #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\12864\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\oled\ -I      #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\inc\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\src\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\src\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LCD_API\ -I                             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\2.2TFT\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\delay\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\System\inc\ -I C:\Users\615\Desktop\MSP430\MSP43 #
#                     0F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\src\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\User\ -I C:\Users\615\Desktop\MSP430\MSP430F5529 #
#                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\USER\ -I                    #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\uCOSII\App\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\    #
#                     -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ #
#                     \¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CORE\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP430 #
#                     F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\           #
#                     --core=430X --data_model=large -Oh --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\OLED.lst                            #
#    Object file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\Obj\OLED.r43                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\oled\OLED.c
      1          #include "OLED.h"

   \                                 In  segment DATA16_AN, at 0x222
   \   union <unnamed> __data16 _A_PBOUT_L
   \                     _A_PBOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x262
   \   union <unnamed> __data16 _A_PDOUT_L
   \                     _A_PDOUT_L:
   \   000000                DS8 2
      2          #include "OLED_FONT.h"

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const ASCII_6X8[95][6]
   \                     ASCII_6X8:
   \   000000   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 0, 0, 0, 0, 7, 0, 7, 0, 0, 20, 127
   \            0000002F0000
   \            000007000700
   \            00147F      
   \   000015   147F1400242A DC8 20, 127, 20, 0, 36, 42, 127, 42, 18, 0, 98, 100, 8, 19, 35, 0, 54
   \            7F2A12006264
   \            0813230036  
   \   000026   495522500000 DC8 73, 85, 34, 80, 0, 0, 5, 3, 0, 0, 0, 0, 28, 34, 65, 0, 0, 0, 65, 34
   \            050300000000
   \            1C2241000000
   \            4122        
   \   00003A   1C000014083E DC8 28, 0, 0, 20, 8, 62, 8, 20, 0, 8, 8, 62, 8, 8, 0, 0, 0, 160, 96, 0
   \            08140008083E
   \            0808000000A0
   \            6000        
   \   00004E   000808080808 DC8 0, 8, 8, 8, 8, 8, 0, 0, 96, 96, 0, 0, 0, 32, 16, 8, 4, 2, 0, 62, 81
   \            000060600000
   \            002010080402
   \            003E51      
   \   000063   49453E000042 DC8 73, 69, 62, 0, 0, 66, 127, 64, 0, 0, 66, 97, 81, 73, 70, 0, 33, 65
   \            7F4000004261
   \            514946002141
   \   000075   454B31001814 DC8 69, 75, 49, 0, 24, 20, 18, 127, 16, 0, 39, 69, 69, 69, 57, 0, 60
   \            127F10002745
   \            454539003C  
   \   000086   4A4949300001 DC8 74, 73, 73, 48, 0, 1, 113, 9, 5, 3, 0, 54, 73, 73, 73, 54, 0, 6, 73
   \            710905030036
   \            494949360006
   \            49          
   \   000099   49291E000036 DC8 73, 41, 30, 0, 0, 54, 54, 0, 0, 0, 0, 86, 54, 0, 0, 0, 8, 20, 34
   \            360000000056
   \            360000000814
   \            22          
   \   0000AC   410000141414 DC8 65, 0, 0, 20, 20, 20, 20, 20, 0, 0, 65, 34, 20, 8, 0, 2, 1, 81, 9
   \            141400004122
   \            140800020151
   \            09          
   \   0000BF   060032495951 DC8 6, 0, 50, 73, 89, 81, 62, 0, 124, 18, 17, 18, 124, 0, 127, 73, 73
   \            3E007C121112
   \            7C007F4949  
   \   0000D0   4936003E4141 DC8 73, 54, 0, 62, 65, 65, 65, 34, 0, 127, 65, 65, 34, 28, 0, 127, 73
   \            4122007F4141
   \            221C007F49  
   \   0000E1   494941007F09 DC8 73, 73, 65, 0, 127, 9, 9, 9, 1, 0, 62, 65, 73, 73, 122, 0, 127, 8
   \            090901003E41
   \            49497A007F08
   \   0000F3   08087F000041 DC8 8, 8, 127, 0, 0, 65, 127, 65, 0, 0, 32, 64, 65, 63, 1, 0, 127, 8
   \            7F4100002040
   \            413F01007F08
   \   000105   142241007F40 DC8 20, 34, 65, 0, 127, 64, 64, 64, 64, 0, 127, 2, 12, 2, 127, 0, 127
   \            404040007F02
   \            0C027F007F  
   \   000116   0408107F003E DC8 4, 8, 16, 127, 0, 62, 65, 65, 65, 62, 0, 127, 9, 9, 9, 6, 0, 62, 65
   \            4141413E007F
   \            09090906003E
   \            41          
   \   000129   51215E007F09 DC8 81, 33, 94, 0, 127, 9, 25, 41, 70, 0, 70, 73, 73, 73, 49, 0, 1, 1
   \            192946004649
   \            494931000101
   \   00013B   7F0101003F40 DC8 127, 1, 1, 0, 63, 64, 64, 64, 63, 0, 31, 32, 64, 32, 31, 0, 63, 64
   \            40403F001F20
   \            40201F003F40
   \   00014D   38403F006314 DC8 56, 64, 63, 0, 99, 20, 8, 20, 99, 0, 7, 8, 112, 8, 7, 0, 97, 81, 73
   \            081463000708
   \            700807006151
   \            49          
   \   000160   454300007F41 DC8 69, 67, 0, 0, 127, 65, 65, 0, 0, 85, 42, 85, 42, 85, 0, 0, 65, 65
   \            410000552A55
   \            2A5500004141
   \   000172   7F0000040201 DC8 127, 0, 0, 4, 2, 1, 2, 4, 0, 64, 64, 64, 64, 64, 0, 0, 1, 2, 4, 0
   \            020400404040
   \            404000000102
   \            0400        
   \   000186   002054545478 DC8 0, 32, 84, 84, 84, 120, 0, 127, 72, 68, 68, 56, 0, 56, 68, 68, 68
   \            007F48444438
   \            0038444444  
   \   000197   200038444448 DC8 32, 0, 56, 68, 68, 72, 127, 0, 56, 84, 84, 84, 24, 0, 8, 126, 9, 1
   \            7F0038545454
   \            1800087E0901
   \   0001A9   020018A4A4A4 DC8 2, 0, 24, 164, 164, 164, 124, 0, 127, 8, 4, 4, 120, 0, 0, 68, 125
   \            7C007F080404
   \            780000447D  
   \   0001BA   400000408084 DC8 64, 0, 0, 64, 128, 132, 125, 0, 0, 127, 16, 40, 68, 0, 0, 0, 65
   \            7D00007F1028
   \            4400000041  
   \   0001CB   7F4000007C04 DC8 127, 64, 0, 0, 124, 4, 24, 4, 120, 0, 124, 8, 4, 4, 120, 0, 56, 68
   \            180478007C08
   \            040478003844
   \   0001DD   44443800FC24 DC8 68, 68, 56, 0, 252, 36, 36, 36, 24, 0, 24, 36, 36, 24, 252, 0, 124
   \            242418001824
   \            2418FC007C  
   \   0001EE   080404080048 DC8 8, 4, 4, 8, 0, 72, 84, 84, 84, 32, 0, 4, 63, 68, 64, 32, 0, 60, 64
   \            545454200004
   \            3F444020003C
   \            40          
   \   000201   40207C001C20 DC8 64, 32, 124, 0, 28, 32, 64, 32, 28, 0, 60, 64, 48, 64, 60, 0, 68
   \            40201C003C40
   \            30403C0044  
   \   000212   28102844001C DC8 40, 16, 40, 68, 0, 28, 160, 160, 160, 124, 0, 68, 100, 84, 76, 68
   \            A0A0A07C0044
   \            64544C44    
   \   000222   000008764200 DC8 0, 0, 8, 118, 66, 0, 0, 0, 0, 126, 0, 0, 0, 0, 66, 118, 8, 0, 0, 4
   \            0000007E0000
   \            000042760800
   \            0004        
   \   000236   02040201     DC8 2, 4, 2, 1

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const ASCII_8X16[95][16]
   \                     ASCII_8X16:
   \   000000   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 0, 0
   \            000000000000
   \            000000000000
   \            00F80000    
   \   000016   000000000033 DC8 0, 0, 0, 0, 0, 51, 48, 0, 0, 0, 0, 16, 12, 6, 16, 12, 6, 0, 0, 0, 0
   \            300000000010
   \            0C06100C0600
   \            000000      
   \   00002B   000000000040 DC8 0, 0, 0, 0, 0, 64, 192, 120, 64, 192, 120, 64, 0, 4, 63, 4, 4, 63
   \            C07840C07840
   \            00043F04043F
   \   00003D   040400007088 DC8 4, 4, 0, 0, 112, 136, 252, 8, 48, 0, 0, 0, 24, 32, 255, 33, 30, 0
   \            FC0830000000
   \            1820FF211E00
   \   00004F   00F008F000E0 DC8 0, 240, 8, 240, 0, 224, 24, 0, 0, 0, 33, 28, 3, 30, 33, 30, 0, 0
   \            18000000211C
   \            031E211E0000
   \   000061   F00888700000 DC8 240, 8, 136, 112, 0, 0, 0, 30, 33, 35, 36, 25, 39, 33, 16, 16, 22
   \            001E21232419
   \            2721101016  
   \   000072   0E0000000000 DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 24, 4, 2
   \            000000000000
   \            0000000000E0
   \            180402      
   \   000087   000000000718 DC8 0, 0, 0, 0, 7, 24, 32, 64, 0, 0, 2, 4, 24, 224, 0, 0, 0, 0, 64, 32
   \            204000000204
   \            18E000000000
   \            4020        
   \   00009B   180700000040 DC8 24, 7, 0, 0, 0, 64, 64, 128, 240, 128, 64, 64, 0, 2, 2, 1, 15, 1, 2
   \            4080F0804040
   \            000202010F01
   \            02          
   \   0000AE   0200000000F0 DC8 2, 0, 0, 0, 0, 240, 0, 0, 0, 0, 1, 1, 1, 31, 1, 1, 1, 0, 0, 0, 0, 0
   \            000000000101
   \            011F01010100
   \            00000000    
   \   0000C4   0000000080B0 DC8 0, 0, 0, 0, 128, 176, 112, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            700000000000
   \            000000000000
   \            000000      
   \   0000D9   010101010101 DC8 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 48, 0, 0, 0, 0
   \            010000000000
   \            000000003030
   \            00000000    
   \   0000EF   000000000080 DC8 0, 0, 0, 0, 0, 128, 96, 24, 4, 0, 96, 24, 6, 1, 0, 0, 0, 0, 224, 16
   \            601804006018
   \            060100000000
   \            E010        
   \   000103   080810E00000 DC8 8, 8, 16, 224, 0, 0, 15, 16, 32, 32, 16, 15, 0, 0, 16, 16, 248, 0
   \            0F102020100F
   \            00001010F800
   \   000115   000000002020 DC8 0, 0, 0, 0, 32, 32, 63, 32, 32, 0, 0, 0, 112, 8, 8, 8, 136, 112, 0
   \            3F2020000000
   \            700808088870
   \            00          
   \   000128   003028242221 DC8 0, 48, 40, 36, 34, 33, 48, 0, 0, 48, 8, 136, 136, 72, 48, 0, 0, 24
   \            300000300888
   \            884830000018
   \   00013A   202020110E00 DC8 32, 32, 32, 17, 14, 0, 0, 0, 192, 32, 16, 248, 0, 0, 0, 7, 4, 36
   \            0000C02010F8
   \            000000070424
   \   00014C   243F240000F8 DC8 36, 63, 36, 0, 0, 248, 8, 136, 136, 8, 8, 0, 0, 25, 33, 32, 32, 17
   \            088888080800
   \            001921202011
   \   00015E   0E0000E01088 DC8 14, 0, 0, 224, 16, 136, 136, 24, 0, 0, 0, 15, 17, 32, 32, 17, 14, 0
   \            88180000000F
   \            112020110E00
   \   000170   00380808C838 DC8 0, 56, 8, 8, 200, 56, 8, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 112, 136, 8
   \            08000000003F
   \            000000000070
   \            8808        
   \   000184   08887000001C DC8 8, 136, 112, 0, 0, 28, 34, 33, 33, 34, 28, 0, 0, 224, 16, 8, 8, 16
   \            222121221C00
   \            00E010080810
   \   000196   E00000003122 DC8 224, 0, 0, 0, 49, 34, 34, 17, 15, 0, 0, 0, 0, 192, 192, 0, 0, 0, 0
   \            22110F000000
   \            00C0C0000000
   \            00          
   \   0001A9   000030300000 DC8 0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 128, 0, 0, 0, 0, 0, 0, 128, 96, 0
   \            000000008000
   \            000000000080
   \            6000        
   \   0001BD   000000000080 DC8 0, 0, 0, 0, 0, 128, 64, 32, 16, 8, 0, 0, 1, 2, 4, 8, 16, 32, 0, 64
   \            402010080000
   \            010204081020
   \            0040        
   \   0001D1   404040404040 DC8 64, 64, 64, 64, 64, 64, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 8, 16, 32, 64
   \            000404040404
   \            040400000810
   \            2040        
   \   0001E5   800000002010 DC8 128, 0, 0, 0, 32, 16, 8, 4, 2, 1, 0, 0, 112, 72, 8, 8, 8, 240, 0, 0
   \            080402010000
   \            7048080808F0
   \            0000        
   \   0001F9   000030360100 DC8 0, 0, 48, 54, 1, 0, 0, 192, 48, 200, 40, 232, 16, 224, 0, 7, 24, 39
   \            00C030C828E8
   \            10E000071827
   \   00020B   2423140B0000 DC8 36, 35, 20, 11, 0, 0, 0, 192, 56, 224, 0, 0, 0, 32, 60, 35, 2, 2
   \            00C038E00000
   \            00203C230202
   \   00021D   27382008F888 DC8 39, 56, 32, 8, 248, 136, 136, 136, 112, 0, 0, 32, 63, 32, 32, 32
   \            888870000020
   \            3F202020    
   \   00022D   110E00C03008 DC8 17, 14, 0, 192, 48, 8, 8, 8, 8, 56, 0, 7, 24, 32, 32, 32, 16, 8, 0
   \            080808380007
   \            182020201008
   \            00          
   \   000240   08F808080810 DC8 8, 248, 8, 8, 8, 16, 224, 0, 32, 63, 32, 32, 32, 16, 15, 0, 8, 248
   \            E000203F2020
   \            20100F0008F8
   \   000252   8888E8081000 DC8 136, 136, 232, 8, 16, 0, 32, 63, 32, 32, 35, 32, 24, 0, 8, 248, 136
   \            203F20202320
   \            180008F888  
   \   000263   88E808100020 DC8 136, 232, 8, 16, 0, 32, 63, 32, 0, 3, 0, 0, 0, 192, 48, 8, 8, 8, 56
   \            3F2000030000
   \            00C030080808
   \            38          
   \   000276   000007182020 DC8 0, 0, 7, 24, 32, 32, 34, 30, 2, 0, 8, 248, 8, 0, 0, 8, 248, 8, 32
   \            221E020008F8
   \            08000008F808
   \            20          
   \   000289   3F210101213F DC8 63, 33, 1, 1, 33, 63, 32, 0, 8, 8, 248, 8, 8, 0, 0, 0, 32, 32, 63
   \            20000808F808
   \            080000002020
   \            3F          
   \   00029C   202000000000 DC8 32, 32, 0, 0, 0, 0, 8, 8, 248, 8, 8, 0, 192, 128, 128, 128, 127, 0
   \            0808F8080800
   \            C08080807F00
   \   0002AE   000008F888C0 DC8 0, 0, 8, 248, 136, 192, 40, 24, 8, 0, 32, 63, 32, 1, 38, 56, 32, 0
   \            28180800203F
   \            200126382000
   \   0002C0   08F808000000 DC8 8, 248, 8, 0, 0, 0, 0, 0, 32, 63, 32, 32, 32, 32, 48, 0, 8, 248
   \            0000203F2020
   \            2020300008F8
   \   0002D2   F800F8F80800 DC8 248, 0, 248, 248, 8, 0, 32, 63, 0, 63, 0, 63, 32, 0, 8, 248, 48
   \            203F003F003F
   \            200008F830  
   \   0002E3   C00008F80820 DC8 192, 0, 8, 248, 8, 32, 63, 32, 0, 7, 24, 63, 0, 224, 16, 8, 8, 8
   \            3F200007183F
   \            00E010080808
   \   0002F5   10E0000F1020 DC8 16, 224, 0, 15, 16, 32, 32, 32, 16, 15, 0, 8, 248, 8, 8, 8, 8, 240
   \            2020100F0008
   \            F808080808F0
   \   000307   00203F210101 DC8 0, 32, 63, 33, 1, 1, 1, 0, 0, 224, 16, 8, 8, 8, 16, 224, 0, 15, 24
   \            010000E01008
   \            080810E0000F
   \            18          
   \   00031A   242438504F00 DC8 36, 36, 56, 80, 79, 0, 8, 248, 136, 136, 136, 136, 112, 0, 32, 63
   \            08F888888888
   \            7000203F    
   \   00032A   2000030C3020 DC8 32, 0, 3, 12, 48, 32, 0, 112, 136, 8, 8, 8, 56, 0, 0, 56, 32, 33
   \            007088080808
   \            380000382021
   \   00033C   21221C001808 DC8 33, 34, 28, 0, 24, 8, 8, 248, 8, 8, 24, 0, 0, 0, 32, 63, 32, 0, 0
   \            08F808081800
   \            0000203F2000
   \            00          
   \   00034F   0008F8080000 DC8 0, 8, 248, 8, 0, 0, 8, 248, 8, 0, 31, 32, 32, 32, 32, 31, 0, 8, 120
   \            08F808001F20
   \            2020201F0008
   \            78          
   \   000362   880000C83808 DC8 136, 0, 0, 200, 56, 8, 0, 0, 7, 56, 14, 1, 0, 0, 248, 8, 0, 248, 0
   \            000007380E01
   \            0000F80800F8
   \            00          
   \   000375   08F800033C07 DC8 8, 248, 0, 3, 60, 7, 0, 7, 60, 3, 0, 8, 24, 104, 128, 128, 104, 24
   \            00073C030008
   \            186880806818
   \   000387   0820302C0303 DC8 8, 32, 48, 44, 3, 3, 44, 48, 32, 8, 56, 200, 0, 200, 56, 8, 0, 0, 0
   \            2C30200838C8
   \            00C838080000
   \            00          
   \   00039A   203F20000000 DC8 32, 63, 32, 0, 0, 0, 16, 8, 8, 8, 200, 56, 8, 0, 32, 56, 38, 33, 32
   \            10080808C838
   \            080020382621
   \            20          
   \   0003AD   201800000000 DC8 32, 24, 0, 0, 0, 0, 254, 2, 2, 2, 0, 0, 0, 0, 127, 64, 64, 64, 0, 0
   \            FE0202020000
   \            00007F404040
   \            0000        
   \   0003C1   0C30C0000000 DC8 12, 48, 192, 0, 0, 0, 0, 0, 0, 0, 1, 6, 56, 192, 0, 0, 2, 2, 2, 254
   \            000000000106
   \            38C000000202
   \            02FE        
   \   0003D5   000000004040 DC8 0, 0, 0, 0, 64, 64, 64, 127, 0, 0, 0, 0, 0, 4, 2, 2, 2, 4, 0, 0, 0
   \            407F00000000
   \            000402020204
   \            000000      
   \   0003EA   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 128, 128, 128, 128
   \            000000000000
   \            000080808080
   \            80          
   \   0003FD   808080000202 DC8 128, 128, 128, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            040000000000
   \            000000000000
   \            000000      
   \   000412   808080800000 DC8 128, 128, 128, 128, 0, 0, 0, 25, 36, 34, 34, 34, 63, 32, 8, 248, 0
   \            001924222222
   \            3F2008F800  
   \   000423   808000000000 DC8 128, 128, 0, 0, 0, 0, 63, 17, 32, 32, 17, 14, 0, 0, 0, 0, 128, 128
   \            3F112020110E
   \            000000008080
   \   000435   800000000E11 DC8 128, 0, 0, 0, 14, 17, 32, 32, 32, 17, 0, 0, 0, 0, 128, 128, 136
   \            202020110000
   \            0000808088  
   \   000446   F800000E1120 DC8 248, 0, 0, 14, 17, 32, 32, 16, 63, 32, 0, 0, 128, 128, 128, 128, 0
   \            20103F200000
   \            8080808000  
   \   000457   00001F222222 DC8 0, 0, 31, 34, 34, 34, 34, 19, 0, 0, 128, 128, 240, 136, 136, 136
   \            221300008080
   \            F0888888    
   \   000467   180020203F20 DC8 24, 0, 32, 32, 63, 32, 32, 0, 0, 0, 0, 128, 128, 128, 128, 128, 0
   \            200000000080
   \            8080808000  
   \   000478   006B94949493 DC8 0, 107, 148, 148, 148, 147, 96, 0, 8, 248, 0, 128, 128, 128, 0, 0
   \            600008F80080
   \            80800000    
   \   000488   203F21000020 DC8 32, 63, 33, 0, 0, 32, 63, 32, 0, 128, 152, 152, 0, 0, 0, 0, 0, 32
   \            3F2000809898
   \            000000000020
   \   00049A   203F20200000 DC8 32, 63, 32, 32, 0, 0, 0, 0, 0, 128, 152, 152, 0, 0, 0, 192, 128
   \            000000809898
   \            000000C080  
   \   0004AB   80807F000008 DC8 128, 128, 127, 0, 0, 8, 248, 0, 0, 128, 128, 128, 0, 32, 63, 36, 2
   \            F80000808080
   \            00203F2402  
   \   0004BC   2D3020000008 DC8 45, 48, 32, 0, 0, 8, 8, 248, 0, 0, 0, 0, 0, 32, 32, 63, 32, 32, 0
   \            08F800000000
   \            0020203F2020
   \            00          
   \   0004CF   008080808080 DC8 0, 128, 128, 128, 128, 128, 128, 128, 0, 32, 63, 32, 0, 63, 32, 0
   \            808000203F20
   \            003F2000    
   \   0004DF   3F8080008080 DC8 63, 128, 128, 0, 128, 128, 128, 0, 0, 32, 63, 33, 0, 0, 32, 63, 32
   \            800000203F21
   \            0000203F20  
   \   0004F0   000080808080 DC8 0, 0, 128, 128, 128, 128, 0, 0, 0, 31, 32, 32, 32, 32, 31, 0, 128
   \            0000001F2020
   \            20201F0080  
   \   000501   800080800000 DC8 128, 0, 128, 128, 0, 0, 0, 128, 255, 161, 32, 32, 17, 14, 0, 0, 0
   \            0080FFA12020
   \            110E000000  
   \   000512   008080808000 DC8 0, 128, 128, 128, 128, 0, 0, 14, 17, 32, 32, 160, 255, 128, 128
   \            000E112020A0
   \            FF8080      
   \   000521   808000808080 DC8 128, 128, 0, 128, 128, 128, 0, 32, 32, 63, 33, 32, 0, 1, 0, 0, 0
   \            0020203F2120
   \            0001000000  
   \   000532   808080808000 DC8 128, 128, 128, 128, 128, 0, 0, 51, 36, 36, 36, 36, 25, 0, 0, 128
   \            003324242424
   \            19000080    
   \   000542   80E080800000 DC8 128, 224, 128, 128, 0, 0, 0, 0, 0, 31, 32, 32, 0, 0, 128, 128, 0, 0
   \            0000001F2020
   \            000080800000
   \   000554   00808000001F DC8 0, 128, 128, 0, 0, 31, 32, 32, 32, 16, 63, 32, 128, 128, 128, 0, 0
   \            202020103F20
   \            8080800000  
   \   000565   80808000010E DC8 128, 128, 128, 0, 1, 14, 48, 8, 6, 1, 0, 128, 128, 0, 128, 0, 128
   \            300806010080
   \            8000800080  
   \   000576   80800F300C03 DC8 128, 128, 15, 48, 12, 3, 12, 48, 15, 0, 0, 128, 128, 0, 128, 128
   \            0C300F000080
   \            80008080    
   \   000586   80000020312E DC8 128, 0, 0, 32, 49, 46, 14, 49, 32, 0, 128, 128, 128, 0, 0, 128, 128
   \            0E3120008080
   \            8000008080  
   \   000597   8080818E7018 DC8 128, 128, 129, 142, 112, 24, 6, 1, 0, 0, 128, 128, 128, 128, 128
   \            060100008080
   \            808080      
   \   0005A6   80000021302C DC8 128, 0, 0, 33, 48, 44, 34, 33, 48, 0, 0, 0, 0, 0, 128, 124, 2, 2, 0
   \            222130000000
   \            0000807C0202
   \            00          
   \   0005B9   000000003F40 DC8 0, 0, 0, 0, 63, 64, 64, 0, 0, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 255
   \            4000000000FF
   \            000000000000
   \            00FF        
   \   0005CD   000000000202 DC8 0, 0, 0, 0, 2, 2, 124, 128, 0, 0, 0, 0, 64, 64, 63, 0, 0, 0, 0, 0
   \            7C8000000000
   \            40403F000000
   \            0000        
   \   0005E1   060101020204 DC8 6, 1, 1, 2, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0
   \            040000000000
   \            000000      
      3          #include "OLED_FONT_CHINESE.h"

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const FONT_CHINESE[576]
   \                     FONT_CHINESE:
   \   000000   80808080FF80 DC8 128, 128, 128, 128, 255, 128, 128, 160, 144, 136, 132, 130, 128
   \            80A090888482
   \            80          
   \   00000D   808000000000 DC8 128, 128, 0, 0, 0, 0, 0, 255, 64, 33, 18, 4, 8, 16, 32, 32, 64, 64
   \            00FF40211204
   \            081020204040
   \   00001F   0080908C8484 DC8 0, 128, 144, 140, 132, 132, 132, 245, 134, 132, 132, 132, 132, 148
   \            84F586848484
   \            8494        
   \   00002D   8C8000008080 DC8 140, 128, 0, 0, 128, 128, 132, 70, 73, 40, 16, 16, 44, 35, 64, 128
   \            844649281010
   \            2C234080    
   \   00003D   000000202020 DC8 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 255, 32, 32, 32, 32, 32, 32
   \            20202020FF20
   \            2020202020  
   \   00004E   200080804020 DC8 32, 0, 128, 128, 64, 32, 16, 12, 3, 0, 3, 12, 16, 32, 64, 128, 128
   \            100C0300030C
   \            1020408080  
   \   00005F   004030119690 DC8 0, 64, 48, 17, 150, 144, 144, 145, 150, 144, 144, 152, 20, 19, 80
   \            909196909098
   \            141350      
   \   00006E   300004040404 DC8 48, 0, 4, 4, 4, 4, 4, 68, 132, 126, 6, 5, 4, 4, 4, 4, 4, 0, 0, 128
   \            0444847E0605
   \            040404040400
   \            0080        
   \   000082   60F807000424 DC8 96, 248, 7, 0, 4, 36, 36, 37, 38, 36, 36, 36, 4, 0, 1, 0, 0, 255, 0
   \            242526242424
   \            0400010000FF
   \            00          
   \   000095   0000F9494949 DC8 0, 0, 249, 73, 73, 73, 73, 73, 249, 0, 0, 0, 0, 0, 252, 84, 84, 86
   \            4949F9000000
   \            0000FC545456
   \   0000A7   55545454FC00 DC8 85, 84, 84, 84, 252, 0, 0, 0, 0, 64, 48, 0, 3, 57, 65, 65, 69, 89
   \            000000403000
   \            033941414559
   \   0000B9   414173000830 DC8 65, 65, 115, 0, 8, 48, 0, 0, 4, 4, 4, 4, 4, 4, 252, 4, 4, 4, 4, 4
   \            000004040404
   \            0404FC040404
   \            0404        
   \   0000CD   040000202020 DC8 4, 0, 0, 32, 32, 32, 32, 32, 32, 32, 63, 32, 32, 32, 32, 32, 32, 32
   \            202020203F20
   \            202020202020
   \   0000DF   002424A4FE23 DC8 0, 36, 36, 164, 254, 35, 34, 0, 62, 34, 34, 34, 34, 34, 62, 0, 0, 8
   \            22003E222222
   \            22223E000008
   \   0000F1   0601FF010640 DC8 6, 1, 255, 1, 6, 64, 73, 73, 73, 127, 73, 73, 73, 65, 0, 64, 48, 17
   \            4949497F4949
   \            494100403011
   \   000103   969090919690 DC8 150, 144, 144, 145, 150, 144, 144, 152, 20, 19, 80, 48, 0, 4, 4, 4
   \            909814135030
   \            00040404    
   \   000113   040444847E06 DC8 4, 4, 68, 132, 126, 6, 5, 4, 4, 4, 4, 4, 0, 0, 254, 34, 90, 134, 16
   \            050404040404
   \            0000FE225A86
   \            10          
   \   000126   0C2424252624 DC8 12, 36, 36, 37, 38, 36, 36, 20, 12, 0, 0, 255, 4, 8, 7, 128, 65, 49
   \            24140C0000FF
   \            040807804131
   \   000138   0F01013F4141 DC8 15, 1, 1, 63, 65, 65, 113, 0, 0, 0, 0, 136, 136, 136, 136, 136, 136
   \            710000000088
   \            8888888888  
   \   000149   8C848C080000 DC8 140, 132, 140, 8, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \            000010101010
   \            1010101010  
   \   00015A   101010100000 DC8 16, 16, 16, 16, 0, 0, 0, 224, 226, 254, 252, 240, 80, 208, 254, 254
   \            00E0E2FEFCF0
   \            50D0FEFE    
   \   00016A   F2F050000000 DC8 242, 240, 80, 0, 0, 0, 0, 7, 7, 71, 103, 119, 58, 31, 7, 7, 29, 57
   \            000707476777
   \            3A1F07071D39
   \   00017C   616140000040 DC8 97, 97, 64, 0, 0, 64, 64, 64, 64, 64, 240, 254, 222, 64, 64, 96, 96
   \            40404040F0FE
   \            DE40406060  
   \   00018D   400000004060 DC8 64, 0, 0, 0, 64, 96, 48, 28, 15, 7, 1, 3, 15, 60, 48, 32, 32, 32, 0
   \            301C0F070103
   \            0F3C30202020
   \            00          
   \   0001A0   004070B4BCB8 DC8 0, 64, 112, 180, 188, 184, 166, 174, 184, 252, 254, 114, 112, 16, 0
   \            A6AEB8FCFE72
   \            701000      
   \   0001AF   000004040414 DC8 0, 0, 4, 4, 4, 20, 52, 39, 63, 63, 2, 2, 2, 2, 2, 0, 0, 0, 8, 8, 8
   \            34273F3F0202
   \            020202000000
   \            080808      
   \   0001C4   0C0C04FCFCE0 DC8 12, 12, 4, 252, 252, 224, 184, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            B89800000000
   \            000000000000
   \            00          
   \   0001D7   030F1C38303C DC8 3, 15, 28, 56, 48, 60, 60, 0, 0, 0, 0, 0, 254, 254, 164, 180, 252
   \            3C0000000000
   \            FEFEA4B4FC  
   \   0001E8   FCF4FEFE0000 DC8 252, 244, 254, 254, 0, 0, 0, 0, 0, 16, 28, 14, 14, 28, 59, 55, 38
   \            000000101C0E
   \            0E1C3B3726  
   \   0001F9   383A260E0C00 DC8 56, 58, 38, 14, 12, 0, 0, 0, 128, 128, 128, 128, 128, 254, 254, 146
   \            000080808080
   \            80FEFE92    
   \   000209   90D85840C000 DC8 144, 216, 88, 64, 192, 0, 0, 0, 0, 0, 0, 0, 0, 63, 63, 3, 2, 6, 4
   \            000000000000
   \            003F3F030206
   \            04          
   \   00021C   000000000000 DC8 0, 0, 0, 0, 0, 0, 192, 224, 248, 158, 22, 242, 240, 144, 112, 120
   \            C0E0F89E16F2
   \            F0907078    
   \   00022C   181000000011 DC8 24, 16, 0, 0, 0, 17, 25, 14, 7, 19, 49, 63, 63, 1, 3, 7, 6, 4, 0, 0
   \            190E0713313F
   \            3F0103070604
   \            0000        
      4          #include <stdarg.h>
      5          #include <string.h>
      6          #include <stdio.h>
      7          #include "i2c.h"
      8          typedef enum
      9          {
     10            CMD   =0u,//ÃüÁîÊ±ÎªµÍµçÆ½
     11            DATA  =1u,//Êý¾ÝÊ±Îª¸ßµçÆ½
     12          }CMD_OR_DATA;
     13          //IO¿Ú»òSPI³õÊ¼»¯³ÌÐò

   \                                 In  segment CODE, align 2, keep-with-next
     14          void OLED_Port_Init(void)
   \                     OLED_Port_Init:
     15          {
     16            I2C_MasterInit (I2C1, 0x00,100KHZ);            //³õÊ¼»¯I2CÄ£¿é£¨Ö÷»úÄ£Ê½£©
   \   000000   3E40A086     MOV.W   #0x86a0, R14
   \   000004   1F43         MOV.W   #0x1, R15
   \   000006   0D43         MOV.W   #0x0, R13
   \   000008   7C400300     MOV.B   #0x3, R12
   \   00000C   ........     CALLA   #I2C_MasterInit
     17          #if(OLEDHardWareSPI)
     18            OLEDHardWareSPI_Init();
     19          #else
     20            GPIO_Init(OLED_SCL_Port,OLED_SCL_Pin,GPO);
   \   000010   2E43         MOV.W   #0x2, R14
   \   000012   7D42         MOV.B   #0x8, R13
   \   000014   7C400300     MOV.B   #0x3, R12
   \   000018   ........     CALLA   #GPIO_MultiBits_Init
     21            GPIO_Init(OLED_SDA_Port,OLED_SDA_Pin,GPO);
   \   00001C   2E43         MOV.W   #0x2, R14
   \   00001E   5D43         MOV.B   #0x1, R13
   \   000020   7C400300     MOV.B   #0x3, R12
   \   000024   ........     CALLA   #GPIO_MultiBits_Init
     22          #endif
     23            GPIO_Init(OLED_RST_Port,OLED_RST_Pin,GPO);
   \   000028   2E43         MOV.W   #0x2, R14
   \   00002A   7D408000     MOV.B   #0x80, R13
   \   00002E   6C43         MOV.B   #0x2, R12
   \   000030   ........     CALLA   #GPIO_MultiBits_Init
     24            GPIO_Init(OLED_DC_Port,OLED_DC_Pin,GPO);
   \   000034   2E43         MOV.W   #0x2, R14
   \   000036   6D42         MOV.B   #0x4, R13
   \   000038   7C400700     MOV.B   #0x7, R12
   \   00003C   ........     BRA     #GPIO_MultiBits_Init
     25          }
     26          /********************************************************************
     27          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´Ò»¸ö×Ö½ÚÊý¾Ý
     28          º¯ÊýÃû³Æ:OLED_write_byte
     29          ÐÎÊ½²ÎÊý:DCvalue:Ö¸Áî,È¡Öµ·¶Î§:0/1 0ÊÇÃüÁî,1ÊÇÊý¾Ý  data:8Î»Êý¾Ý
     30          ·µ»ØÖµ:  ¿Õ
     31          ÐÞ¸ÄÈË:  CTGU-GB2013
     32          ÐÞ¸ÄÊ±¼ä:2014/5/12
     33          *********************************************************************/

   \                                 In  segment CODE, align 2
     34          void OLED_write_byte(CMD_OR_DATA DCvalue,uint8_t data)
   \                     OLED_write_byte:
     35          {
   \   000000   0A14         PUSHM.A #0x1, R10
     36            OLED_DC = DCvalue; //DCvalueÊÇ1DC¾ÍÎª1 ²»ÊÇ1DC¾ÍÎª0  1ÊÇÊý¾Ý 0ÊÇÃü?
   \   000002   5CB3         BIT.B   #0x1, R12
   \   000004   032C         JC      ??OLED_write_byte_1
   \   000006   E2C26302     BIC.B   #0x4, &0x263
   \   00000A   023C         JMP     ??OLED_write_byte_2
   \                     ??OLED_write_byte_1:
   \   00000C   E2D26302     BIS.B   #0x4, &0x263
     37          #if(OLEDHardWareSPI)
     38            OLEDHardWareSPI_SendByte(data);
     39          #else
     40            OLED_SCL=0;
   \                     ??OLED_write_byte_2:
   \   000010   3F402302     MOV.W   #0x223, R15
   \   000014   0E4F         MOV.W   R15, R14
   \   000016   FEC20000     BIC.B   #0x8, 0(R14)
     41            for(uint8_t i=0;i<8;i++)
   \   00001A   7E42         MOV.B   #0x8, R14
     42            {
     43              OLED_SDA=(data&0x80)==0x80 ? 1 : 0;//ÉÏÉýÑØ·¢ËÍÊý¾Ý
   \                     ??OLED_write_byte_0:
   \   00001C   7DB08000     BIT.B   #0x80, R13
   \   000020   4C7C         SUBC.B  R12, R12
   \   000022   5C53         ADD.B   #0x1, R12
     44              OLED_SCL=1;
     45              OLED_SCL=0;		
   \   000024   FFF0F6000000 AND.B   #0xf6, 0(R15)
   \   00002A   7A40FE00     MOV.B   #0xfe, R10
   \   00002E   6AFF         AND.B   @R15, R10
   \   000030   4ADC         BIS.B   R12, R10
   \   000032   CF4A0000     MOV.B   R10, 0(R15)
     46              data<<=1;    
   \   000036   4D5D         RLA.B   R13
     47            }
   \   000038   7E53         ADD.B   #0xff, R14
   \   00003A   F023         JNE     ??OLED_write_byte_0
     48          #endif
     49          }
   \   00003C   0A16         POPM.A  #0x1, R10
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_PDOUT_L
   \   000040                REQUIRE _A_PBOUT_L
     50          /********************************************************************
     51          º¯Êý¹¦ÄÜ:ÉèÖÃOLEDµÄÏÔÊ¾Î»ÖÃ
     52          º¯ÊýÃû³Æ:OLED_set_pos
     53          ÐÎÊ½²ÎÊý:y ÐÐ È¡Öµ·¶Î§:0-7  x ÁÐ È¡Öµ·¶Î§0-127
     54          ·µ»ØÖµ:  ¿Õ
     55          ÐÞ¸ÄÈË:  kofee
     56          ÐÞ¸ÄÊ±¼ä:2014/5/12
     57          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine24:
   \   000000   4C43         MOV.B   #0x0, R12
   \   000002   ........     BRA     #OLED_write_byte

   \                                 In  segment CODE, align 2
     58          void OLED_set_pos(uint8_t y,uint8_t x)
   \                     OLED_set_pos:
     59          {
   \   000000   0A14         PUSHM.A #0x1, R10
   \   000002   4A4D         MOV.B   R13, R10
     60              OLED_write_byte(CMD,0xB0+y);            //ÉèÖÃÐÐ        
   \   000004   7C50B000     ADD.B   #0xb0, R12
   \   000008   4D4C         MOV.B   R12, R13
   \   00000A   ........     CALLA   #?Subroutine24
     61              OLED_write_byte(CMD,x&0x0F);            //ÉèÖÃÄ³ÁÐµÄµÍËÄÎ»µØÖ· 0x00-0x0F
   \                     ??CrossCallReturnLabel_60:
   \   00000E   4D4A         MOV.B   R10, R13
   \   000010   7DF00F00     AND.B   #0xf, R13
   \   000014   ........     CALLA   #?Subroutine24
     62              OLED_write_byte(CMD,(x>>4)|0x10);       //ÉèÖÃÄ³ÁÐµÄ¸ßËÄÎ»µØÖ· 0x10-0x1F
   \                     ??CrossCallReturnLabel_59:
   \   000018                RPT     #0x4
   \   000018   43194A10     RRUX.B  R10
   \   00001C   7AD01000     BIS.B   #0x10, R10
   \   000020   4D4A         MOV.B   R10, R13
   \   000022   ........     CALLA   #?Subroutine24
     63          }
   \                     ??CrossCallReturnLabel_58:
   \   000026   0A16         POPM.A  #0x1, R10
   \   000028   1001         RETA
     64          /********************************************************************
     65          º¯Êý¹¦ÄÜ:ÓÃÄ³Ò»Êý¾ÝÌî³äOLEDµÄRAMÇø
     66          º¯ÊýÃû³Æ:OLED_fill_ram
     67          ÐÎÊ½²ÎÊý:data:ÒªÌî³äµÄÊý¾Ý
     68          ·µ»ØÖµ:  ¿Õ
     69          ÐÞ¸ÄÈË:  kofee
     70          ÐÞ¸ÄÊ±¼ä:2014/5/12
     71          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine8:
   \   000000   4D43         MOV.B   #0x0, R13
   \   000002                REQUIRE ?Subroutine24
   \   000002                // Fall through to label ?Subroutine24

   \                                 In  segment CODE, align 2
   \                     ?Subroutine7:
   \   000000   7D50B000     ADD.B   #0xb0, R13
   \   000004   ........     BRA     #?Subroutine24

   \                                 In  segment CODE, align 2
     72          void OLED_fill_ram(uint8_t data)
   \                     OLED_fill_ram:
     73          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   4A4C         MOV.B   R12, R10
     74              uint8_t y,x;
     75              for(y=0;y<8;y++)
   \   000004   4B43         MOV.B   #0x0, R11
     76              {
     77                  OLED_write_byte(CMD,0xB0+y);  //Ã¿ÐÐ
   \                     ??OLED_fill_ram_1:
   \   000006   4D4B         MOV.B   R11, R13
   \   000008   ........     CALLA   #?Subroutine7
     78                  OLED_write_byte(CMD,0x00);      //µÚÒ»ÁÐ
   \                     ??CrossCallReturnLabel_35:
   \   00000C   ........     CALLA   #?Subroutine8
     79                  OLED_write_byte(CMD,0x10);
   \                     ??CrossCallReturnLabel_63:
   \   000010   7D401000     MOV.B   #0x10, R13
   \   000014   ........     CALLA   #?Subroutine24
     80                  {
     81                      for(x=0;x<128;x++)
   \                     ??CrossCallReturnLabel_61:
   \   000018   78408000     MOV.B   #0x80, R8
     82                      {
     83                          OLED_write_byte(DATA,data);  //Ð´ÈëÊý¾Ý
   \                     ??OLED_fill_ram_0:
   \   00001C   4D4A         MOV.B   R10, R13
   \   00001E   ........     CALLA   #??Subroutine9_0
     84                      }
   \                     ??CrossCallReturnLabel_75:
   \   000022   7853         ADD.B   #0xff, R8
   \   000024   FB23         JNE     ??OLED_fill_ram_0
     85                  }
     86              }
   \   000026   5B53         ADD.B   #0x1, R11
   \   000028   7B92         CMP.B   #0x8, R11
   \   00002A   ED2B         JNC     ??OLED_fill_ram_1
     87          }
   \   00002C   3816         POPM.A  #0x4, R11
   \   00002E   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ??Subroutine9_0:
   \   000000   5C43         MOV.B   #0x1, R12
   \   000002   ........     BRA     #OLED_write_byte
     88          /********************************************************************
     89          º¯Êý¹¦ÄÜ:ÓÃÄ³Ò»Êý¾ÝÌî³äOLEDµÄÄ³Ò»ÇøÓò
     90          º¯ÊýÃû³Æ:OLED_fill_part
     91          ÐÎÊ½²ÎÊý:data:ÒªÌî³äµÄÊý¾Ý
     92          ·µ»ØÖµ:  ¿Õ
     93          ÐÞ¸ÄÈË:  CTGU-GB2013
     94          ÐÞ¸ÄÊ±¼ä:2014/5/12
     95          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     96          void OLED_fill_part(uint8_t xs,uint8_t ys,uint8_t xe,uint8_t ye,uint8_t data)
   \                     OLED_fill_part:
     97          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   494C         MOV.B   R12, R9
   \   000004   4A4E         MOV.B   R14, R10
   \   000006   4B4F         MOV.B   R15, R11
     98              uint8_t y,x;
     99              for(y=ys;y<ye;y++)
   \   000008   484D         MOV.B   R13, R8
   \   00000A   4D9F         CMP.B   R15, R13
   \   00000C   1F2C         JC      ??OLED_fill_part_2
   \   00000E   444C         MOV.B   R12, R4
   \   000010                RPT     #0x4
   \   000010   43194410     RRUX.B  R4
   \   000014   74D01000     BIS.B   #0x10, R4
   \   000018   464C         MOV.B   R12, R6
   \   00001A   76F00F00     AND.B   #0xf, R6
   \   00001E   55412400     MOV.B   0x24(SP), R5
    100              {
    101                  OLED_write_byte(CMD,0xB0+y);  //Ã¿ÐÐ
   \                     ??OLED_fill_part_1:
   \   000022   4D48         MOV.B   R8, R13
   \   000024   ........     CALLA   #?Subroutine7
    102                  OLED_write_byte(CMD,xs&0x0F);            //ÉèÖÃÄ³ÁÐµÄµÍËÄÎ»µØÖ· 0x00-0x0F
   \                     ??CrossCallReturnLabel_34:
   \   000028   4D46         MOV.B   R6, R13
   \   00002A   ........     CALLA   #?Subroutine24
    103                  OLED_write_byte(CMD,(xs>>4)|0x10);       //ÉèÖÃÄ³ÁÐµÄ¸ßËÄÎ»µØÖ· 0x10-0x1F
   \                     ??CrossCallReturnLabel_37:
   \   00002E   4D44         MOV.B   R4, R13
   \   000030   ........     CALLA   #?Subroutine24
    104                  for(x=xs;x<xe;x++)
   \                     ??CrossCallReturnLabel_36:
   \   000034   4749         MOV.B   R9, R7
   \   000036   499A         CMP.B   R10, R9
   \   000038   062C         JC      ??OLED_fill_part_3
    105                  {
    106                    OLED_write_byte(DATA,data);  //Ð´ÈëÊý¾Ý
   \                     ??OLED_fill_part_0:
   \   00003A   4D45         MOV.B   R5, R13
   \   00003C   ........     CALLA   #??Subroutine9_0
    107                  }
   \                     ??CrossCallReturnLabel_64:
   \   000040   5753         ADD.B   #0x1, R7
   \   000042   479A         CMP.B   R10, R7
   \   000044   FA2B         JNC     ??OLED_fill_part_0
    108              }
   \                     ??OLED_fill_part_3:
   \   000046   5853         ADD.B   #0x1, R8
   \   000048   489B         CMP.B   R11, R8
   \   00004A   EB2B         JNC     ??OLED_fill_part_1
    109          }
   \                     ??OLED_fill_part_2:
   \   00004C   7416         POPM.A  #0x8, R11
   \   00004E   1001         RETA
    110          /********************************************************************
    111          º¯Êý¹¦ÄÜ:³õÊ¼»¯OLED
    112          º¯ÊýÃû³Æ:OLED_init
    113          ÐÎÊ½²ÎÊý:¿Õ
    114          ·µ»ØÖµ:  ¿Õ
    115          ÐÞ¸ÄÈË:  kofee
    116          ÐÞ¸ÄÊ±¼ä:2014/5/12
    117          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    118          void OLED_Init(void)
   \                     OLED_Init:
    119          {
    120            uint16_t i;
    121              OLED_Port_Init();
   \   000000   ........     CALLA   #OLED_Port_Init
    122              // OLED_CS  = 0;  //Ð¾Æ¬Ñ¡ÔñÊäÈë µÍµçÆ½Ê¹ÄÜ
    123              OLED_RST=0;  //¸´Î»ÐÅºÅ,²»¿ÉÊ¡ÂÔ
    124              for(i=0;i<10000;i++);
    125              OLED_RST=1;
   \   000004   F2D080002202 BIS.B   #0x80, &0x222
    126              
    127             
    128              OLED_write_byte(CMD,0xA8);    //set Multiplex Ratio
   \   00000A   7D40A800     MOV.B   #0xa8, R13
   \   00000E   ........     CALLA   #?Subroutine24
    129              OLED_write_byte(CMD,0x3F);  
   \                     ??CrossCallReturnLabel_54:
   \   000012   7D403F00     MOV.B   #0x3f, R13
   \   000016   ........     CALLA   #?Subroutine24
    130              
    131              OLED_write_byte(CMD,0xD3);    //ÉèÖÃÏÔÊ¾Æ«ÒÆ
   \                     ??CrossCallReturnLabel_53:
   \   00001A   7D40D300     MOV.B   #0xd3, R13
   \   00001E   ........     CALLA   #?Subroutine24
    132              OLED_write_byte(CMD,0x00);
   \                     ??CrossCallReturnLabel_52:
   \   000022   ........     CALLA   #?Subroutine8
    133              
    134              OLED_write_byte(CMD,0x40);    //ÉèÖÃ¿ªÊ¼ÏÔÊ¾ÐÐ 
   \                     ??CrossCallReturnLabel_62:
   \   000026   7D404000     MOV.B   #0x40, R13
   \   00002A   ........     CALLA   #?Subroutine24
    135              
    136              OLED_write_byte(CMD,0xA1);    //ÉèÖÃ¶ÎÖØÓ³Éä  A0h/A1h
   \                     ??CrossCallReturnLabel_51:
   \   00002E   7D40A100     MOV.B   #0xa1, R13
   \   000032   ........     CALLA   #?Subroutine24
    137              
    138              OLED_write_byte(CMD,0xC8);    //ÉèÖÃCOMµÄÉ¨Ãè·½Ïò  C0h/C8h
   \                     ??CrossCallReturnLabel_50:
   \   000036   7D40C800     MOV.B   #0xc8, R13
   \   00003A   ........     CALLA   #?Subroutine24
    139              
    140              OLED_write_byte(CMD,0xDA);    //ÉèÖÃCOM¹Ü½ÅµÄÓ²¼þÅäÖÃ
   \                     ??CrossCallReturnLabel_49:
   \   00003E   7D40DA00     MOV.B   #0xda, R13
   \   000042   ........     CALLA   #?Subroutine24
    141              OLED_write_byte(CMD,0x12);
   \                     ??CrossCallReturnLabel_48:
   \   000046   7D401200     MOV.B   #0x12, R13
   \   00004A   ........     CALLA   #?Subroutine24
    142              
    143              OLED_write_byte(CMD,0x81);    //ÉèÖÃ¶Ô±È¶È
   \                     ??CrossCallReturnLabel_47:
   \   00004E   7D408100     MOV.B   #0x81, R13
   \   000052   ........     CALLA   #?Subroutine24
    144              OLED_write_byte(CMD,0x7F);
   \                     ??CrossCallReturnLabel_46:
   \   000056   7D407F00     MOV.B   #0x7f, R13
   \   00005A   ........     CALLA   #?Subroutine24
    145              
    146              OLED_write_byte(CMD,0xA4);    //½ûÖ¹ÆÁÄ»ÏÔÊ¾
   \                     ??CrossCallReturnLabel_45:
   \   00005E   7D40A400     MOV.B   #0xa4, R13
   \   000062   ........     CALLA   #?Subroutine24
    147              
    148              OLED_write_byte(CMD,0xA6);    //ÉèÖÃÕý³£ÏÔÊ¾
   \                     ??CrossCallReturnLabel_44:
   \   000066   7D40A600     MOV.B   #0xa6, R13
   \   00006A   ........     CALLA   #?Subroutine24
    149              
    150              OLED_write_byte(CMD,0xD5);    //ÉèÖÃOSCÆµÂÊ
   \                     ??CrossCallReturnLabel_43:
   \   00006E   7D40D500     MOV.B   #0xd5, R13
   \   000072   ........     CALLA   #?Subroutine24
    151              OLED_write_byte(CMD,0x80);
   \                     ??CrossCallReturnLabel_42:
   \   000076   7D408000     MOV.B   #0x80, R13
   \   00007A   ........     CALLA   #?Subroutine24
    152              
    153              OLED_write_byte(CMD,0x8D);    //Enable charge pupm regulator
   \                     ??CrossCallReturnLabel_41:
   \   00007E   7D408D00     MOV.B   #0x8d, R13
   \   000082   ........     CALLA   #?Subroutine24
    154              OLED_write_byte(CMD,0x14);
   \                     ??CrossCallReturnLabel_40:
   \   000086   7D401400     MOV.B   #0x14, R13
   \   00008A   ........     CALLA   #?Subroutine24
    155              
    156              OLED_write_byte(CMD,0xAF);    //¿ªÏÔÊ¾
   \                     ??CrossCallReturnLabel_39:
   \   00008E   7D40AF00     MOV.B   #0xaf, R13
   \   000092   ........     CALLA   #?Subroutine24
    157              
    158              OLED_fill_ram(0x00);          //ÇåÆÁ  
   \                     ??CrossCallReturnLabel_38:
   \   000096   4C43         MOV.B   #0x0, R12
   \   000098   ........     BRA     #OLED_fill_ram
   \   00009C                REQUIRE _A_PBOUT_L
    159          }
    160          
    161          /********************************************************************
    162          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´ÈëÒ»¸ö6*8×Ö·û
    163          º¯ÊýÃû³Æ:OLED_write_char_6x8
    164          ÐÎÊ½²ÎÊý:ascii:±ê×¼ASCII×Ö·û
    165          ·µ»ØÖµ:  ¿Õ
    166          ÐÞ¸ÄÈË:  CTGU-GB2013
    167          ÐÞ¸ÄÊ±¼ä:2014/5/12
    168          *********************************************************************/

   \                                 In  segment CODE, align 2
    169          void OLED_write_char_6x8(uint8_t y,uint8_t x,char ascii)
   \                     OLED_write_char_6x8:
    170          {
   \   000000   1B14         PUSHM.A #0x2, R11
   \   000002   4B4E         MOV.B   R14, R11
    171              uint8_t temp,i;
    172              if(ascii<' '||ascii>'~')return;
   \   000004   7B50E000     ADD.B   #0xe0, R11
   \   000008   7B905F00     CMP.B   #0x5f, R11
   \   00000C   242C         JC      ??OLED_write_char_6x8_0
    173              OLED_set_pos(y,x);
   \   00000E   ........     CALLA   #OLED_set_pos
    174              temp = (uint8_t)(ascii - ' ');
    175              for(i=0;i<6;i++)
   \   000012   EB0B         ADDA    R11, R11
   \   000014   CF0B         MOVA    R11, R15
   \   000016   EB0B         ADDA    R11, R11
   \   000018   EB0F         ADDA    R15, R11
    176              {
    177                  OLED_write_byte(DATA,ASCII_6X8[temp][i]);
   \   00001A   ....5D4B.... MOVX.B  ASCII_6X8(R11), R13
   \   000020   ........     CALLA   #??Subroutine9_0
   \                     ??CrossCallReturnLabel_74:
   \   000024   ....5D4B.... MOVX.B  ASCII_6X8 + 1(R11), R13
   \   00002A   ........     CALLA   #??Subroutine9_0
   \                     ??CrossCallReturnLabel_73:
   \   00002E   ....5D4B.... MOVX.B  ASCII_6X8 + 2(R11), R13
   \   000034   ........     CALLA   #??Subroutine9_0
   \                     ??CrossCallReturnLabel_72:
   \   000038   ....5D4B.... MOVX.B  ASCII_6X8 + 3(R11), R13
   \   00003E   ........     CALLA   #??Subroutine9_0
   \                     ??CrossCallReturnLabel_71:
   \   000042   ....5D4B.... MOVX.B  ASCII_6X8 + 4(R11), R13
   \   000048   ........     CALLA   #??Subroutine9_0
   \                     ??CrossCallReturnLabel_70:
   \   00004C   ....5D4B.... MOVX.B  ASCII_6X8 + 5(R11), R13
   \   000052   ........     CALLA   #??Subroutine9_0
    178              }
   \                     ??OLED_write_char_6x8_0:
   \   000056   1A16         POPM.A  #0x2, R11
   \   000058   1001         RETA
    179          }
    180          /********************************************************************
    181          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´ÈëÒ»¸ö8*16×Ö·û
    182          º¯ÊýÃû³Æ:OLED_write_char_8x16
    183          ÐÎÊ½²ÎÊý:ascii:±ê×¼ASCII×Ö·û
    184          ·µ»ØÖµ:  ¿Õ
    185          ÐÞ¸ÄÈË:  CTGU-GB2013
    186          ÐÞ¸ÄÊ±¼ä:2014/5/12
    187          *********************************************************************/

   \                                 In  segment CODE, align 2
    188          void OLED_write_Nchar_6x8(uint8_t y,uint8_t x,char *str,uint8_t num)
   \                     OLED_write_Nchar_6x8:
    189          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   4B4C         MOV.B   R12, R11
   \   000004   484D         MOV.B   R13, R8
   \   000006   C90E         MOVA    R14, R9
   \   000008   4A4F         MOV.B   R15, R10
   \   00000A   103C         JMP     ??OLED_write_Nchar_6x8_1
    190              while(num--)
   \                     ??OLED_write_Nchar_6x8_0:
   \   00000C   7A53         ADD.B   #0xff, R10
    191              {
    192                  OLED_write_char_6x8(y,x,*str++);
   \   00000E   7E49         MOV.B   @R9+, R14
   \   000010   4D48         MOV.B   R8, R13
   \   000012   4C4B         MOV.B   R11, R12
   \   000014   ........     CALLA   #OLED_write_char_6x8
    193                  x+=6;
   \   000018   78500600     ADD.B   #0x6, R8
    194                  if(x>122)
   \   00001C   78907B00     CMP.B   #0x7b, R8
   \   000020   0528         JNC     ??OLED_write_Nchar_6x8_1
    195                  {
    196                    x=0;
   \   000022   4843         MOV.B   #0x0, R8
    197                    y++;
   \   000024   5B53         ADD.B   #0x1, R11
    198                    if(y>7)y=0;
   \   000026   7B92         CMP.B   #0x8, R11
   \   000028   0128         JNC     ??OLED_write_Nchar_6x8_1
   \   00002A   4B43         MOV.B   #0x0, R11
    199                  }
    200              }
   \                     ??OLED_write_Nchar_6x8_1:
   \   00002C   4A93         CMP.B   #0x0, R10
   \   00002E   EE23         JNE     ??OLED_write_Nchar_6x8_0
    201          }
   \   000030   3816         POPM.A  #0x4, R11
   \   000032   1001         RETA
    202          /********************************************************************
    203          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´ÈëÒ»6*8×Ö·û´®
    204          º¯ÊýÃû³Æ:OLED_display_string_6x8
    205          ÐÎÊ½²ÎÊý:y:ÐÐ 0-7 x:ÁÐ 0-127  
    206                   *str:±ê×¼ASCII×Ö·û´® Ã¿ÁÐ×î¶à21¸ö×Ö·û,¶àÓà×Ö·û»áÑ­»·µ½µ±Ç°ÐÐµÄ¿ªÊ¼Î»ÖÃ,¸²¸ÇÖ®Ç°µÄÊä³ö
    207          ·µ»ØÖµ:  ¿Õ
    208          ÐÞ¸ÄÈË:  CTGU-GB2013
    209          ÐÞ¸ÄÊ±¼ä:2014/5/12
    210          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    211          void OLED_display_string_6x8(uint8_t y,uint8_t x,char * str)
   \                     OLED_display_string_6x8:
    212          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   ........     CALLA   #?Subroutine5
    213              while(*str != '\0')
    214              {
    215                  OLED_write_char_6x8(y,x,*str++);
    216                  x+=6;
    217                  if(x>122)
    218                  {
    219                    x=0;
    220                    y++;
    221                    if(y>7)y=0;
    222                  }
    223              }
    224          }
   \                     ??CrossCallReturnLabel_6:
   \   000006   3816         POPM.A  #0x4, R11
   \   000008   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine5:
   \   000000   4A4C         MOV.B   R12, R10
   \   000002   4B4D         MOV.B   R13, R11
   \   000004   C80E         MOVA    R14, R8
   \   000006   0B3C         JMP     ??OLED_display_string_6x8_1
   \                     ??OLED_display_string_6x8_0:
   \   000008   7E48         MOV.B   @R8+, R14
   \   00000A   ........     CALLA   #?Subroutine21
   \                     ??CrossCallReturnLabel_29:
   \   00000E   7B907B00     CMP.B   #0x7b, R11
   \   000012   0528         JNC     ??OLED_display_string_6x8_1
   \   000014   4B43         MOV.B   #0x0, R11
   \   000016   5A53         ADD.B   #0x1, R10
   \   000018   7A92         CMP.B   #0x8, R10
   \   00001A   0128         JNC     ??OLED_display_string_6x8_1
   \   00001C   4A43         MOV.B   #0x0, R10
   \                     ??OLED_display_string_6x8_1:
   \   00001E   C8930000     CMP.B   #0x0, 0(R8)
   \   000022   F223         JNE     ??OLED_display_string_6x8_0
   \   000024   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine21:
   \   000000   4D4B         MOV.B   R11, R13
   \   000002   4C4A         MOV.B   R10, R12
   \   000004   ........     CALLA   #OLED_write_char_6x8
   \   000008   7B500600     ADD.B   #0x6, R11
   \   00000C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
    225          void OLED_write_Line_6x8(uint8_t y,uint8_t x,char *str)
   \                     OLED_write_Line_6x8:
    226          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   ........     CALLA   #?Subroutine5
    227              while(*str != '\0')
   \                     ??CrossCallReturnLabel_7:
   \   000006   7B908000     CMP.B   #0x80, R11
   \   00000A   072C         JC      ??OLED_write_Line_6x8_3
    228              {
    229                  OLED_write_char_6x8(y,x,*str++);
    230                  x+=6;
    231                  if(x>122)
    232                  {
    233                    x=0;
    234                    y++;
    235                    if(y>7)y=0;
    236                  }
    237              }
    238              //¶Ô¸ÄÐÐÊ£ÓàÏÔÊ¾ÇøÓòÇåÁã
    239              while(x < OLED_W)
    240              {
    241                OLED_write_char_6x8(y,x,' ');
   \                     ??OLED_write_Line_6x8_1:
   \   00000C   7E402000     MOV.B   #0x20, R14
   \   000010   ........     CALLA   #?Subroutine21
    242                x+=6;
    243              }
   \                     ??CrossCallReturnLabel_28:
   \   000014   7B908000     CMP.B   #0x80, R11
   \   000018   F92B         JNC     ??OLED_write_Line_6x8_1
    244          }
   \                     ??OLED_write_Line_6x8_3:
   \   00001A   3816         POPM.A  #0x4, R11
   \   00001C   1001         RETA
    245          /********************************************************************
    246          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´ÈëÒ»¸ö8*16×Ö·û
    247          º¯ÊýÃû³Æ:OLED_write_char_8x16
    248          ÐÎÊ½²ÎÊý:ascii:±ê×¼ASCII×Ö·û
    249          ·µ»ØÖµ:  ¿Õ
    250          ÐÞ¸ÄÈË:  CTGU-GB2013
    251          ÐÞ¸ÄÊ±¼ä:2014/5/12
    252          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    253          void OLED_write_char_8x16(uint8_t y,uint8_t x,char ascii)
   \                     OLED_write_char_8x16:
    254          {
   \   000000   5B14         PUSHM.A #0x6, R11
   \   000002   4B4C         MOV.B   R12, R11
   \   000004   484D         MOV.B   R13, R8
   \   000006   4A4E         MOV.B   R14, R10
    255              uint8_t temp,i;
    256              if(ascii<' '||ascii>'~')return;
   \   000008   7A50E000     ADD.B   #0xe0, R10
   \   00000C   7A905F00     CMP.B   #0x5f, R10
   \   000010   1D2C         JC      ??OLED_write_char_8x16_2
    257              temp = (uint8_t)(ascii - ' ');
    258              OLED_set_pos(y,x);                     //ÏÈÐ´ÉÏ°ë²¿·Ö 
   \   000012   ........     CALLA   #OLED_set_pos
    259              for(i=0;i<8;i++)
   \   000016   4A0E         RLAM.A  #0x4, R10
   \   000018   C90A         MOVA    R10, R9
   \   00001A   ........     ADDA    #ASCII_8X16, R10
   \   00001E   C60A         MOVA    R10, R6
   \   000020   A6000800     ADDA    #0x8, R6
    260              {
    261                OLED_write_byte(DATA,ASCII_8X16[temp][i]);
   \                     ??OLED_write_char_8x16_0:
   \   000024   7D4A         MOV.B   @R10+, R13
   \   000026   ........     CALLA   #??Subroutine9_0
    262              }
   \                     ??CrossCallReturnLabel_69:
   \   00002A   DA06         CMPA    R6, R10
   \   00002C   FB23         JNE     ??OLED_write_char_8x16_0
    263              OLED_set_pos(y+1,x);                   //ÔÙÐ´ÏÂ°ë²¿·Ö 
   \   00002E   4D48         MOV.B   R8, R13
   \   000030   5B53         ADD.B   #0x1, R11
   \   000032   4C4B         MOV.B   R11, R12
   \   000034   ........     CALLA   #OLED_set_pos
    264              for(i=0;i<8;i++)
   \   000038   ........     ADDA    #ASCII_8X16 + 8, R9
   \   00003C   CB09         MOVA    R9, R11
   \   00003E   AB000800     ADDA    #0x8, R11
    265              {
    266                 OLED_write_byte(DATA,ASCII_8X16[temp][8+i]);
   \                     ??OLED_write_char_8x16_1:
   \   000042   7D49         MOV.B   @R9+, R13
   \   000044   ........     CALLA   #??Subroutine9_0
    267              }
   \                     ??CrossCallReturnLabel_68:
   \   000048   D90B         CMPA    R11, R9
   \   00004A   FB23         JNE     ??OLED_write_char_8x16_1
   \                     ??OLED_write_char_8x16_2:
   \   00004C   5616         POPM.A  #0x6, R11
   \   00004E   1001         RETA
    268          }
    269          /********************************************************************
    270          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´ÈëÒ»¸ö8*16×Ö·û
    271          º¯ÊýÃû³Æ:OLED_write_char_8x16
    272          ÐÎÊ½²ÎÊý:ascii:±ê×¼ASCII×Ö·û
    273          ·µ»ØÖµ:  ¿Õ
    274          ÐÞ¸ÄÈË:  CTGU-GB2013
    275          ÐÞ¸ÄÊ±¼ä:2014/5/12
    276          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    277          void OLED_write_Nchar_8x16(uint8_t y,uint8_t x,char *str,uint8_t num)
   \                     OLED_write_Nchar_8x16:
    278          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   4B4C         MOV.B   R12, R11
   \   000004   484D         MOV.B   R13, R8
   \   000006   C90E         MOVA    R14, R9
   \   000008   4A4F         MOV.B   R15, R10
   \   00000A   0C3C         JMP     ??OLED_write_Nchar_8x16_1
    279              while(num--)
   \                     ??OLED_write_Nchar_8x16_0:
   \   00000C   7A53         ADD.B   #0xff, R10
    280              {
    281                  OLED_write_char_8x16(y,x,*str++);
   \   00000E   7E49         MOV.B   @R9+, R14
   \   000010   4D48         MOV.B   R8, R13
   \   000012   4C4B         MOV.B   R11, R12
   \   000014   ........     CALLA   #OLED_write_char_8x16
    282                  x+=8;
   \   000018   7852         ADD.B   #0x8, R8
    283                  if(x>120)
   \   00001A   78907900     CMP.B   #0x79, R8
   \   00001E   0228         JNC     ??OLED_write_Nchar_8x16_1
    284                  {
    285                    x=0;
   \   000020   ........     CALLA   #?Subroutine17
    286                    y=y+2;
    287                    if(y>6)y=0;
    288                  }
    289              }
   \                     ??OLED_write_Nchar_8x16_1:
   \   000024   4A93         CMP.B   #0x0, R10
   \   000026   F223         JNE     ??OLED_write_Nchar_8x16_0
    290          }
   \   000028   3816         POPM.A  #0x4, R11
   \   00002A   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine17:
   \   000000   4843         MOV.B   #0x0, R8
   \   000002   6B53         ADD.B   #0x2, R11
   \   000004   7B900700     CMP.B   #0x7, R11
   \   000008   0128         JNC     ??OLED_write_Nchar_8x16_2
   \   00000A   4B43         MOV.B   #0x0, R11
   \                     ??OLED_write_Nchar_8x16_2:
   \   00000C   1001         RETA
    291          /********************************************************************
    292          º¯Êý¹¦ÄÜ:ÏòOLEDÐ´ÈëÒ»8*16×Ö·û´®
    293          º¯ÊýÃû³Æ:OLED_display_string_8x16
    294          ÐÎÊ½²ÎÊý:y:ÐÐ 0-6 ÏàÁÚÁ½ÐÐ²îÖµÎª1 ±ÈÈçµÚÒ»ÐÐÊÇ0 ÔòµÚ¶þÐÐÎª2 ·ñÔò»á¸²¸ÇµÚÒ»ÐÐÏÂ°ë²¿·Ö
    295                   x:ÁÐ 0-127  
    296                   *str:±ê×¼ASCII×Ö·û´®  Ã¿ÁÐ×î¶à16¸ö×Ö·û ¶àÓà×Ö·û»áÑ­»·»Øµ½µ±Ç°ÐÐµÄ¿ªÊ¼Î»ÖÃ,¸²¸ÇÖ®Ç°µÄÊä³ö
    297          ·µ»ØÖµ:  ¿Õ
    298          ÐÞ¸ÄÈË:  CTGU-GB2013
    299          ÐÞ¸ÄÊ±¼ä:2014/5/13
    300          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    301          void OLED_display_string_8x16(uint8_t y,uint8_t x,char * str)
   \                     OLED_display_string_8x16:
    302          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   ........     CALLA   #?Subroutine4
    303              while(*str != '\0')
    304              {
    305                  OLED_write_char_8x16(y,x,*str++);
    306                  x+=8;
    307                  if(x>120)
    308                  {
    309                    x=0;
    310                    y=y+2;
    311                    if(y>6)y=0;
    312                  }
    313              }
    314          }    
   \                     ??CrossCallReturnLabel_4:
   \   000006   3816         POPM.A  #0x4, R11
   \   000008   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   000000   4A4C         MOV.B   R12, R10
   \   000002   4B4D         MOV.B   R13, R11
   \   000004   C80E         MOVA    R14, R8
   \   000006   0F3C         JMP     ??OLED_display_string_8x16_1
   \                     ??OLED_display_string_8x16_0:
   \   000008   7E48         MOV.B   @R8+, R14
   \   00000A   4D4B         MOV.B   R11, R13
   \   00000C   4C4A         MOV.B   R10, R12
   \   00000E   ........     CALLA   #OLED_write_char_8x16
   \   000012   7B52         ADD.B   #0x8, R11
   \   000014   7B907900     CMP.B   #0x79, R11
   \   000018   0628         JNC     ??OLED_display_string_8x16_1
   \   00001A   4B43         MOV.B   #0x0, R11
   \   00001C   6A53         ADD.B   #0x2, R10
   \   00001E   7A900700     CMP.B   #0x7, R10
   \   000022   0128         JNC     ??OLED_display_string_8x16_1
   \   000024   4A43         MOV.B   #0x0, R10
   \                     ??OLED_display_string_8x16_1:
   \   000026   C8930000     CMP.B   #0x0, 0(R8)
   \   00002A   EE23         JNE     ??OLED_display_string_8x16_0
   \   00002C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
    315          void OLED_write_Line_8x16(uint8_t y,uint8_t x,char *str)
   \                     OLED_write_Line_8x16:
    316          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   ........     CALLA   #?Subroutine4
    317            while(*str != '\0')
   \                     ??CrossCallReturnLabel_5:
   \   000006   7B908000     CMP.B   #0x80, R11
   \   00000A   0A2C         JC      ??OLED_write_Line_8x16_3
    318              {
    319                  OLED_write_char_8x16(y,x,*str++);
    320                  x+=8;
    321                  if(x>120)
    322                  {
    323                    x=0;
    324                    y=y+2;
    325                    if(y>6)y=0;
    326                  }
    327              }
    328              //¶Ô¸ÄÐÐÊ£ÓàÏÔÊ¾ÇøÓòÇåÁã
    329              while(x < OLED_W)
    330              {
    331                OLED_write_char_8x16(y,x,' ');
   \                     ??OLED_write_Line_8x16_1:
   \   00000C   7E402000     MOV.B   #0x20, R14
   \   000010   4D4B         MOV.B   R11, R13
   \   000012   4C4A         MOV.B   R10, R12
   \   000014   ........     CALLA   #OLED_write_char_8x16
    332                x+=8;
   \   000018   7B52         ADD.B   #0x8, R11
    333              }
   \   00001A   7B908000     CMP.B   #0x80, R11
   \   00001E   F62B         JNC     ??OLED_write_Line_8x16_1
    334          }
   \                     ??OLED_write_Line_8x16_3:
   \   000020   3816         POPM.A  #0x4, R11
   \   000022   1001         RETA
    335          /********************************************************************
    336          º¯Êý¹¦ÄÜ:ÔÚµÚyÐÐµÚxÁÐÏÔÊ¾ÖÐÎÄ  ÏÔÊ¾µÄÄÚÈÝÔÚFONT_CHINESE.hÖÐµÄ FONT_CHINESE[]Êý×éÖÐ
    337          º¯ÊýÃû³Æ:OLED_display_chinese
    338          ÐÎÊ½²ÎÊý:y:ÐÐ 0-6 ÏàÁÚÁ½ÐÐ²îÖµÎª1 ±ÈÈçµÚÒ»ÐÐÊÇ0 ÔòµÚ¶þÐÐÎª2 ·ñÔò»á¸²¸ÇµÚÒ»ÐÐÏÂ°ë²¿·Ö
    339                   x:ÁÐ 0-127
    340                   start ´ÓµÚ¼¸¸öºº×Ó¿ªÊ¼ÏÔÊ¾
    341                   len  ÏÔÊ¾ºº×ÖµÄ³¤¶È
    342          ·µ»ØÖµ:  ¿Õ
    343          ÐÞ¸ÄÈË:  CTGU-GB2013
    344          ÐÞ¸ÄÊ±¼ä:2014/5/13
    345          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    346          void OLED_display_chinese(uint8_t y,uint8_t x,uint8_t start,uint8_t len)
   \                     OLED_display_chinese:
    347          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   444C         MOV.B   R12, R4
   \   000004   4B4D         MOV.B   R13, R11
    348              uint8_t i,j;
    349              for(i=start;i<start+len;i++)
   \   000006   4A4E         MOV.B   R14, R10
   \   000008   4E4E         MOV.B   R14, R14
   \   00000A   4F4F         MOV.B   R15, R15
   \   00000C   084E         MOV.W   R14, R8
   \   00000E   085F         ADD.W   R15, R8
   \   000010   0E98         CMP.W   R8, R14
   \   000012   2B34         JGE     ??OLED_display_chinese_3
   \   000014   494A         MOV.B   R10, R9
   \   000016                RPT     #0x5
   \   000016   04184959     RLAX.A  R9
   \   00001A   ........     ADDA    #FONT_CHINESE, R9
   \   00001E   454C         MOV.B   R12, R5
   \   000020   5553         ADD.B   #0x1, R5
   \   000022   213C         JMP     ??OLED_display_chinese_4
    350              {
    351                  OLED_set_pos(y,x);
   \                     ??OLED_display_chinese_2:
   \   000024   4D4B         MOV.B   R11, R13
   \   000026   4C44         MOV.B   R4, R12
   \   000028   ........     CALLA   #OLED_set_pos
    352                  for(j=0;j<16;j++)                             //ÏÔÊ¾ºº×ÖµÄÉÏ°ë²¿·Ö
   \   00002C   C609         MOVA    R9, R6
   \   00002E   C709         MOVA    R9, R7
   \   000030   A7001000     ADDA    #0x10, R7
    353                  {
    354                      OLED_write_byte(DATA,FONT_CHINESE[j+i*32]);
   \                     ??OLED_display_chinese_0:
   \   000034   7D46         MOV.B   @R6+, R13
   \   000036   ........     CALLA   #??Subroutine9_0
    355                  }
   \                     ??CrossCallReturnLabel_66:
   \   00003A   D607         CMPA    R7, R6
   \   00003C   FB23         JNE     ??OLED_display_chinese_0
    356                  OLED_set_pos(y+1,x);                      //ÏÔÊ¾ºº×ÖµÄÏÂ°ë²¿·Ö
   \   00003E   4D4B         MOV.B   R11, R13
   \   000040   4C45         MOV.B   R5, R12
   \   000042   ........     CALLA   #OLED_set_pos
    357                  for(j=16;j<32;j++)
   \   000046   C709         MOVA    R9, R7
   \   000048   A7001000     ADDA    #0x10, R7
   \   00004C   C607         MOVA    R7, R6
   \   00004E   A6001000     ADDA    #0x10, R6
    358                  {
    359                      OLED_write_byte(DATA,FONT_CHINESE[j+i*32]);
   \                     ??OLED_display_chinese_1:
   \   000052   7D47         MOV.B   @R7+, R13
   \   000054   ........     CALLA   #??Subroutine9_0
    360                  }
   \                     ??CrossCallReturnLabel_65:
   \   000058   D706         CMPA    R6, R7
   \   00005A   FB23         JNE     ??OLED_display_chinese_1
    361                  x += 16;
   \   00005C   7B501000     ADD.B   #0x10, R11
    362              }
   \   000060   5A53         ADD.B   #0x1, R10
   \   000062   A9002000     ADDA    #0x20, R9
   \                     ??OLED_display_chinese_4:
   \   000066   0A98         CMP.W   R8, R10
   \   000068   DD3B         JL      ??OLED_display_chinese_2
    363          }
   \                     ??OLED_display_chinese_3:
   \   00006A   7416         POPM.A  #0x8, R11
   \   00006C   1001         RETA
    364          
    365          /********************************************************************
    366          º¯Êý¹¦ÄÜ:ÔÚµÚyÐÐµÚxÁÐÏÔÊ¾Ò»¸ö6*8µÄÕûÊý,¿ÉÒÔ´ø·ûºÅ,int16ÐÍµÄ
    367          º¯ÊýÃû³Æ:OLED_display_number_6x8
    368          ÐÎÊ½²ÎÊý:y:ÐÐ 0-7 
    369                   x:ÁÐ 0-127
    370                   number ÒªÏÔÊ¾µÄÕûÊý
    371          ·µ»ØÖµ:  ¿Õ
    372          ÐÞ¸ÄÈË:  CTGU-GB2013
    373          ÐÞ¸ÄÊ±¼ä:2014/5/13
    374          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   3152         ADD.W   #0x8, SP
   \   000002   7416         POPM.A  #0x8, R11
   \   000004   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
    375          void OLED_display_number_6x8(uint8_t y,uint8_t x,int16_t number)
   \                     OLED_display_number_6x8:
    376          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   3182         SUB.W   #0x8, SP
   \   000004   ........     CALLA   #?Subroutine3
    377            char str[7],j,k=0,i;
    378            unsigned int c=10000;
    379            if(number<0)
    380              {str[0]='-';number=-number;}
    381            else str[0]=' ';
    382            for( i=1;i<=5;i++)
    383            {
    384              j=number/c%10;
    385              if(j==0&&k==0&&i<5)
    386              {
    387                str[i]=' ';
    388              }
    389              else
    390              {
    391                k=1;
    392                str[i]=j+'0';
    393              }
    394              c/=10;
    395            }
    396            str[6]='\0';
    397            OLED_display_string_6x8(y,x,str);
   \                     ??CrossCallReturnLabel_3:
   \   000008   ........     CALLA   #OLED_display_string_6x8
    398          }
   \   00000C   ....         JMP     ?Subroutine1
   \   00000E   0343         NOP

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   000000   4A4C         MOV.B   R12, R10
   \   000002   4B4D         MOV.B   R13, R11
   \   000004   084E         MOV.W   R14, R8
   \   000006   4943         MOV.B   #0x0, R9
   \   000008   36401027     MOV.W   #0x2710, R6
   \   00000C   0E93         CMP.W   #0x0, R14
   \   00000E   0634         JGE     ??OLED_display_number_8x16_1
   \   000010   F1402D000400 MOV.B   #0x2d, 0x4(SP)
   \   000016   38E3         XOR.W   #0xffff, R8
   \   000018   1853         ADD.W   #0x1, R8
   \   00001A   033C         JMP     ??OLED_display_number_8x16_2
   \                     ??OLED_display_number_8x16_1:
   \   00001C   F14020000400 MOV.B   #0x20, 0x4(SP)
   \                     ??OLED_display_number_8x16_2:
   \   000022   5743         MOV.B   #0x1, R7
   \   000024   0441         MOV.W   SP, R4
   \   000026   34500500     ADD.W   #0x5, R4
   \                     ??OLED_display_number_8x16_0:
   \   00002A   0C48         MOV.W   R8, R12
   \   00002C   0E46         MOV.W   R6, R14
   \   00002E   ........     CALLA   #?DivMod16u
   \   000032   3E400A00     MOV.W   #0xa, R14
   \   000036   ........     CALLA   #?DivMod16u
   \   00003A   4E93         CMP.B   #0x0, R14
   \   00003C   0820         JNE     ??OLED_display_number_8x16_3
   \   00003E   59B3         BIT.B   #0x1, R9
   \   000040   062C         JC      ??OLED_display_number_8x16_3
   \   000042   77900500     CMP.B   #0x5, R7
   \   000046   032C         JC      ??OLED_display_number_8x16_3
   \   000048   7E402000     MOV.B   #0x20, R14
   \   00004C   033C         JMP     ??OLED_display_number_8x16_4
   \                     ??OLED_display_number_8x16_3:
   \   00004E   5943         MOV.B   #0x1, R9
   \   000050   7E503000     ADD.B   #0x30, R14
   \                     ??OLED_display_number_8x16_4:
   \   000054   C44E0000     MOV.B   R14, 0(R4)
   \   000058   0C46         MOV.W   R6, R12
   \   00005A   3E400A00     MOV.W   #0xa, R14
   \   00005E   ........     CALLA   #?DivMod16u
   \   000062   064C         MOV.W   R12, R6
   \   000064   5753         ADD.B   #0x1, R7
   \   000066   1453         ADD.W   #0x1, R4
   \   000068   77900600     CMP.B   #0x6, R7
   \   00006C   DE2B         JNC     ??OLED_display_number_8x16_0
   \   00006E   C1430A00     MOV.B   #0x0, 0xa(SP)
   \   000072   0E41         MOV.W   SP, R14
   \   000074   2E52         ADD.W   #0x4, R14
   \   000076   4D4B         MOV.B   R11, R13
   \   000078   4C4A         MOV.B   R10, R12
   \   00007A   1001         RETA
    399          /********************************************************************
    400          º¯Êý¹¦ÄÜ:ÔÚµÚyÐÐµÚxÁÐÏÔÊ¾Ò»¸ö8*16µÄÕûÊý,¿ÉÒÔ´ø·ûºÅ,int16ÐÍµÄ
    401          º¯ÊýÃû³Æ:OLED_display_number_8x16
    402          ÐÎÊ½²ÎÊý:y:ÐÐ 0-6 ÏàÁÚÁ½ÐÐ²îÖµÎª1 ±ÈÈçµÚÒ»ÐÐÊÇ0 ÔòµÚ¶þÐÐÎª2 ·ñÔò»á¸²¸ÇµÚÒ»ÐÐÏÂ°ë²¿·Ö
    403                   x:ÁÐ 0-127  
    404                   number ÒªÏÔÊ¾µÄÕûÊý
    405          ·µ»ØÖµ:  ¿Õ
    406          ÐÞ¸ÄÈË:  CTGU-GB2013
    407          ÐÞ¸ÄÊ±¼ä:2014/5/13
    408          *********************************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    409          void OLED_display_number_8x16(uint8_t y,uint8_t x,int16_t number)
   \                     OLED_display_number_8x16:
    410          {        
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   3182         SUB.W   #0x8, SP
   \   000004   ........     CALLA   #?Subroutine3
    411            char str[7],j,k=0,i;
    412            unsigned int c=10000;
    413            if(number<0)
    414              {str[0]='-';number=-number;}
    415            else str[0]=' ';
    416            for( i=1;i<=5;i++)
    417            {
    418              j=number/c%10;
    419              if(j==0&&k==0&&i<5)
    420              {
    421                str[i]=' ';
    422              }
    423              else
    424              {
    425                k=1;
    426                str[i]=j+'0';
    427              }
    428              c/=10;
    429            }
    430            str[6]='\0';
    431            OLED_display_string_8x16(y,x,str);
   \                     ??CrossCallReturnLabel_2:
   \   000008   ........     CALLA   #OLED_display_string_8x16
    432          }
   \   00000C                REQUIRE ?Subroutine1
   \   00000C                // Fall through to label ?Subroutine1
    433          /*************************************************************************
    434          //ÏÔÊ¾¸¡µãÊý
    435          *  º¯ÊýÃû³Æ£ºOLED_display_float_6x8
    436          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    437          *  ²ÎÊýËµÃ÷£º
    438                      x,y:Æðµã×ø±ê  
    439                      number:ÒªÏÔÊ¾µÄÊý×Ö
    440                      decimal:Òª±£ÁôµÄÐ¡ÊýÎ»
    441          *  º¯Êý·µ»Ø£ºÎÞ
    442          *  Ê¹ÓÃÊ¾Àý£ºOLED_display_float_6x8(0,0,1.0,3);  //ÏÔÊ¾1.0£¬3Î»Ð¡ÊýÏÔÊ¾
    443          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
    444          void OLED_display_float_6x8(unsigned char y,unsigned char x,float number,unsigned char decimals)
   \                     OLED_display_float_6x8:
    445          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   4C12         PUSH.B  R12
   \   000004   4D12         PUSH.B  R13
   \   000006   31802C00     SUB.W   #0x2c, SP
   \   00000A   0A4E         MOV.W   R14, R10
   \   00000C   0B4F         MOV.W   R15, R11
    446            const float _fround[6]={0.49,0.05,0.005,0.0005,0.00005,0.000005};
   \   00000E   0C41         MOV.W   SP, R12
   \   000010   3C501400     ADD.W   #0x14, R12
   \   000014   ........     MOVA    #`?<Constant {(4.90000009E-1F), (5.00000007E-2F)`, R14
   \   000018   ........     CALLA   #?Subroutine11
    447            char Str[20];
    448            char * str=Str;
    449            float scale;
    450            unsigned char i,d;
    451            if (number<0.0) {number=-number; *str++='-';};
   \                     ??CrossCallReturnLabel_11:
   \   00001C   54415400     MOV.B   0x54(SP), R4
    452            if (decimals>5) decimals=5;
   \   000020   ........     CALLA   #?Subroutine20
    453            number=number+_fround[decimals];
   \                     ??CrossCallReturnLabel_27:
   \   000024   0F51         ADD.W   SP, R15
   \   000026   1E4F1400     MOV.W   0x14(R15), R14
   \   00002A   1F4F1600     MOV.W   0x16(R15), R15
   \   00002E   ........     CALLA   #?Subroutine18
    454            i=0;
    455            scale=1.0;
    456            while (number>=scale) {scale=scale*10.0; ++i;};
    457            if (i==0) *str++='0';
   \                     ??CrossCallReturnLabel_23:
   \   000032   ........     CALLA   #?Subroutine2
    458            else
    459            {
    460              while (i--)
    461              {
    462                scale=(float)((int)(0.5+scale/10.0));
    463                d=(unsigned char) (number/scale);
    464                *str++=d+'0';
    465                number=number-scale*d;
    466               };
    467            }
    468            if (decimals==0) {*str=0; OLED_display_string_6x8(y,x,Str);return;};
    469            *str++='.';
    470            while (decimals--)
    471            {
    472              number=number*10.0;
    473              d=(unsigned char)number;
    474              *str++=d+'0';
    475              number=number-d;
    476            }
    477            *str=0;
    478            OLED_display_string_6x8(y,x,Str);
   \                     ??CrossCallReturnLabel_1:
   \   000036   5D412C00     MOV.B   0x2c(SP), R13
   \   00003A   5C412E00     MOV.B   0x2e(SP), R12
   \   00003E   ........     CALLA   #OLED_display_string_6x8
    479          }
   \   000042   31503000     ADD.W   #0x30, SP
   \   000046   7416         POPM.A  #0x8, R11
   \   000048   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine20:
   \   000000   74900600     CMP.B   #0x6, R4
   \   000004   0228         JNC     ??OLED_display_float_8x16_8
   \   000006   74400500     MOV.B   #0x5, R4
   \                     ??OLED_display_float_8x16_8:
   \   00000A   4F44         MOV.B   R4, R15
   \   00000C   5F06         RLAM.W  #0x2, R15
   \   00000E   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine18:
   \   000000   0C4A         MOV.W   R10, R12
   \   000002   0D4B         MOV.W   R11, R13
   \   000004   ........     CALLA   #_Add32f
   \   000008   0A4C         MOV.W   R12, R10
   \   00000A   0B4D         MOV.W   R13, R11
   \   00000C   4943         MOV.B   #0x0, R9
   \   00000E   0643         MOV.W   #0x0, R6
   \   000010   3740803F     MOV.W   #0x3f80, R7
   \   000014   0A3C         JMP     ??OLED_display_float_8x16_7
   \                     ??OLED_display_float_8x16_0:
   \   000016   0E43         MOV.W   #0x0, R14
   \   000018   3F402041     MOV.W   #0x4120, R15
   \   00001C   0C46         MOV.W   R6, R12
   \   00001E   0D47         MOV.W   R7, R13
   \   000020   ........     CALLA   #_Mul32f
   \   000024   064C         MOV.W   R12, R6
   \   000026   074D         MOV.W   R13, R7
   \   000028   5953         ADD.B   #0x1, R9
   \                     ??OLED_display_float_8x16_7:
   \   00002A   0E46         MOV.W   R6, R14
   \   00002C   0F47         MOV.W   R7, R15
   \   00002E   0C4A         MOV.W   R10, R12
   \   000030   0D4B         MOV.W   R11, R13
   \   000032   ........     CALLA   #_CmpGe32f
   \   000036   0C93         CMP.W   #0x0, R12
   \   000038   EE23         JNE     ??OLED_display_float_8x16_0
   \   00003A   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   000000   8D000C00     MOVA    #0xc, R13
   \   000004   ........     CALLA   #?CopyMemoryWords20
   \   000008   0541         MOV.W   SP, R5
   \   00000A   2552         ADD.W   #0x4, R5
   \   00000C   C805         MOVA    R5, R8
   \   00000E   0E43         MOV.W   #0x0, R14
   \   000010   0F43         MOV.W   #0x0, R15
   \   000012   0C4A         MOV.W   R10, R12
   \   000014   0D4B         MOV.W   R11, R13
   \   000016   ........     CALLA   #_CmpLt32f
   \   00001A   0C93         CMP.W   #0x0, R12
   \   00001C   0724         JEQ     ??OLED_display_float_8x16_6
   \   00001E   3BE00080     XOR.W   #0x8000, R11
   \   000022   F5402D000000 MOV.B   #0x2d, 0(R5)
   \   000028   A8000100     ADDA    #0x1, R8
   \                     ??OLED_display_float_8x16_6:
   \   00002C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine2:
   \   000000   4993         CMP.B   #0x0, R9
   \   000002   0620         JNE     ??OLED_display_float_8x16_1
   \   000004   F84030000000 MOV.B   #0x30, 0(R8)
   \   00000A   A8000100     ADDA    #0x1, R8
   \   00000E   233C         JMP     ??OLED_display_float_8x16_5
   \                     ??OLED_display_float_8x16_1:
   \   000010   7953         ADD.B   #0xff, R9
   \   000012   0E43         MOV.W   #0x0, R14
   \   000014   3F402041     MOV.W   #0x4120, R15
   \   000018   0C46         MOV.W   R6, R12
   \   00001A   0D47         MOV.W   R7, R13
   \   00001C   ........     CALLA   #_Div32f
   \   000020   0E43         MOV.W   #0x0, R14
   \   000022   3F40003F     MOV.W   #0x3f00, R15
   \   000026   ........     CALLA   #_Add32f
   \   00002A   ........     CALLA   #_Cast32fto32s
   \   00002E   ........     CALLA   #_Cast32sto32f
   \   000032   064C         MOV.W   R12, R6
   \   000034   074D         MOV.W   R13, R7
   \   000036   0E4C         MOV.W   R12, R14
   \   000038   0F4D         MOV.W   R13, R15
   \   00003A   0C4A         MOV.W   R10, R12
   \   00003C   0D4B         MOV.W   R11, R13
   \   00003E   ........     CALLA   #_Div32f
   \   000042   ........     CALLA   #?Subroutine22
   \                     ??CrossCallReturnLabel_31:
   \   000046   0E46         MOV.W   R6, R14
   \   000048   0F47         MOV.W   R7, R15
   \   00004A   ........     CALLA   #_Mul32f
   \   00004E   ........     CALLA   #?Subroutine23
   \                     ??CrossCallReturnLabel_32:
   \   000052   4993         CMP.B   #0x0, R9
   \   000054   DD23         JNE     ??OLED_display_float_8x16_1
   \                     ??OLED_display_float_8x16_5:
   \   000056   4493         CMP.B   #0x0, R4
   \   000058   1524         JEQ     ??OLED_display_float_8x16_4
   \   00005A   F8402E000000 MOV.B   #0x2e, 0(R8)
   \   000060   A8000100     ADDA    #0x1, R8
   \                     ??OLED_display_float_8x16_2:
   \   000064   7453         ADD.B   #0xff, R4
   \   000066   0E43         MOV.W   #0x0, R14
   \   000068   3F402041     MOV.W   #0x4120, R15
   \   00006C   0C4A         MOV.W   R10, R12
   \   00006E   0D4B         MOV.W   R11, R13
   \   000070   ........     CALLA   #_Mul32f
   \   000074   0A4C         MOV.W   R12, R10
   \   000076   0B4D         MOV.W   R13, R11
   \   000078   ........     CALLA   #?Subroutine22
   \                     ??CrossCallReturnLabel_30:
   \   00007C   ........     CALLA   #?Subroutine23
   \                     ??CrossCallReturnLabel_33:
   \   000080   4493         CMP.B   #0x0, R4
   \   000082   F023         JNE     ??OLED_display_float_8x16_2
   \                     ??OLED_display_float_8x16_4:
   \   000084   C8430000     MOV.B   #0x0, 0(R8)
   \   000088   CE05         MOVA    R5, R14
   \   00008A   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine23:
   \   000000   0E4C         MOV.W   R12, R14
   \   000002   0F4D         MOV.W   R13, R15
   \   000004   0C4A         MOV.W   R10, R12
   \   000006   0D4B         MOV.W   R11, R13
   \   000008   ........     CALLA   #_Sub32f
   \   00000C   0A4C         MOV.W   R12, R10
   \   00000E   0B4D         MOV.W   R13, R11
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine22:
   \   000000   ........     CALLA   #_Cast32fto32u
   \   000004   4E4C         MOV.B   R12, R14
   \   000006   7E503000     ADD.B   #0x30, R14
   \   00000A   C84E0000     MOV.B   R14, 0(R8)
   \   00000E   A8000100     ADDA    #0x1, R8
   \   000012   4C4C         MOV.B   R12, R12
   \   000014   0D43         MOV.W   #0x0, R13
   \   000016   ........     BRA     #_Cast32uto32f
    480          /*************************************************************************
    481          //ÏÔÊ¾¸¡µãÊý
    482          *  º¯ÊýÃû³Æ£ºOLED_display_float_8x16
    483          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    484          *  ²ÎÊýËµÃ÷£º
    485                      x,y:Æðµã×ø±ê  
    486                      number:ÒªÏÔÊ¾µÄÊý×Ö
    487                      decimal:Òª±£ÁôµÄÐ¡ÊýÎ»
    488          *  º¯Êý·µ»Ø£ºÎÞ
    489          *  Ê¹ÓÃÊ¾Àý£ºOLED_display_float_8x16(0,0,1.0,3);  //ÏÔÊ¾1.0£¬3Î»Ð¡ÊýÏÔÊ¾
    490          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
    491          void OLED_display_float_8x16(unsigned char y,unsigned char x,float number,unsigned char decimals)
   \                     OLED_display_float_8x16:
    492          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   4C12         PUSH.B  R12
   \   000004   4D12         PUSH.B  R13
   \   000006   31802800     SUB.W   #0x28, SP
   \   00000A   0A4E         MOV.W   R14, R10
   \   00000C   0B4F         MOV.W   R15, R11
    493            const float _fround[6]={0.49,0.05,0.005,0.0005,0.00005,0.000005};
   \   00000E   0C41         MOV.W   SP, R12
   \   000010   3C501000     ADD.W   #0x10, R12
   \   000014   ........     MOVA    #`?<Constant {(4.90000009E-1F), (5.00000007E-2F)_1`, R14
   \   000018   ........     CALLA   #?Subroutine11
    494            char Str[15];
    495            char * str=Str;
    496            float scale;
    497            unsigned char i,d;
    498            if (number<0.0) 
    499            {
    500              number=-number;
    501              *str++='-';
   \                     ??CrossCallReturnLabel_10:
   \   00001C   54415000     MOV.B   0x50(SP), R4
    502            };
    503            if (decimals>5)
   \   000020   ........     CALLA   #?Subroutine20
    504              decimals=5;
    505            number=number+_fround[decimals];
   \                     ??CrossCallReturnLabel_26:
   \   000024   0F51         ADD.W   SP, R15
   \   000026   1E4F1000     MOV.W   0x10(R15), R14
   \   00002A   1F4F1200     MOV.W   0x12(R15), R15
   \   00002E   ........     CALLA   #?Subroutine18
    506            i=0;
    507            scale=1.0;
    508            while (number>=scale) {scale=scale*10.0; ++i;};
    509            if (i==0)
   \                     ??CrossCallReturnLabel_22:
   \   000032   ........     CALLA   #?Subroutine2
    510            {
    511              *str++='0';
    512            }
    513            else
    514            {
    515              while (i--)
    516              {
    517                scale=(float)((int)(0.5+scale/10.0));
    518                d=(unsigned char) (number/scale);
    519                *str++=d+'0';
    520                number=number-scale*d;
    521               };
    522            }
    523            if (decimals==0) {*str=0; OLED_display_string_8x16(y,x,Str);return;};
    524            *str++='.';
    525            while (decimals--)
    526            {
    527              number=number*10.0;
    528              d=(unsigned char)number;
    529              *str++=d+'0';
    530              number=number-d;
    531            }
    532            *str=0;
    533            OLED_display_string_8x16(y,x,Str);
   \                     ??CrossCallReturnLabel_0:
   \   000036   5D412800     MOV.B   0x28(SP), R13
   \   00003A   5C412A00     MOV.B   0x2a(SP), R12
   \   00003E   ........     CALLA   #OLED_display_string_8x16
    534          }
   \   000042   31502C00     ADD.W   #0x2c, SP
   \   000046   7416         POPM.A  #0x8, R11
   \   000048   1001         RETA
    535          /********************************************************************
    536          º¯Êý¹¦ÄÜ:»æÖÆÒ»¸öµã
    537          º¯ÊýÃû³Æ:OLED_PutPixel
    538          ÐÎÊ½²ÎÊý:y:ÐÐ
    539                   x:ÁÐ 0-127 
    540          ·µ»ØÖµ:  ¿Õ
    541          ÐÞ¸ÄÈË:  kofee
    542          ÐÞ¸ÄÊ±¼ä:2014/5/13
    543          *********************************************************************/

   \                                 In  segment CODE, align 2
    544          void OLED_PutPixel(uint8_t y,uint8_t x)
   \                     OLED_PutPixel:
    545          {
   \   000000   1B14         PUSHM.A #0x2, R11
   \   000002   4A4C         MOV.B   R12, R10
   \   000004   4B4D         MOV.B   R13, R11
    546              static unsigned char data1; //data1 µ±Ç°µãµÄÊý¾Ý
    547              OLED_set_pos(y,x);
   \   000006   ........     CALLA   #OLED_set_pos
    548              data1 |= 0x01<<(x%8);
   \   00000A   5F43         MOV.B   #0x1, R15
   \   00000C   4E4B         MOV.B   R11, R14
   \   00000E   7EF00700     AND.B   #0x7, R14
   \   000012   5E83         SUB.B   #0x1, R14
   \   000014   0230         JN      ??OLED_PutPixel_0
   \   000016                RPT     R14
   \   000016   CE184F5F     RLAX.B  R15
   \                     ??OLED_PutPixel_0:
   \   00001A   ....C2DF.... BISX.B  R15, &??data1
    549              OLED_write_byte(CMD,0xb0+(x>>3));
   \   000020                RPT     #0x3
   \   000020   42194B10     RRUX.B  R11
   \   000024   7B50B000     ADD.B   #0xb0, R11
   \   000028   4D4B         MOV.B   R11, R13
   \   00002A   ........     CALLA   #?Subroutine24
    550              OLED_write_byte(CMD,((y&0xf0)>>4)|0x10);
   \                     ??CrossCallReturnLabel_57:
   \   00002E   4D4A         MOV.B   R10, R13
   \   000030                RPT     #0x4
   \   000030   43194D10     RRUX.B  R13
   \   000034   7DD01000     BIS.B   #0x10, R13
   \   000038   ........     CALLA   #?Subroutine24
    551              OLED_write_byte(CMD,(y&0x0f)|0x00);
   \                     ??CrossCallReturnLabel_56:
   \   00003C   7AF00F00     AND.B   #0xf, R10
   \   000040   4D4A         MOV.B   R10, R13
   \   000042   ........     CALLA   #?Subroutine24
    552              OLED_write_byte(DATA,data1);
   \                     ??CrossCallReturnLabel_55:
   \   000046   ....5D42.... MOVX.B  &??data1, R13
   \   00004C   ........     CALLA   #??Subroutine9_0
    553          }
   \                     ??CrossCallReturnLabel_67:
   \   000050   1A16         POPM.A  #0x2, R11
   \   000052   1001         RETA

   \                                 In  segment DATA20_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??data1:
   \   000000                DS8 1
    554          /*************************************************************************
    555          *  º¯ÊýÃû³Æ£ºOLED_Printf_6x8
    556          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    557          *  ²ÎÊýËµÃ÷£º
    558          *  º¯Êý·µ»Ø£ºÎÞ
    559          *  Ê¹ÓÃÊ¾Àý£ºOLED_Printf_6x8(0,0,"Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
    560          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   31508800     ADD.W   #0x88, SP
   \   000004   7416         POPM.A  #0x8, R11
   \   000006   1001         RETA

   \                                 In  segment CODE, align 2
    561          void OLED_Printf_6x8(uint8_t y,uint8_t x,const char * fmt,...)
   \                     OLED_Printf_6x8:
    562          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   31808800     SUB.W   #0x88, SP
   \   000006   ........     CALLA   #?Subroutine10
    563            char OLED_String[128];
    564            va_list ap;
    565            va_start(ap,fmt);
    566            vsprintf(OLED_String,fmt,ap);
   \                     ??CrossCallReturnLabel_9:
   \   00000A   0312         PUSH.W  #0x0
   \   00000C   0F12         PUSH.W  R15
   \   00000E   CD0E         MOVA    R14, R13
   \   000010   CC09         MOVA    R9, R12
   \   000012   ........     CALLA   #vsprintf
    567            uint8_t lastposition=0;
   \   000016   ........     CALLA   #?Subroutine19
    568            int length=strlen(OLED_String);
    569            int TEXT_SIZE=OLED_W/6;
    570            for(int i=0;i<=length;i++)
   \                     ??CrossCallReturnLabel_25:
   \   00001A   2152         ADD.W   #0x4, SP
   \   00001C   0C93         CMP.W   #0x0, R12
   \   00001E   3538         JL      ??OLED_Printf_6x8_5
   \   000020   0449         MOV.W   R9, R4
    571            {
    572              if(OLED_String[i]=='\n')
   \                     ??OLED_Printf_6x8_2:
   \   000022   F4900A000000 CMP.B   #0xa, 0(R4)
   \   000028   2C20         JNE     ??OLED_Printf_6x8_6
    573              {
    574                uint8_t position=i;
   \   00002A   ........     CALLA   #?Subroutine12
   \                     ??CrossCallReturnLabel_13:
   \   00002E   123C         JMP     ??OLED_Printf_6x8_7
    575                while(position>lastposition)
    576                {
    577                  if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
    578                  {
    579                     OLED_write_Nchar_6x8(y,x,&OLED_String[lastposition],TEXT_SIZE);
   \                     ??OLED_Printf_6x8_0:
   \   000030   7F401500     MOV.B   #0x15, R15
   \   000034   1E410200     MOV.W   0x2(SP), R14
   \   000038   ........     CALLA   #?Subroutine14
    580                     y++;//»»ÐÐ
   \                     ??CrossCallReturnLabel_17:
   \   00003C   5B53         ADD.B   #0x1, R11
    581                     x=0;
   \   00003E   4843         MOV.B   #0x0, R8
    582                     lastposition+=TEXT_SIZE;
   \   000040   7A501500     ADD.B   #0x15, R10
   \   000044   1F410200     MOV.W   0x2(SP), R15
   \   000048   3F501500     ADD.W   #0x15, R15
   \   00004C   814F0200     MOV.W   R15, 0x2(SP)
   \   000050   3650EBFF     ADD.W   #0xffeb, R6
    583                  }
   \                     ??OLED_Printf_6x8_7:
   \   000054   6A91         CMP.B   @SP, R10
   \   000056   0E2C         JC      ??OLED_Printf_6x8_3
   \   000058   36901600     CMP.W   #0x16, R6
   \   00005C   E937         JGE     ??OLED_Printf_6x8_0
    584                  else
    585                  {
    586                     OLED_write_Nchar_6x8(y,x,&OLED_String[lastposition],(position-lastposition));
   \   00005E   6641         MOV.B   @SP, R6
   \   000060   468A         SUB.B   R10, R6
   \   000062   4F46         MOV.B   R6, R15
   \   000064   0E49         MOV.W   R9, R14
   \   000066   0E5A         ADD.W   R10, R14
   \   000068   ........     CALLA   #?Subroutine14
    587                     for(x+=(position-lastposition)*6;x < OLED_W;x++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \                     ??CrossCallReturnLabel_16:
   \   00006C                RPT     #0x6
   \   00006C   45184856     ADDX.B  R6, R8
   \   000070   ........     CALLA   #?Subroutine6
    588                     {
    589                       OLED_write_byte(DATA,0);  //Ð´ÈëÊý¾Ý
    590                     }
    591                     break;
    592                  }
    593                } 
    594                lastposition=position+1;
   \                     ??OLED_Printf_6x8_3:
   \   000074   6A41         MOV.B   @SP, R10
   \   000076   5A53         ADD.B   #0x1, R10
    595                //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
    596                x=0;
   \   000078   4843         MOV.B   #0x0, R8
    597                y++;
   \   00007A   5B53         ADD.B   #0x1, R11
    598                if(y>7)y=0;
   \   00007C   7B92         CMP.B   #0x8, R11
   \   00007E   0128         JNC     ??OLED_Printf_6x8_6
   \   000080   4B43         MOV.B   #0x0, R11
    599              }
    600            }
   \                     ??OLED_Printf_6x8_6:
   \   000082   1753         ADD.W   #0x1, R7
   \   000084   1453         ADD.W   #0x1, R4
   \   000086   0597         CMP.W   R7, R5
   \   000088   CC37         JGE     ??OLED_Printf_6x8_2
    601            if(lastposition<length)
   \                     ??OLED_Printf_6x8_5:
   \   00008A   474A         MOV.B   R10, R7
   \   00008C   0795         CMP.W   R5, R7
   \   00008E   0634         JGE     ??OLED_Printf_6x8_8
    602            {
    603              OLED_write_Nchar_6x8(y,x,&OLED_String[lastposition],(length-lastposition));
   \   000090   4F45         MOV.B   R5, R15
   \   000092   4F8A         SUB.B   R10, R15
   \   000094   0957         ADD.W   R7, R9
   \   000096   0E49         MOV.W   R9, R14
   \   000098   ........     CALLA   #?Subroutine14
    604            }
    605            va_end(ap);
    606          }
   \                     ??OLED_Printf_6x8_8:
   \   00009C   ....         JMP     ?Subroutine0
   \   00009E   0343         NOP

   \                                 In  segment CODE, align 2
   \                     ?Subroutine19:
   \   000000   4A43         MOV.B   #0x0, R10
   \   000002   CC09         MOVA    R9, R12
   \   000004   ........     CALLA   #strlen
   \   000008   054C         MOV.W   R12, R5
   \   00000A   0743         MOV.W   #0x0, R7
   \   00000C   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine14:
   \   000000   4D48         MOV.B   R8, R13
   \   000002   4C4B         MOV.B   R11, R12
   \   000004   ........     BRA     #OLED_write_Nchar_6x8

   \                                 In  segment CODE, align 2
   \                     ?Subroutine12:
   \   000000   C1470400     MOV.B   R7, 0x4(SP)
   \   000004   4647         MOV.B   R7, R6
   \   000006   068A         SUB.W   R10, R6
   \   000008   0F49         MOV.W   R9, R15
   \   00000A   0F5A         ADD.W   R10, R15
   \   00000C   814F0600     MOV.W   R15, 0x6(SP)
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine10:
   \   000000   4B4C         MOV.B   R12, R11
   \   000002   484D         MOV.B   R13, R8
   \   000004   0F41         MOV.W   SP, R15
   \   000006   3F50B000     ADD.W   #0xb0, R15
   \   00000A   710F0800     MOVA    R15, 0x8(SP)
   \   00000E   0941         MOV.W   SP, R9
   \   000010   39500C00     ADD.W   #0xc, R9
   \   000014   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine6:
   \   000000   78908000     CMP.B   #0x80, R8
   \   000004   092C         JC      ??OLED_Printf_8x16_4
   \   000006   7A408000     MOV.B   #0x80, R10
   \   00000A   4A88         SUB.B   R8, R10
   \                     ??OLED_Printf_8x16_1:
   \   00000C   4D43         MOV.B   #0x0, R13
   \   00000E   5C43         MOV.B   #0x1, R12
   \   000010   ........     CALLA   #OLED_write_byte
   \   000014   7A53         ADD.B   #0xff, R10
   \   000016   FA23         JNE     ??OLED_Printf_8x16_1
   \                     ??OLED_Printf_8x16_4:
   \   000018   1001         RETA
    607          /*************************************************************************
    608          *  º¯ÊýÃû³Æ£ºOLED_Printf_8x16
    609          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    610          *  ²ÎÊýËµÃ÷£º
    611          *  º¯Êý·µ»Ø£ºÎÞ
    612          *  Ê¹ÓÃÊ¾Àý£ºOLED_Printf_8x16(0,0,"Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
    613          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
    614          void OLED_Printf_8x16(uint8_t y,uint8_t x,const char * fmt,...)
   \                     OLED_Printf_8x16:
    615          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   31808800     SUB.W   #0x88, SP
   \   000006   ........     CALLA   #?Subroutine10
    616            char OLED_String[128];
    617            va_list ap;
    618            va_start(ap,fmt);
    619            vsprintf(OLED_String,fmt,ap);
   \                     ??CrossCallReturnLabel_8:
   \   00000A   0312         PUSH.W  #0x0
   \   00000C   0F12         PUSH.W  R15
   \   00000E   CD0E         MOVA    R14, R13
   \   000010   CC09         MOVA    R9, R12
   \   000012   ........     CALLA   #vsprintf
    620            uint8_t lastposition=0;
   \   000016   ........     CALLA   #?Subroutine19
    621            int length=strlen(OLED_String);
    622            int TEXT_SIZE=OLED_W/8;
    623            for(int i=0;i<=length;i++)
   \                     ??CrossCallReturnLabel_24:
   \   00001A   2152         ADD.W   #0x4, SP
   \   00001C   0C93         CMP.W   #0x0, R12
   \   00001E   3338         JL      ??OLED_Printf_8x16_7
   \   000020   0449         MOV.W   R9, R4
    624            {
    625              if(OLED_String[i]=='\n')
   \                     ??OLED_Printf_8x16_2:
   \   000022   F4900A000000 CMP.B   #0xa, 0(R4)
   \   000028   2A20         JNE     ??OLED_Printf_8x16_5
    626              {
    627                uint8_t position=i;
   \   00002A   ........     CALLA   #?Subroutine12
   \                     ??CrossCallReturnLabel_12:
   \   00002E   123C         JMP     ??OLED_Printf_8x16_8
    628                while(position>lastposition)
    629                {
    630                  if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
    631                  {
    632                     OLED_write_Nchar_8x16(y,x,&OLED_String[lastposition],TEXT_SIZE);
   \                     ??OLED_Printf_8x16_0:
   \   000030   7F401000     MOV.B   #0x10, R15
   \   000034   1E410200     MOV.W   0x2(SP), R14
   \   000038   ........     CALLA   #?Subroutine13
    633                     y+=2;//»»ÐÐ
   \                     ??CrossCallReturnLabel_15:
   \   00003C   6B53         ADD.B   #0x2, R11
    634                     x=0;
   \   00003E   4843         MOV.B   #0x0, R8
    635                     lastposition+=TEXT_SIZE;
   \   000040   7A501000     ADD.B   #0x10, R10
   \   000044   1F410200     MOV.W   0x2(SP), R15
   \   000048   3F501000     ADD.W   #0x10, R15
   \   00004C   814F0200     MOV.W   R15, 0x2(SP)
   \   000050   3650F0FF     ADD.W   #0xfff0, R6
    636                  }
   \                     ??OLED_Printf_8x16_8:
   \   000054   6A91         CMP.B   @SP, R10
   \   000056   0F2C         JC      ??OLED_Printf_8x16_3
   \   000058   36901100     CMP.W   #0x11, R6
   \   00005C   E937         JGE     ??OLED_Printf_8x16_0
    637                  else
    638                  {
    639                    OLED_write_Nchar_8x16(y,x,&OLED_String[lastposition],(position-lastposition)); 
   \   00005E   6641         MOV.B   @SP, R6
   \   000060   468A         SUB.B   R10, R6
   \   000062   4F46         MOV.B   R6, R15
   \   000064   0E49         MOV.W   R9, R14
   \   000066   0E5A         ADD.W   R10, R14
   \   000068   ........     CALLA   #?Subroutine13
    640                    for(x+=(position-lastposition)*8;x < OLED_W;x++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \                     ??CrossCallReturnLabel_14:
   \   00006C                RPT     #0x3
   \   00006C   42184656     RLAX.B  R6
   \   000070   4856         ADD.B   R6, R8
   \   000072   ........     CALLA   #?Subroutine6
    641                    {
    642                       OLED_write_byte(DATA,0);  //Ð´ÈëÊý¾Ý
    643                    }
    644                    break;
    645                  }
    646                } 
    647                lastposition=position+1;
   \                     ??OLED_Printf_8x16_3:
   \   000076   6A41         MOV.B   @SP, R10
   \   000078   5A53         ADD.B   #0x1, R10
    648                //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
    649                x=0;
   \   00007A   ........     CALLA   #?Subroutine17
    650                y+=2;
    651                if(y>6)y=0;
    652              }
    653            }
   \                     ??OLED_Printf_8x16_5:
   \   00007E   1753         ADD.W   #0x1, R7
   \   000080   1453         ADD.W   #0x1, R4
   \   000082   0597         CMP.W   R7, R5
   \   000084   CE37         JGE     ??OLED_Printf_8x16_2
    654            if(lastposition<length)
   \                     ??OLED_Printf_8x16_7:
   \   000086   474A         MOV.B   R10, R7
   \   000088   0795         CMP.W   R5, R7
   \   00008A   0634         JGE     ??OLED_Printf_8x16_9
    655              OLED_write_Nchar_8x16(y,x,&OLED_String[lastposition],(length-lastposition));
   \   00008C   4F45         MOV.B   R5, R15
   \   00008E   4F8A         SUB.B   R10, R15
   \   000090   0957         ADD.W   R7, R9
   \   000092   0E49         MOV.W   R9, R14
   \   000094   ........     CALLA   #?Subroutine13
    656            va_end(ap);
    657          }
   \                     ??OLED_Printf_8x16_9:
   \   000098   ....         JMP     ?Subroutine0
   \   00009A   0343         NOP

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine13:
   \   000000   4D48         MOV.B   R8, R13
   \   000002   4C4B         MOV.B   R11, R12
   \   000004   ........     BRA     #OLED_write_Nchar_8x16
    658          /*************************************************************************
    659          *  º¯ÊýÃû³Æ£ºOLED_Printf
    660          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    661          *  ²ÎÊýËµÃ÷£º
    662          *  º¯Êý·µ»Ø£ºÎÞ
    663          *  Ê¹ÓÃÊ¾Àý£ºOLED_Printf("Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
    664          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   000000   4D43         MOV.B   #0x0, R13
   \   000002                REQUIRE ??Subroutine9_0
   \   000002                // Fall through to label ??Subroutine9_0

   \                                 In  segment CODE, align 2, keep-with-next
    665          void OLED_Printf(const char * fmt,...)
   \                     OLED_Printf:
    666          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   31808800     SUB.W   #0x88, SP
    667            char OLED_String[128];
    668            static uint8_t x=0,y=0;
    669            va_list ap; 
    670            va_start(ap,fmt);
   \   000006   0F41         MOV.W   SP, R15
   \   000008   3F50AC00     ADD.W   #0xac, R15
   \   00000C   710F0400     MOVA    R15, 0x4(SP)
    671            vsprintf(OLED_String,fmt,ap);
   \   000010   0A41         MOV.W   SP, R10
   \   000012   3A52         ADD.W   #0x8, R10
   \   000014   0312         PUSH.W  #0x0
   \   000016   0F12         PUSH.W  R15
   \   000018   CD0C         MOVA    R12, R13
   \   00001A   CC0A         MOVA    R10, R12
   \   00001C   ........     CALLA   #vsprintf
    672            uint8_t lastposition=0;
   \   000020   4B43         MOV.B   #0x0, R11
    673            int length=strlen(OLED_String);
   \   000022   CC0A         MOVA    R10, R12
   \   000024   ........     CALLA   #strlen
   \   000028   814C0600     MOV.W   R12, 0x6(SP)
    674            int TEXT_SIZE=OLED_W/6;
    675            for(int i=0;i<=length;i++)//²éÕÒ»»ÐÐ·û
   \   00002C   0743         MOV.W   #0x0, R7
   \   00002E   ....5942.... MOVX.B  &??y, R9
   \   000034   2152         ADD.W   #0x4, SP
   \   000036   0C93         CMP.W   #0x0, R12
   \   000038   4438         JL      ??OLED_Printf_9
   \   00003A   054A         MOV.W   R10, R5
   \   00003C   ........     MOVA    #??x, R8
    676            {
    677              if(OLED_String[i] == '\n')
   \                     ??OLED_Printf_2:
   \   000040   F5900A000000 CMP.B   #0xa, 0(R5)
   \   000046   3820         JNE     ??OLED_Printf_6
    678              {
    679                uint8_t position=i;
   \   000048   C1470000     MOV.B   R7, 0(SP)
   \   00004C   4647         MOV.B   R7, R6
   \   00004E   068B         SUB.W   R11, R6
   \   000050   044A         MOV.W   R10, R4
   \   000052   045B         ADD.W   R11, R4
   \   000054   0F3C         JMP     ??OLED_Printf_10
    680                while(position>lastposition)
    681                {
    682                  if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚTEXT_SIZE£¬ÔòÒ²ÐèÒª»»ÐÐ
    683                  {
    684                     OLED_write_Nchar_6x8(y,x,&OLED_String[lastposition],TEXT_SIZE);
   \                     ??OLED_Printf_0:
   \   000056   7F401500     MOV.B   #0x15, R15
   \   00005A   0E44         MOV.W   R4, R14
   \   00005C   ........     CALLA   #?Subroutine15
    685                     y++;//»»ÐÐ
   \                     ??CrossCallReturnLabel_20:
   \   000060   ........     CALLA   #?Subroutine16
    686                     if(y>7)
    687                     {
    688                       y=0;
    689                       OLED_fill_ram(0x00);                                                 //È«ÆÁÌî³äÊý¾Ý
    690                     }
    691                     x=0;
   \                     ??CrossCallReturnLabel_21:
   \   000064   C8430000     MOV.B   #0x0, 0(R8)
    692                     lastposition+=TEXT_SIZE;
   \   000068   7B501500     ADD.B   #0x15, R11
   \   00006C   34501500     ADD.W   #0x15, R4
   \   000070   3650EBFF     ADD.W   #0xffeb, R6
    693                  }
   \                     ??OLED_Printf_10:
   \   000074   6B91         CMP.B   @SP, R11
   \   000076   1A2C         JC      ??OLED_Printf_11
   \   000078   36901600     CMP.W   #0x16, R6
   \   00007C   EC37         JGE     ??OLED_Printf_0
    694                  else
    695                  {
    696                     OLED_write_Nchar_6x8(y,x,&OLED_String[lastposition],(position-lastposition));  //ÏÔÊ¾¸ÃÐÐ×Ö·û´®
   \   00007E   6641         MOV.B   @SP, R6
   \   000080   468B         SUB.B   R11, R6
   \   000082   4F46         MOV.B   R6, R15
   \   000084   0E4A         MOV.W   R10, R14
   \   000086   0E5B         ADD.W   R11, R14
   \   000088   ........     CALLA   #?Subroutine15
    697                     for(x+=(position-lastposition)*6;x < OLED_W;x++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \                     ??CrossCallReturnLabel_19:
   \   00008C   4E46         MOV.B   R6, R14
   \   00008E                RPT     #0x5
   \   00008E   44184E56     ADDX.B  R6, R14
   \   000092   C85E0000     ADD.B   R14, 0(R8)
   \   000096   F89080000000 CMP.B   #0x80, 0(R8)
   \   00009C   072C         JC      ??OLED_Printf_11
   \   00009E   7B408000     MOV.B   #0x80, R11
   \   0000A2   6B88         SUB.B   @R8, R11
    698                     {
    699                       OLED_write_byte(DATA,0);  //Ð´ÈëÊý¾Ý
   \                     ??OLED_Printf_1:
   \   0000A4   ........     CALLA   #?Subroutine9
    700                     }
   \                     ??CrossCallReturnLabel_77:
   \   0000A8   7B53         ADD.B   #0xff, R11
   \   0000AA   FC23         JNE     ??OLED_Printf_1
    701                     break;
    702                  }
    703                } 
    704                lastposition=position+1;
   \                     ??OLED_Printf_11:
   \   0000AC   6B41         MOV.B   @SP, R11
   \   0000AE   5B53         ADD.B   #0x1, R11
    705                //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
    706                x=0;
   \   0000B0   C8430000     MOV.B   #0x0, 0(R8)
    707                y++;
   \   0000B4   ........     CALLA   #?Subroutine16
    708                if(y>7)
    709                {
    710                   y=0;
    711                   OLED_fill_ram(0x00);                                                 //È«ÆÁÌî³äÊý¾Ý
    712                }
    713              }
    714            }
   \                     ??OLED_Printf_6:
   \   0000B8   1753         ADD.W   #0x1, R7
   \   0000BA   1553         ADD.W   #0x1, R5
   \   0000BC   81970200     CMP.W   R7, 0x2(SP)
   \   0000C0   BF37         JGE     ??OLED_Printf_2
    715            if(lastposition<length)//Ã»ÓÐ»»ÐÐ·û»òÓÐÊ£Óà²¿·ÖÃ»ÓÐÏÔÊ¾Ê±
   \                     ??OLED_Printf_9:
   \   0000C2   474B         MOV.B   R11, R7
   \   0000C4   17910200     CMP.W   0x2(SP), R7
   \   0000C8   2434         JGE     ??OLED_Printf_12
    716            {
    717              OLED_write_Nchar_6x8(y,x,&OLED_String[lastposition],(length-lastposition));
   \   0000CA   56410200     MOV.B   0x2(SP), R6
   \   0000CE   468B         SUB.B   R11, R6
   \   0000D0   ........     MOVA    #??x, R8
   \   0000D4   4F46         MOV.B   R6, R15
   \   0000D6   0A57         ADD.W   R7, R10
   \   0000D8   0E4A         MOV.W   R10, R14
   \   0000DA   ........     CALLA   #?Subroutine15
    718              x+=(length-lastposition)*6u;
   \                     ??CrossCallReturnLabel_18:
   \   0000DE   6A48         MOV.B   @R8, R10
   \   0000E0                RPT     #0x6
   \   0000E0   45184A56     ADDX.B  R6, R10
    719              while(x>=(TEXT_SIZE*6))
   \                     ??OLED_Printf_3:
   \   0000E4   7A907E00     CMP.B   #0x7e, R10
   \   0000E8   0A28         JNC     ??OLED_Printf_13
    720              {
    721                 x-=(TEXT_SIZE*6);
   \   0000EA   7A508200     ADD.B   #0x82, R10
    722                 y++;
   \   0000EE   5953         ADD.B   #0x1, R9
    723                 if(y>7)
   \   0000F0   7992         CMP.B   #0x8, R9
   \   0000F2   F82B         JNC     ??OLED_Printf_3
    724                 {
    725                   y=0;
   \   0000F4   4943         MOV.B   #0x0, R9
    726                   x=0;
   \   0000F6   4A43         MOV.B   #0x0, R10
    727                   OLED_fill_ram(0x00);                                                 //È«ÆÁÌî³äÊý¾Ý
   \   0000F8   4C43         MOV.B   #0x0, R12
   \   0000FA   ........     CALLA   #OLED_fill_ram
   \                     ??OLED_Printf_13:
   \   0000FE   C84A0000     MOV.B   R10, 0(R8)
    728                 }
    729              }
    730              for(int i=x;i < OLED_W;i++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \   000102   3B408000     MOV.W   #0x80, R11
   \   000106   4F4A         MOV.B   R10, R15
   \   000108   0B8F         SUB.W   R15, R11
    731              {
    732                OLED_write_byte(DATA,0);  //Ð´ÈëÊý¾Ý
   \                     ??OLED_Printf_4:
   \   00010A   ........     CALLA   #?Subroutine9
    733              }
   \                     ??CrossCallReturnLabel_76:
   \   00010E   3B53         ADD.W   #0xffff, R11
   \   000110   FC23         JNE     ??OLED_Printf_4
   \                     ??OLED_Printf_12:
   \   000112   ....C249.... MOVX.B  R9, &??y
    734            }
    735            va_end(ap);
    736          }
   \   000118                REQUIRE ?Subroutine0
   \   000118                // Fall through to label ?Subroutine0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine16:
   \   000000   5953         ADD.B   #0x1, R9
   \   000002   7992         CMP.B   #0x8, R9
   \   000004   0428         JNC     ??OLED_Printf_7
   \   000006   4943         MOV.B   #0x0, R9
   \   000008   4C43         MOV.B   #0x0, R12
   \   00000A   ........     CALLA   #OLED_fill_ram
   \                     ??OLED_Printf_7:
   \   00000E   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine15:
   \   000000   6D48         MOV.B   @R8, R13
   \   000002   4C49         MOV.B   R9, R12
   \   000004   ........     BRA     #OLED_write_Nchar_6x8

   \                                 In  segment DATA20_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??x:
   \   000000                DS8 1

   \                                 In  segment DATA20_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??y:
   \   000000                DS8 1

   \                                 In  segment DATA20_C, align 2, align-sorted
   \                     `?<Constant {(4.90000009E-1F), (5.00000007E-2F)`:
   \   000000   48E1FA3ECDCC DC32 3EFAE148H, 3D4CCCCDH, 3BA3D70AH, 3A03126FH, 3851B717H, 36A7C5ACH
   \            4C3D0AD7A33B
   \            6F12033A17B7
   \            5138ACC5A736

   \                                 In  segment DATA20_C, align 2, align-sorted
   \                     `?<Constant {(4.90000009E-1F), (5.00000007E-2F)_1`:
   \   000000   48E1FA3ECDCC DC32 3EFAE148H, 3D4CCCCDH, 3BA3D70AH, 3A03126FH, 3851B717H, 36A7C5ACH
   \            4C3D0AD7A33B
   \            6F12033A17B7
   \            5138ACC5A736

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
       4  OLED_Init
              4 -> OLED_Port_Init
              4 -> OLED_fill_ram
              4 -> OLED_write_byte
       4  OLED_Port_Init
              4 -> GPIO_MultiBits_Init
              4 -> I2C_MasterInit
     176  OLED_Printf
            172 -> OLED_fill_ram
            172 -> OLED_write_Nchar_6x8
            172 -> OLED_write_byte
            176 -> strlen
            176 -> vsprintf
     176  OLED_Printf_6x8
            172 -> OLED_write_Nchar_6x8
            172 -> OLED_write_byte
            176 -> strlen
            176 -> vsprintf
     176  OLED_Printf_8x16
            172 -> OLED_write_Nchar_8x16
            172 -> OLED_write_byte
            176 -> strlen
            176 -> vsprintf
      12  OLED_PutPixel
             12 -> OLED_set_pos
             12 -> OLED_write_byte
      36  OLED_display_chinese
             36 -> OLED_set_pos
             36 -> OLED_write_byte
      84  OLED_display_float_6x8
             84 -> OLED_display_string_6x8
             84 -> _Add32f
             84 -> _Cast32fto32s
             84 -> _Cast32fto32u
             84 -> _Cast32sto32f
             84 -> _Cast32uto32f
             84 -> _CmpGe32f
             84 -> _CmpLt32f
             84 -> _Div32f
             84 -> _Mul32f
             84 -> _Sub32f
      80  OLED_display_float_8x16
             80 -> OLED_display_string_8x16
             80 -> _Add32f
             80 -> _Cast32fto32s
             80 -> _Cast32fto32u
             80 -> _Cast32sto32f
             80 -> _Cast32uto32f
             80 -> _CmpGe32f
             80 -> _CmpLt32f
             80 -> _Div32f
             80 -> _Mul32f
             80 -> _Sub32f
      44  OLED_display_number_6x8
             44 -> OLED_display_string_6x8
      44  OLED_display_number_8x16
             44 -> OLED_display_string_8x16
      20  OLED_display_string_6x8
             20 -> OLED_write_char_6x8
      20  OLED_display_string_8x16
             20 -> OLED_write_char_8x16
      36  OLED_fill_part
             36 -> OLED_write_byte
      20  OLED_fill_ram
             20 -> OLED_write_byte
       8  OLED_set_pos
              8 -> OLED_write_byte
      20  OLED_write_Line_6x8
             20 -> OLED_write_char_6x8
      20  OLED_write_Line_8x16
             20 -> OLED_write_char_8x16
      20  OLED_write_Nchar_6x8
             20 -> OLED_write_char_6x8
      20  OLED_write_Nchar_8x16
             20 -> OLED_write_char_8x16
       8  OLED_write_byte
      12  OLED_write_char_6x8
             12 -> OLED_set_pos
             12 -> OLED_write_byte
      28  OLED_write_char_8x16
             28 -> OLED_set_pos
             28 -> OLED_write_byte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant {(4.90000009E-1F), (5.00000007E-2F)
      24  ?<Constant {(4.90000009E-1F), (5.00000007E-2F)_1
       6  ??Subroutine9_0
       8  ?Subroutine0
       6  ?Subroutine1
      22  ?Subroutine10
      46  ?Subroutine11
      18  ?Subroutine12
       8  ?Subroutine13
       8  ?Subroutine14
       8  ?Subroutine15
      16  ?Subroutine16
      14  ?Subroutine17
      60  ?Subroutine18
      14  ?Subroutine19
     140  ?Subroutine2
      16  ?Subroutine20
      14  ?Subroutine21
      26  ?Subroutine22
      18  ?Subroutine23
       6  ?Subroutine24
     124  ?Subroutine3
      46  ?Subroutine4
      38  ?Subroutine5
      26  ?Subroutine6
       8  ?Subroutine7
       2  ?Subroutine8
       2  ?Subroutine9
     570  ASCII_6X8
    1520  ASCII_8X16
     576  FONT_CHINESE
     156  OLED_Init
      64  OLED_Port_Init
     280  OLED_Printf
     160  OLED_Printf_6x8
     156  OLED_Printf_8x16
      84  OLED_PutPixel
     110  OLED_display_chinese
      74  OLED_display_float_6x8
      74  OLED_display_float_8x16
      16  OLED_display_number_6x8
      12  OLED_display_number_8x16
      10  OLED_display_string_6x8
      10  OLED_display_string_8x16
      80  OLED_fill_part
      48  OLED_fill_ram
      42  OLED_set_pos
      30  OLED_write_Line_6x8
      36  OLED_write_Line_8x16
      52  OLED_write_Nchar_6x8
      44  OLED_write_Nchar_8x16
      64  OLED_write_byte
      90  OLED_write_char_6x8
      80  OLED_write_char_8x16
       2  _A_PBOUT_L
       2  _A_PDOUT_L
       1  data1
       1  x
       1  y

 
 2 472 bytes in segment CODE
     4 bytes in segment DATA16_AN
 2 714 bytes in segment DATA20_C
     3 bytes in segment DATA20_Z
 
 2 472 bytes of CODE  memory
 2 714 bytes of CONST memory
     3 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: none
