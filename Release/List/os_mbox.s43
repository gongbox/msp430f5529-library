///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      06/Jun/2016  16:42:30 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\os_mbox.c                      /
//    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\os_mbox.c -D NDEBUG -D         /
//                     RAM_VECTOR -lC C:\Users\615\Desktop\MSP430\MSP430F5529 /
//                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\List\ -lA               /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\          /
//                     -D__MSP430F5529__ -e --double=32 --dlib_config         /
//                     "D:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº /
//                     ¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MS /
//                     P430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                 /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                   /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I      /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\12864\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\oled\ -I C:\Users\615\Desktop\MSP430\ /
//                     MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc /
//                     \ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\ /
//                     C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\src\ -I                  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\inc\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\src\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\ -I                           /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\2.2TFT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\delay\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\ -I C:\Users\615\Desktop\MSP430\MSP430F /
//                     5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\inc\ -I              /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\src\ -I C:\Users\615\Desktop\MSP430\MSP /
//                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\ -I                /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\User\USER\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\App\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\ -I                         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\        /
//                     --core=430X --data_model=large -Oh --multiplier=32     /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\os_mbox.s43                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME os_mbox

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC OSMboxAccept
        FUNCTION OSMboxAccept,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSMboxCreate
        FUNCTION OSMboxCreate,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC OSMboxDel
        FUNCTION OSMboxDel,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OSMboxPend
        FUNCTION OSMboxPend,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC OSMboxPendAbort
        FUNCTION OSMboxPendAbort,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC OSMboxPost
        FUNCTION OSMboxPost,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC OSMboxPostOpt
        FUNCTION OSMboxPostOpt,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC OSMboxQuery
        FUNCTION OSMboxQuery,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN OSCPUSaveSR
        FUNCTION OSCPUSaveSR,0202H
        EXTERN OSCPURestoreSR
        FUNCTION OSCPURestoreSR,0202H
        EXTERN OS_EventTaskRdy
        FUNCTION OS_EventTaskRdy,0202H
        EXTERN OS_Sched
        FUNCTION OS_Sched,0202H
        EXTERN OSIntNesting
        EXTERN OSLockNesting
        EXTERN OSTCBCur
        EXTERN OS_EventTaskWait
        FUNCTION OS_EventTaskWait,0202H
        EXTERN OS_EventTaskRemove
        FUNCTION OS_EventTaskRemove,0202H
        EXTERN OSEventFreeList
        EXTERN OS_EventWaitListInit
        FUNCTION OS_EventWaitListInit,0202H

// C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CORE\os_mbox.c
//    1 /*
//    2 *********************************************************************************************************
//    3 *                                                uC/OS-II
//    4 *                                          The Real-Time Kernel
//    5 *                                       MESSAGE MAILBOX MANAGEMENT
//    6 *
//    7 *                              (c) Copyright 1992-2009, Micrium, Weston, FL
//    8 *                                           All Rights Reserved
//    9 *
//   10 * File    : OS_MBOX.C
//   11 * By      : Jean J. Labrosse
//   12 * Version : V2.91
//   13 *
//   14 * LICENSING TERMS:
//   15 * ---------------
//   16 *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
//   17 * If you plan on using  uC/OS-II  in a commercial product you need to contact Micriµm to properly license
//   18 * its use in your product. We provide ALL the source code for your convenience and to help you experience
//   19 * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
//   20 * licensing fee.
//   21 *********************************************************************************************************
//   22 */
//   23 
//   24 #ifndef  OS_MASTER_FILE
//   25 #include "ucos_ii.h"
//   26 #endif
//   27 
//   28 #if OS_MBOX_EN > 0u
//   29 /*
//   30 *********************************************************************************************************
//   31 *                                     ACCEPT MESSAGE FROM MAILBOX
//   32 *
//   33 * Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPend(),
//   34 *              OSMboxAccept() does not suspend the calling task if a message is not available.
//   35 *
//   36 * Arguments  : pevent        is a pointer to the event control block
//   37 *
//   38 * Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cleared
//   39 *                            so the next time OSMboxAccept() is called, the mailbox will be empty.
//   40 *              == (void *)0  if the mailbox is empty or,
//   41 *                            if 'pevent' is a NULL pointer or,
//   42 *                            if you didn't pass the proper event pointer.
//   43 *********************************************************************************************************
//   44 */
//   45 
//   46 #if OS_MBOX_ACCEPT_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   47 void  *OSMboxAccept (OS_EVENT *pevent)
OSMboxAccept:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function OSMboxAccept
//   48 {
        FUNCALL OSMboxAccept, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSMboxAccept, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
//   49     void      *pmsg;
//   50 #if OS_CRITICAL_METHOD == 3u                              /* Allocate storage for CPU status register  */
//   51     OS_CPU_SR  cpu_sr = 0u;
//   52 #endif
//   53 
//   54 
//   55 
//   56 #if OS_ARG_CHK_EN > 0u
//   57     if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
//   58         return ((void *)0);
//   59     }
//   60 #endif
//   61     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxAccept_0
//   62         return ((void *)0);
        MOVA    #0x0, R12
        JMP     ??OSMboxAccept_1
//   63     }
//   64     OS_ENTER_CRITICAL();
??OSMboxAccept_0:
        CALLA   #OSCPUSaveSR
//   65     pmsg               = pevent->OSEventPtr;
        MOVA    0x2(R10), R11
//   66     pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
        MOVX.A  #0x0, 0x2(R10)
//   67     OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//   68     return (pmsg);                                        /* Return the message received (or NULL)     */
        MOVA    R11, R12
??OSMboxAccept_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   69 }
//   70 #endif
//   71 /*$PAGE*/
//   72 /*
//   73 *********************************************************************************************************
//   74 *                                        CREATE A MESSAGE MAILBOX
//   75 *
//   76 * Description: This function creates a message mailbox if free event control blocks are available.
//   77 *
//   78 * Arguments  : pmsg          is a pointer to a message that you wish to deposit in the mailbox.  If
//   79 *                            you set this value to the NULL pointer (i.e. (void *)0) then the mailbox
//   80 *                            will be considered empty.
//   81 *
//   82 * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
//   83 *                                created mailbox
//   84 *              == (OS_EVENT *)0  if no event control blocks were available
//   85 *********************************************************************************************************
//   86 */
//   87 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   88 OS_EVENT  *OSMboxCreate (void *pmsg)
OSMboxCreate:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function OSMboxCreate
//   89 {
        FUNCALL OSMboxCreate, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSMboxCreate, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSMboxCreate, OS_EventWaitListInit
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
//   90     OS_EVENT  *pevent;
//   91 #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
//   92     OS_CPU_SR  cpu_sr = 0u;
//   93 #endif
//   94 
//   95 
//   96 
//   97 #ifdef OS_SAFETY_CRITICAL_IEC61508
//   98     if (OSSafetyCriticalStartFlag == OS_TRUE) {
//   99         OS_SAFETY_CRITICAL_EXCEPTION();
//  100     }
//  101 #endif
//  102 
//  103     if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
        CMPX.B  #0x0, &OSIntNesting
        JEQ     ??OSMboxCreate_0
//  104         return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
        MOVA    #0x0, R12
        JMP     ??OSMboxCreate_1
//  105     }
//  106     OS_ENTER_CRITICAL();
??OSMboxCreate_0:
        CALLA   #OSCPUSaveSR
        MOVA    &OSEventFreeList, R15
        MOVA    R15, R11
//  107     pevent = OSEventFreeList;                    /* Get next free event control block                  */
//  108     if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
        CMPA    #0x0, R15
        JEQ     ??OSMboxCreate_2
//  109         OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
        MOVX.A  0x2(R15), &OSEventFreeList
//  110     }
//  111     OS_EXIT_CRITICAL();
??OSMboxCreate_2:
        CALLA   #OSCPURestoreSR
//  112     if (pevent != (OS_EVENT *)0) {
        CMPA    #0x0, R11
        JEQ     ??OSMboxCreate_3
//  113         pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
        MOV.B   #0x1, 0(R11)
//  114         pevent->OSEventCnt     = 0u;
        MOV.W   #0x0, 0x6(R11)
//  115         pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
        MOVA    R10, 0x2(R11)
//  116 #if OS_EVENT_NAME_EN > 0u
//  117         pevent->OSEventName    = (INT8U *)(void *)"?";
//  118 #endif
//  119         OS_EventWaitListInit(pevent);
        MOVA    R11, R12
        CALLA   #OS_EventWaitListInit
//  120     }
//  121     return (pevent);                             /* Return pointer to event control block              */
??OSMboxCreate_3:
        MOVA    R11, R12
??OSMboxCreate_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//  122 }

        RSEG CODE:CODE:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function OSMboxPostOpt
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+24
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function OSMboxPostOpt
          CFI (cfiCond3) Conditional ??OSMboxPostOpt_7
          CFI (cfiCond3) R8L Frame(CFA, -20)
          CFI (cfiCond3) R8H Frame(CFA, -18)
          CFI (cfiCond3) R9L Frame(CFA, -16)
          CFI (cfiCond3) R9H Frame(CFA, -14)
          CFI (cfiCond3) R10L Frame(CFA, -12)
          CFI (cfiCond3) R10H Frame(CFA, -10)
          CFI (cfiCond3) R11L Frame(CFA, -8)
          CFI (cfiCond3) R11H Frame(CFA, -6)
          CFI (cfiCond3) CFA SP+24
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function OSMboxPost
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond4) R8L Frame(CFA, -20)
          CFI (cfiCond4) R8H Frame(CFA, -18)
          CFI (cfiCond4) R9L Frame(CFA, -16)
          CFI (cfiCond4) R9H Frame(CFA, -14)
          CFI (cfiCond4) R10L Frame(CFA, -12)
          CFI (cfiCond4) R10H Frame(CFA, -10)
          CFI (cfiCond4) R11L Frame(CFA, -8)
          CFI (cfiCond4) R11H Frame(CFA, -6)
          CFI (cfiCond4) CFA SP+24
          CFI Block cfiPicker5 Using cfiCommon1
          CFI (cfiPicker5) NoFunction
          CFI (cfiPicker5) Picker
        MOV.B   #0x0, R15
        MOV.B   #0x2, R14
        MOVA    R8, R13
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiPicker5
        REQUIRE ?Subroutine5
        // Fall through to label ?Subroutine5
//  123 /*$PAGE*/
//  124 /*
//  125 *********************************************************************************************************
//  126 *                                         DELETE A MAIBOX
//  127 *
//  128 * Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
//  129 *
//  130 * Arguments  : pevent        is a pointer to the event control block associated with the desired
//  131 *                            mailbox.
//  132 *
//  133 *              opt           determines delete options as follows:
//  134 *                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
//  135 *                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
//  136 *                                                    In this case, all the tasks pending will be readied.
//  137 *
//  138 *              perr          is a pointer to an error code that can contain one of the following values:
//  139 *                            OS_ERR_NONE             The call was successful and the mailbox was deleted
//  140 *                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an ISR
//  141 *                            OS_ERR_INVALID_OPT      An invalid option was specified
//  142 *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
//  143 *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
//  144 *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
//  145 *
//  146 * Returns    : pevent        upon error
//  147 *              (OS_EVENT *)0 if the mailbox was successfully deleted.
//  148 *
//  149 * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
//  150 *                 the mailbox MUST check the return code of OSMboxPend().
//  151 *              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
//  152 *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
//  153 *                 time is directly proportional to the number of tasks waiting on the mailbox.
//  154 *              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
//  155 *                 applications where the mailbox is used for mutual exclusion because the resource(s)
//  156 *                 will no longer be guarded by the mailbox.
//  157 *********************************************************************************************************
//  158 */
//  159 
//  160 #if OS_MBOX_DEL_EN > 0u

        RSEG CODE:CODE:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond6 Using cfiCommon0
          CFI Function OSMboxPostOpt
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+24
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function OSMboxPostOpt
          CFI (cfiCond7) Conditional ??OSMboxPostOpt_7
          CFI (cfiCond7) R8L Frame(CFA, -20)
          CFI (cfiCond7) R8H Frame(CFA, -18)
          CFI (cfiCond7) R9L Frame(CFA, -16)
          CFI (cfiCond7) R9H Frame(CFA, -14)
          CFI (cfiCond7) R10L Frame(CFA, -12)
          CFI (cfiCond7) R10H Frame(CFA, -10)
          CFI (cfiCond7) R11L Frame(CFA, -8)
          CFI (cfiCond7) R11H Frame(CFA, -6)
          CFI (cfiCond7) CFA SP+24
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function OSMboxPost
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond8) R8L Frame(CFA, -20)
          CFI (cfiCond8) R8H Frame(CFA, -18)
          CFI (cfiCond8) R9L Frame(CFA, -16)
          CFI (cfiCond8) R9H Frame(CFA, -14)
          CFI (cfiCond8) R10L Frame(CFA, -12)
          CFI (cfiCond8) R10H Frame(CFA, -10)
          CFI (cfiCond8) R11L Frame(CFA, -8)
          CFI (cfiCond8) R11H Frame(CFA, -6)
          CFI (cfiCond8) CFA SP+24
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function OSMboxPendAbort
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond9) R6L Frame(CFA, -28)
          CFI (cfiCond9) R6H Frame(CFA, -26)
          CFI (cfiCond9) R7L Frame(CFA, -24)
          CFI (cfiCond9) R7H Frame(CFA, -22)
          CFI (cfiCond9) R8L Frame(CFA, -20)
          CFI (cfiCond9) R8H Frame(CFA, -18)
          CFI (cfiCond9) R9L Frame(CFA, -16)
          CFI (cfiCond9) R9H Frame(CFA, -14)
          CFI (cfiCond9) R10L Frame(CFA, -12)
          CFI (cfiCond9) R10H Frame(CFA, -10)
          CFI (cfiCond9) R11L Frame(CFA, -8)
          CFI (cfiCond9) R11H Frame(CFA, -6)
          CFI (cfiCond9) CFA SP+32
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function OSMboxPendAbort
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond10) R6L Frame(CFA, -28)
          CFI (cfiCond10) R6H Frame(CFA, -26)
          CFI (cfiCond10) R7L Frame(CFA, -24)
          CFI (cfiCond10) R7H Frame(CFA, -22)
          CFI (cfiCond10) R8L Frame(CFA, -20)
          CFI (cfiCond10) R8H Frame(CFA, -18)
          CFI (cfiCond10) R9L Frame(CFA, -16)
          CFI (cfiCond10) R9H Frame(CFA, -14)
          CFI (cfiCond10) R10L Frame(CFA, -12)
          CFI (cfiCond10) R10H Frame(CFA, -10)
          CFI (cfiCond10) R11L Frame(CFA, -8)
          CFI (cfiCond10) R11H Frame(CFA, -6)
          CFI (cfiCond10) CFA SP+32
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function OSMboxDel
          CFI (cfiCond11) Conditional ??OSMboxDel_8
          CFI (cfiCond11) R6L Frame(CFA, -28)
          CFI (cfiCond11) R6H Frame(CFA, -26)
          CFI (cfiCond11) R7L Frame(CFA, -24)
          CFI (cfiCond11) R7H Frame(CFA, -22)
          CFI (cfiCond11) R8L Frame(CFA, -20)
          CFI (cfiCond11) R8H Frame(CFA, -18)
          CFI (cfiCond11) R9L Frame(CFA, -16)
          CFI (cfiCond11) R9H Frame(CFA, -14)
          CFI (cfiCond11) R10L Frame(CFA, -12)
          CFI (cfiCond11) R10H Frame(CFA, -10)
          CFI (cfiCond11) R11L Frame(CFA, -8)
          CFI (cfiCond11) R11H Frame(CFA, -6)
          CFI (cfiCond11) CFA SP+32
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
//  161 OS_EVENT  *OSMboxDel (OS_EVENT  *pevent,
//  162                       INT8U      opt,
//  163                       INT8U     *perr)
//  164 {
//  165     BOOLEAN    tasks_waiting;
//  166     OS_EVENT  *pevent_return;
//  167 #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
//  168     OS_CPU_SR  cpu_sr = 0u;
//  169 #endif
//  170 
//  171 
//  172 
//  173 #ifdef OS_SAFETY_CRITICAL
//  174     if (perr == (INT8U *)0) {
//  175         OS_SAFETY_CRITICAL_EXCEPTION();
//  176     }
//  177 #endif
//  178 
//  179 #if OS_ARG_CHK_EN > 0u
//  180     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
//  181         *perr = OS_ERR_PEVENT_NULL;
//  182         return (pevent);
//  183     }
//  184 #endif
//  185     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
//  186         *perr = OS_ERR_EVENT_TYPE;
//  187         return (pevent);
//  188     }
//  189     if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
//  190         *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
//  191         return (pevent);
//  192     }
//  193     OS_ENTER_CRITICAL();
//  194     if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mailbox      */
//  195         tasks_waiting = OS_TRUE;                           /* Yes                                      */
//  196     } else {
//  197         tasks_waiting = OS_FALSE;                          /* No                                       */
//  198     }
//  199     switch (opt) {
//  200         case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
//  201              if (tasks_waiting == OS_FALSE) {
//  202 #if OS_EVENT_NAME_EN > 0u
//  203                  pevent->OSEventName = (INT8U *)(void *)"?";
//  204 #endif
//  205                  pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
//  206                  pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
//  207                  pevent->OSEventCnt  = 0u;
//  208                  OSEventFreeList     = pevent;             /* Get next free event control block        */
//  209                  OS_EXIT_CRITICAL();
//  210                  *perr               = OS_ERR_NONE;
//  211                  pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
//  212              } else {
//  213                  OS_EXIT_CRITICAL();
//  214                  *perr               = OS_ERR_TASK_WAITING;
//  215                  pevent_return       = pevent;
//  216              }
//  217              break;
//  218 
//  219         case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
//  220              while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
//  221                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
        MOVA    R11, R12
        BRA     #OS_EventTaskRdy
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12
//  222              }
//  223 #if OS_EVENT_NAME_EN > 0u
//  224              pevent->OSEventName    = (INT8U *)(void *)"?";
//  225 #endif
//  226              pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
//  227              pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
//  228              pevent->OSEventCnt     = 0u;
//  229              OSEventFreeList        = pevent;              /* Get next free event control block        */
//  230              OS_EXIT_CRITICAL();
//  231              if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
//  232                  OS_Sched();                               /* Find highest priority task ready to run  */
//  233              }
//  234              *perr         = OS_ERR_NONE;
//  235              pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
//  236              break;
//  237 
//  238         default:
//  239              OS_EXIT_CRITICAL();
//  240              *perr         = OS_ERR_INVALID_OPT;
//  241              pevent_return = pevent;
//  242              break;
//  243     }
//  244     return (pevent_return);
//  245 }
//  246 #endif
//  247 
//  248 /*$PAGE*/
//  249 /*
//  250 *********************************************************************************************************
//  251 *                                      PEND ON MAILBOX FOR A MESSAGE
//  252 *
//  253 * Description: This function waits for a message to be sent to a mailbox
//  254 *
//  255 * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
//  256 *
//  257 *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
//  258 *                            wait for a message to arrive at the mailbox up to the amount of time
//  259 *                            specified by this argument.  If you specify 0, however, your task will wait
//  260 *                            forever at the specified mailbox or, until a message arrives.
//  261 *
//  262 *              perr          is a pointer to where an error message will be deposited.  Possible error
//  263 *                            messages are:
//  264 *
//  265 *                            OS_ERR_NONE         The call was successful and your task received a
//  266 *                                                message.
//  267 *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
//  268 *                            OS_ERR_PEND_ABORT   The wait on the mailbox was aborted.
//  269 *                            OS_ERR_EVENT_TYPE   Invalid event type
//  270 *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
//  271 *                                                would lead to a suspension.
//  272 *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
//  273 *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
//  274 *
//  275 * Returns    : != (void *)0  is a pointer to the message received
//  276 *              == (void *)0  if no message was received or,
//  277 *                            if 'pevent' is a NULL pointer or,
//  278 *                            if you didn't pass the proper pointer to the event control block.
//  279 *********************************************************************************************************
//  280 */
//  281 /*$PAGE*/
//  282 void  *OSMboxPend (OS_EVENT  *pevent,
//  283                    INT32U     timeout,
//  284                    INT8U     *perr)
//  285 {
//  286     void      *pmsg;
//  287 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  288     OS_CPU_SR  cpu_sr = 0u;
//  289 #endif
//  290 
//  291 
//  292 
//  293 #ifdef OS_SAFETY_CRITICAL
//  294     if (perr == (INT8U *)0) {
//  295         OS_SAFETY_CRITICAL_EXCEPTION();
//  296     }
//  297 #endif
//  298 
//  299 #if OS_ARG_CHK_EN > 0u
//  300     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  301         *perr = OS_ERR_PEVENT_NULL;
//  302         return ((void *)0);
//  303     }
//  304 #endif
//  305     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
//  306         *perr = OS_ERR_EVENT_TYPE;
//  307         return ((void *)0);
//  308     }
//  309     if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
//  310         *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
//  311         return ((void *)0);
//  312     }
//  313     if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
//  314         *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
//  315         return ((void *)0);
//  316     }
//  317     OS_ENTER_CRITICAL();
//  318     pmsg = pevent->OSEventPtr;
//  319     if (pmsg != (void *)0) {                          /* See if there is already a message             */
//  320         pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
//  321         OS_EXIT_CRITICAL();
//  322         *perr = OS_ERR_NONE;
//  323         return (pmsg);                                /* Return the message received (or NULL)         */
//  324     }
//  325     OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
//  326     OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
//  327     OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
//  328     OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
//  329     OS_EXIT_CRITICAL();
//  330     OS_Sched();                                       /* Find next highest priority task ready to run  */
//  331     OS_ENTER_CRITICAL();
//  332     switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
//  333         case OS_STAT_PEND_OK:
//  334              pmsg =  OSTCBCur->OSTCBMsg;
//  335             *perr =  OS_ERR_NONE;
//  336              break;
//  337 
//  338         case OS_STAT_PEND_ABORT:
//  339              pmsg = (void *)0;
//  340             *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
//  341              break;
//  342 
//  343         case OS_STAT_PEND_TO:
//  344         default:
//  345              OS_EventTaskRemove(OSTCBCur, pevent);
//  346              pmsg = (void *)0;
//  347             *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
//  348              break;
//  349     }
//  350     OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
//  351     OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
//  352     OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
//  353 #if (OS_EVENT_MULTI_EN > 0u)
//  354     OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
//  355 #endif
//  356     OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
//  357     OS_EXIT_CRITICAL();
//  358     return (pmsg);                                    /* Return received message                       */
//  359 }
//  360 /*$PAGE*/
//  361 /*
//  362 *********************************************************************************************************
//  363 *                                      ABORT WAITING ON A MESSAGE MAILBOX
//  364 *
//  365 * Description: This function aborts & readies any tasks currently waiting on a mailbox.  This function
//  366 *              should be used to fault-abort the wait on the mailbox, rather than to normally signal
//  367 *              the mailbox via OSMboxPost() or OSMboxPostOpt().
//  368 *
//  369 * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox.
//  370 *
//  371 *              opt           determines the type of ABORT performed:
//  372 *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
//  373 *                                                     mailbox
//  374 *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
//  375 *                                                     mailbox
//  376 *
//  377 *              perr          is a pointer to where an error message will be deposited.  Possible error
//  378 *                            messages are:
//  379 *
//  380 *                            OS_ERR_NONE         No tasks were     waiting on the mailbox.
//  381 *                            OS_ERR_PEND_ABORT   At least one task waiting on the mailbox was readied
//  382 *                                                and informed of the aborted wait; check return value
//  383 *                                                for the number of tasks whose wait on the mailbox
//  384 *                                                was aborted.
//  385 *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a mailbox.
//  386 *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
//  387 *
//  388 * Returns    : == 0          if no tasks were waiting on the mailbox, or upon error.
//  389 *              >  0          if one or more tasks waiting on the mailbox are now readied and informed.
//  390 *********************************************************************************************************
//  391 */
//  392 
//  393 #if OS_MBOX_PEND_ABORT_EN > 0u

        RSEG CODE:CODE:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function OSMboxPost
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+24
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function OSMboxPendAbort
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond14) R6L Frame(CFA, -28)
          CFI (cfiCond14) R6H Frame(CFA, -26)
          CFI (cfiCond14) R7L Frame(CFA, -24)
          CFI (cfiCond14) R7H Frame(CFA, -22)
          CFI (cfiCond14) R8L Frame(CFA, -20)
          CFI (cfiCond14) R8H Frame(CFA, -18)
          CFI (cfiCond14) R9L Frame(CFA, -16)
          CFI (cfiCond14) R9H Frame(CFA, -14)
          CFI (cfiCond14) R10L Frame(CFA, -12)
          CFI (cfiCond14) R10H Frame(CFA, -10)
          CFI (cfiCond14) R11L Frame(CFA, -8)
          CFI (cfiCond14) R11H Frame(CFA, -6)
          CFI (cfiCond14) CFA SP+32
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV.W   R10, R12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine6_0
        // Fall through to label ??Subroutine6_0

        RSEG CODE:CODE:NOROOT(1)
??Subroutine6_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function OSMboxPend
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+40
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function OSMboxPost
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond17) R8L Frame(CFA, -20)
          CFI (cfiCond17) R8H Frame(CFA, -18)
          CFI (cfiCond17) R9L Frame(CFA, -16)
          CFI (cfiCond17) R9H Frame(CFA, -14)
          CFI (cfiCond17) R10L Frame(CFA, -12)
          CFI (cfiCond17) R10H Frame(CFA, -10)
          CFI (cfiCond17) R11L Frame(CFA, -8)
          CFI (cfiCond17) R11H Frame(CFA, -6)
          CFI (cfiCond17) CFA SP+24
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function OSMboxPendAbort
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond18) R6L Frame(CFA, -28)
          CFI (cfiCond18) R6H Frame(CFA, -26)
          CFI (cfiCond18) R7L Frame(CFA, -24)
          CFI (cfiCond18) R7H Frame(CFA, -22)
          CFI (cfiCond18) R8L Frame(CFA, -20)
          CFI (cfiCond18) R8H Frame(CFA, -18)
          CFI (cfiCond18) R9L Frame(CFA, -16)
          CFI (cfiCond18) R9H Frame(CFA, -14)
          CFI (cfiCond18) R10L Frame(CFA, -12)
          CFI (cfiCond18) R10H Frame(CFA, -10)
          CFI (cfiCond18) R11L Frame(CFA, -8)
          CFI (cfiCond18) R11H Frame(CFA, -6)
          CFI (cfiCond18) CFA SP+32
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        CALLA   #OSCPURestoreSR
        BRA     #OS_Sched
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG CODE:CODE:NOROOT(1)
OSMboxPendAbort:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function OSMboxPendAbort
        FUNCALL OSMboxPendAbort, OSCPUSaveSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxPendAbort, OS_EventTaskRdy
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxPendAbort, OS_EventTaskRdy
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxPendAbort, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxPendAbort, OS_Sched
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxPendAbort, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R11
        MOV.B   R13, R6
        MOVA    R14, R8
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxPendAbort_1
        MOV.B   #0x1, 0(R14)
        JMP     ??OSMboxPendAbort_2
??OSMboxPendAbort_1:
        CALLA   #?Subroutine0
??CrossCallReturnLabel_2:
        JEQ     ??OSMboxPendAbort_3
        MOV.B   #0x0, R9
        CMP.B   #0x1, R6
        JNE     ??OSMboxPendAbort_4
??OSMboxPendAbort_0:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_10:
        ADD.B   #0x1, R9
        CMP.B   #0x0, 0x8(R11)
        JEQ     ??OSMboxPendAbort_5
        JMP     ??OSMboxPendAbort_0
??OSMboxPendAbort_4:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_9:
        MOV.B   #0x1, R9
??OSMboxPendAbort_5:
        CALLA   #?Subroutine1
??CrossCallReturnLabel_7:
        MOV.B   #0xe, 0(R8)
        MOV.B   R9, R12
        JMP     ??OSMboxPendAbort_6
??OSMboxPendAbort_3:
        CALLA   #OSCPURestoreSR
        MOV.B   #0x0, 0(R8)
??OSMboxPendAbort_2:
        MOV.B   #0x0, R12
??OSMboxPendAbort_6:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock20

        RSEG CODE:CODE:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function OSMboxPendAbort
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function OSMboxPendAbort
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond22) R6L Frame(CFA, -28)
          CFI (cfiCond22) R6H Frame(CFA, -26)
          CFI (cfiCond22) R7L Frame(CFA, -24)
          CFI (cfiCond22) R7H Frame(CFA, -22)
          CFI (cfiCond22) R8L Frame(CFA, -20)
          CFI (cfiCond22) R8H Frame(CFA, -18)
          CFI (cfiCond22) R9L Frame(CFA, -16)
          CFI (cfiCond22) R9H Frame(CFA, -14)
          CFI (cfiCond22) R10L Frame(CFA, -12)
          CFI (cfiCond22) R10H Frame(CFA, -10)
          CFI (cfiCond22) R11L Frame(CFA, -8)
          CFI (cfiCond22) R11H Frame(CFA, -6)
          CFI (cfiCond22) CFA SP+32
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV.B   #0x2, R15
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23
        REQUIRE ??Subroutine7_0
        // Fall through to label ??Subroutine7_0

        RSEG CODE:CODE:REORDER:NOROOT(1)
??Subroutine7_0:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function OSMboxDel
          CFI Conditional ??OSMboxDel_8
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function OSMboxPendAbort
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond25) R6L Frame(CFA, -28)
          CFI (cfiCond25) R6H Frame(CFA, -26)
          CFI (cfiCond25) R7L Frame(CFA, -24)
          CFI (cfiCond25) R7H Frame(CFA, -22)
          CFI (cfiCond25) R8L Frame(CFA, -20)
          CFI (cfiCond25) R8H Frame(CFA, -18)
          CFI (cfiCond25) R9L Frame(CFA, -16)
          CFI (cfiCond25) R9H Frame(CFA, -14)
          CFI (cfiCond25) R10L Frame(CFA, -12)
          CFI (cfiCond25) R10H Frame(CFA, -10)
          CFI (cfiCond25) R11L Frame(CFA, -8)
          CFI (cfiCond25) R11H Frame(CFA, -6)
          CFI (cfiCond25) CFA SP+32
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function OSMboxPendAbort
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond26) R6L Frame(CFA, -28)
          CFI (cfiCond26) R6H Frame(CFA, -26)
          CFI (cfiCond26) R7L Frame(CFA, -24)
          CFI (cfiCond26) R7H Frame(CFA, -22)
          CFI (cfiCond26) R8L Frame(CFA, -20)
          CFI (cfiCond26) R8H Frame(CFA, -18)
          CFI (cfiCond26) R9L Frame(CFA, -16)
          CFI (cfiCond26) R9H Frame(CFA, -14)
          CFI (cfiCond26) R10L Frame(CFA, -12)
          CFI (cfiCond26) R10H Frame(CFA, -10)
          CFI (cfiCond26) R11L Frame(CFA, -8)
          CFI (cfiCond26) R11H Frame(CFA, -6)
          CFI (cfiCond26) CFA SP+32
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOV.B   #0x2, R14
        MOVA    #0x0, R13
        JMP     ?Subroutine5
        NOP
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function OSMboxPostOpt
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+24
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function OSMboxPost
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond29) R8L Frame(CFA, -20)
          CFI (cfiCond29) R8H Frame(CFA, -18)
          CFI (cfiCond29) R9L Frame(CFA, -16)
          CFI (cfiCond29) R9H Frame(CFA, -14)
          CFI (cfiCond29) R10L Frame(CFA, -12)
          CFI (cfiCond29) R10H Frame(CFA, -10)
          CFI (cfiCond29) R11L Frame(CFA, -8)
          CFI (cfiCond29) R11H Frame(CFA, -6)
          CFI (cfiCond29) CFA SP+24
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function OSMboxPendAbort
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond30) R6L Frame(CFA, -28)
          CFI (cfiCond30) R6H Frame(CFA, -26)
          CFI (cfiCond30) R7L Frame(CFA, -24)
          CFI (cfiCond30) R7H Frame(CFA, -22)
          CFI (cfiCond30) R8L Frame(CFA, -20)
          CFI (cfiCond30) R8H Frame(CFA, -18)
          CFI (cfiCond30) R9L Frame(CFA, -16)
          CFI (cfiCond30) R9H Frame(CFA, -14)
          CFI (cfiCond30) R10L Frame(CFA, -12)
          CFI (cfiCond30) R10H Frame(CFA, -10)
          CFI (cfiCond30) R11L Frame(CFA, -8)
          CFI (cfiCond30) R11H Frame(CFA, -6)
          CFI (cfiCond30) CFA SP+32
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function OSMboxDel
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond31) R6L Frame(CFA, -28)
          CFI (cfiCond31) R6H Frame(CFA, -26)
          CFI (cfiCond31) R7L Frame(CFA, -24)
          CFI (cfiCond31) R7H Frame(CFA, -22)
          CFI (cfiCond31) R8L Frame(CFA, -20)
          CFI (cfiCond31) R8H Frame(CFA, -18)
          CFI (cfiCond31) R9L Frame(CFA, -16)
          CFI (cfiCond31) R9H Frame(CFA, -14)
          CFI (cfiCond31) R10L Frame(CFA, -12)
          CFI (cfiCond31) R10H Frame(CFA, -10)
          CFI (cfiCond31) R11L Frame(CFA, -8)
          CFI (cfiCond31) R11H Frame(CFA, -6)
          CFI (cfiCond31) CFA SP+32
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        CALLA   #OSCPUSaveSR
        MOV.W   R12, R10
        CMP.B   #0x0, 0x8(R11)
        RETA
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG CODE:CODE:REORDER:NOROOT(1)
OSMboxDel:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function OSMboxDel
        FUNCALL OSMboxDel, OSCPUSaveSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxDel, OS_EventTaskRdy
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxDel, OS_Sched
        LOCFRAME CSTACK, 28, STACK
        FUNCALL OSMboxDel, OSCPURestoreSR
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R11
        MOV.B   R13, R6
        MOVA    R14, R8
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxDel_3
        MOV.B   #0x1, 0(R14)
        JMP     ??OSMboxDel_1
??OSMboxDel_3:
        CMPX.B  #0x0, &OSIntNesting
        JEQ     ??OSMboxDel_4
        MOV.B   #0xf, 0(R14)
        JMP     ??OSMboxDel_1
??OSMboxDel_4:
        CALLA   #?Subroutine0
??CrossCallReturnLabel_3:
        JNE     ??OSMboxDel_5
        MOV.B   #0x0, R9
        JMP     ??OSMboxDel_6
??OSMboxDel_5:
        MOV.B   #0x1, R9
??OSMboxDel_6:
        SUB.B   #0x0, R6
        JEQ     ??OSMboxDel_7
        SUB.B   #0x1, R6
        JEQ     ??OSMboxDel_8
        JMP     ??OSMboxDel_9
??OSMboxDel_7:
        BIT.B   #0x1, R9
        JC      ??OSMboxDel_10
        CALLA   #?Subroutine3
??CrossCallReturnLabel_4:
        CALLA   #OSCPURestoreSR
        JMP     ??OSMboxDel_2
??OSMboxDel_10:
        CALLA   #OSCPURestoreSR
        MOV.B   #0x49, 0(R8)
        JMP     ??OSMboxDel_11
??OSMboxDel_0:
        MOV.B   #0x0, R15
        CALLA   #??Subroutine7_0
??OSMboxDel_8:
        CMP.B   #0x0, 0x8(R11)
        JNE     ??OSMboxDel_0
        CALLA   #?Subroutine3
??CrossCallReturnLabel_5:
        MOV.W   R10, R12
        CALLA   #OSCPURestoreSR
        BIT.B   #0x1, R9
        JNC     ??OSMboxDel_2
        CALLA   #OS_Sched
??OSMboxDel_2:
        MOV.B   #0x0, 0(R8)
        MOVA    #0x0, R12
        JMP     ??OSMboxDel_1
??OSMboxDel_9:
        CALLA   #OSCPURestoreSR
        MOV.B   #0x7, 0(R8)
??OSMboxDel_11:
        MOVA    R11, R12
??OSMboxDel_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock33

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function OSMboxDel
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function OSMboxDel
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond35) R6L Frame(CFA, -28)
          CFI (cfiCond35) R6H Frame(CFA, -26)
          CFI (cfiCond35) R7L Frame(CFA, -24)
          CFI (cfiCond35) R7H Frame(CFA, -22)
          CFI (cfiCond35) R8L Frame(CFA, -20)
          CFI (cfiCond35) R8H Frame(CFA, -18)
          CFI (cfiCond35) R9L Frame(CFA, -16)
          CFI (cfiCond35) R9H Frame(CFA, -14)
          CFI (cfiCond35) R10L Frame(CFA, -12)
          CFI (cfiCond35) R10H Frame(CFA, -10)
          CFI (cfiCond35) R11L Frame(CFA, -8)
          CFI (cfiCond35) R11H Frame(CFA, -6)
          CFI (cfiCond35) CFA SP+32
          CFI Block cfiPicker36 Using cfiCommon1
          CFI (cfiPicker36) NoFunction
          CFI (cfiPicker36) Picker
        MOV.B   #0x0, 0(R11)
        MOVX.A  &OSEventFreeList, 0x2(R11)
        MOV.W   #0x0, 0x6(R11)
        MOVA    R11, &OSEventFreeList
        RETA
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiPicker36

        RSEG CODE:CODE:REORDER:NOROOT(1)
OSMboxPend:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function OSMboxPend
        FUNCALL OSMboxPend, OSCPUSaveSR
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OSCPURestoreSR
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OS_EventTaskWait
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OSCPURestoreSR
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OS_Sched
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OSCPUSaveSR
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OS_EventTaskRemove
        LOCFRAME CSTACK, 36, STACK
        FUNCALL OSMboxPend, OSCPURestoreSR
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R9
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOVA    R13, R6
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxPend_1
        MOV.B   #0x1, 0(R13)
        JMP     ??OSMboxPend_0
??OSMboxPend_1:
        CMPX.B  #0x0, &OSIntNesting
        JEQ     ??OSMboxPend_2
        MOV.B   #0x2, 0(R13)
        JMP     ??OSMboxPend_0
??OSMboxPend_2:
        CMPX.B  #0x0, &OSLockNesting
        JEQ     ??OSMboxPend_3
        MOV.B   #0xd, 0(R13)
??OSMboxPend_0:
        MOVA    #0x0, R12
        JMP     ??OSMboxPend_4
??OSMboxPend_3:
        CALLA   #OSCPUSaveSR
        MOV.W   R12, R8
        MOVA    0x2(R9), R7
        CMPA    #0x0, R7
        JEQ     ??OSMboxPend_5
        MOVX.A  #0x0, 0x2(R9)
        CALLA   #OSCPURestoreSR
        MOV.B   #0x0, 0(R6)
        JMP     ??OSMboxPend_6
??OSMboxPend_5:
        MOVA    #OSTCBCur, R4
        MOVA    @R4, R15
        BIS.B   #0x2, 0x2e(R15)
        MOVA    @R4, R15
        MOV.B   #0x0, 0x2f(R15)
        MOVA    @R4, R15
        MOV.W   R10, 0x2a(R15)
        MOV.W   R11, 0x2c(R15)
        MOVA    R9, R12
        CALLA   #OS_EventTaskWait
        MOV.W   R8, R12
        CALLA   #??Subroutine6_0
??CrossCallReturnLabel_6:
        CALLA   #OSCPUSaveSR
        MOV.W   R12, R8
        MOVA    @R4, R15
        MOV.B   0x2f(R15), R14
        SUB.B   #0x0, R14
        JEQ     ??OSMboxPend_7
        SUB.B   #0x2, R14
        JEQ     ??OSMboxPend_8
        JMP     ??OSMboxPend_9
??OSMboxPend_7:
        MOVA    0x20(R15), R7
        MOV.B   #0x0, 0(R6)
        JMP     ??OSMboxPend_10
??OSMboxPend_8:
        MOV.B   #0xe, 0(R6)
        JMP     ??OSMboxPend_10
??OSMboxPend_9:
        MOVA    R9, R13
        MOVA    @R4, R12
        CALLA   #OS_EventTaskRemove
        MOV.B   #0xa, 0(R6)
??OSMboxPend_10:
        MOVA    @R4, R15
        MOV.B   #0x0, 0x2e(R15)
        MOVA    @R4, R15
        MOV.B   #0x0, 0x2f(R15)
        MOVA    @R4, R15
        MOVX.A  #0x0, 0x1c(R15)
        MOVX.A  #0x0, 0x20(R15)
        MOV.W   R8, R12
        CALLA   #OSCPURestoreSR
??OSMboxPend_6:
        MOVA    R7, R12
??OSMboxPend_4:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock37
//  394 INT8U  OSMboxPendAbort (OS_EVENT  *pevent,
//  395                         INT8U      opt,
//  396                         INT8U     *perr)
//  397 {
//  398     INT8U      nbr_tasks;
//  399 #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
//  400     OS_CPU_SR  cpu_sr = 0u;
//  401 #endif
//  402 
//  403 
//  404 
//  405 #ifdef OS_SAFETY_CRITICAL
//  406     if (perr == (INT8U *)0) {
//  407         OS_SAFETY_CRITICAL_EXCEPTION();
//  408     }
//  409 #endif
//  410 
//  411 #if OS_ARG_CHK_EN > 0u
//  412     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
//  413         *perr = OS_ERR_PEVENT_NULL;
//  414         return (0u);
//  415     }
//  416 #endif
//  417     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
//  418         *perr = OS_ERR_EVENT_TYPE;
//  419         return (0u);
//  420     }
//  421     OS_ENTER_CRITICAL();
//  422     if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
//  423         nbr_tasks = 0u;
//  424         switch (opt) {
//  425             case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
//  426                  while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
//  427                      (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
//  428                      nbr_tasks++;
//  429                  }
//  430                  break;
//  431 
//  432             case OS_PEND_OPT_NONE:
//  433             default:                                       /* No,  ready HPT       waiting on mailbox  */
//  434                  (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
//  435                  nbr_tasks++;
//  436                  break;
//  437         }
//  438         OS_EXIT_CRITICAL();
//  439         OS_Sched();                                        /* Find HPT ready to run                    */
//  440         *perr = OS_ERR_PEND_ABORT;
//  441         return (nbr_tasks);
//  442     }
//  443     OS_EXIT_CRITICAL();
//  444     *perr = OS_ERR_NONE;
//  445     return (0u);                                           /* No tasks waiting on mailbox              */
//  446 }
//  447 #endif
//  448 
//  449 /*$PAGE*/
//  450 /*
//  451 *********************************************************************************************************
//  452 *                                       POST MESSAGE TO A MAILBOX
//  453 *
//  454 * Description: This function sends a message to a mailbox
//  455 *
//  456 * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
//  457 *
//  458 *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
//  459 *
//  460 * Returns    : OS_ERR_NONE          The call was successful and the message was sent
//  461 *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
//  462 *                                   message at a time and thus, the message MUST be consumed before you
//  463 *                                   are allowed to send another one.
//  464 *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
//  465 *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
//  466 *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
//  467 *
//  468 * Note(s)    : 1) HPT means Highest Priority Task
//  469 *********************************************************************************************************
//  470 */
//  471 
//  472 #if OS_MBOX_POST_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  473 INT8U  OSMboxPost (OS_EVENT  *pevent,
OSMboxPost:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function OSMboxPost
//  474                    void      *pmsg)
//  475 {
        FUNCALL OSMboxPost, OSCPUSaveSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPost, OS_EventTaskRdy
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPost, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPost, OS_Sched
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPost, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPost, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R11
        MOVA    R13, R8
//  476 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  477     OS_CPU_SR  cpu_sr = 0u;
//  478 #endif
//  479 
//  480 
//  481 
//  482 #if OS_ARG_CHK_EN > 0u
//  483     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  484         return (OS_ERR_PEVENT_NULL);
//  485     }
//  486     if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
//  487         return (OS_ERR_POST_NULL_PTR);
//  488     }
//  489 #endif
//  490     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxPost_0
//  491         return (OS_ERR_EVENT_TYPE);
        MOV.B   #0x1, R12
        JMP     ??OSMboxPost_1
//  492     }
//  493     OS_ENTER_CRITICAL();
??OSMboxPost_0:
        CALLA   #?Subroutine0
//  494     if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
??CrossCallReturnLabel_1:
        JEQ     ??OSMboxPost_2
//  495                                                       /* Ready HPT waiting on event                    */
//  496         (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
        CALLA   #?Subroutine2
//  497         OS_EXIT_CRITICAL();
??CrossCallReturnLabel_11:
        CALLA   #?Subroutine1
//  498         OS_Sched();                                   /* Find highest priority task ready to run       */
//  499         return (OS_ERR_NONE);
??CrossCallReturnLabel_8:
        JMP     ??OSMboxPost_3
//  500     }
//  501     if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
??OSMboxPost_2:
        MOVA    0x2(R11), R15
        CMPA    #0x0, R15
        JEQ     ??OSMboxPost_4
//  502         OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  503         return (OS_ERR_MBOX_FULL);
        MOV.B   #0x14, R12
        JMP     ??OSMboxPost_1
//  504     }
//  505     pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
??OSMboxPost_4:
        MOVA    R8, 0x2(R11)
//  506     OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  507     return (OS_ERR_NONE);
??OSMboxPost_3:
        MOV.B   #0x0, R12
??OSMboxPost_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock38
//  508 }
//  509 #endif
//  510 
//  511 /*$PAGE*/
//  512 /*
//  513 *********************************************************************************************************
//  514 *                                       POST MESSAGE TO A MAILBOX
//  515 *
//  516 * Description: This function sends a message to a mailbox
//  517 *
//  518 * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
//  519 *
//  520 *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
//  521 *
//  522 *              opt           determines the type of POST performed:
//  523 *                            OS_POST_OPT_NONE         POST to a single waiting task
//  524 *                                                     (Identical to OSMboxPost())
//  525 *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mailbox
//  526 *
//  527 *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
//  528 *
//  529 * Returns    : OS_ERR_NONE          The call was successful and the message was sent
//  530 *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
//  531 *                                   message at a time and thus, the message MUST be consumed before you
//  532 *                                   are allowed to send another one.
//  533 *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
//  534 *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
//  535 *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
//  536 *
//  537 * Note(s)    : 1) HPT means Highest Priority Task
//  538 *
//  539 * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
//  540 *              interrupt disable time is proportional to the number of tasks waiting on the mailbox.
//  541 *********************************************************************************************************
//  542 */
//  543 
//  544 #if OS_MBOX_POST_OPT_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  545 INT8U  OSMboxPostOpt (OS_EVENT  *pevent,
OSMboxPostOpt:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function OSMboxPostOpt
//  546                       void      *pmsg,
//  547                       INT8U      opt)
//  548 {
        FUNCALL OSMboxPostOpt, OSCPUSaveSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPostOpt, OS_EventTaskRdy
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPostOpt, OS_EventTaskRdy
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPostOpt, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPostOpt, OS_Sched
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPostOpt, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        FUNCALL OSMboxPostOpt, OSCPURestoreSR
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R11
        MOVA    R13, R8
        MOV.B   R14, R9
//  549 #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
//  550     OS_CPU_SR  cpu_sr = 0u;
//  551 #endif
//  552 
//  553 
//  554 
//  555 #if OS_ARG_CHK_EN > 0u
//  556     if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
//  557         return (OS_ERR_PEVENT_NULL);
//  558     }
//  559     if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
//  560         return (OS_ERR_POST_NULL_PTR);
//  561     }
//  562 #endif
//  563     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxPostOpt_3
//  564         return (OS_ERR_EVENT_TYPE);
        MOV.B   #0x1, R12
        JMP     ??OSMboxPostOpt_4
//  565     }
//  566     OS_ENTER_CRITICAL();
??OSMboxPostOpt_3:
        CALLA   #?Subroutine0
//  567     if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
??CrossCallReturnLabel_0:
        JEQ     ??OSMboxPostOpt_5
//  568         if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
        BIT.B   #0x1, R9
        JNC     ??OSMboxPostOpt_6
//  569             while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
//  570                 (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
??OSMboxPostOpt_0:
        CALLA   #?Subroutine2
//  571             }
??CrossCallReturnLabel_12:
        CMP.B   #0x0, 0x8(R11)
        JEQ     ??OSMboxPostOpt_7
        JMP     ??OSMboxPostOpt_0
//  572         } else {                                      /* No,  Post to HPT waiting on mbox              */
//  573             (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
??OSMboxPostOpt_6:
        CALLA   #?Subroutine2
//  574         }
//  575         OS_EXIT_CRITICAL();
??OSMboxPostOpt_7:
        MOV.W   R10, R12
        CALLA   #OSCPURestoreSR
//  576         if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
        BIT.B   #0x4, R9
        JC      ??OSMboxPostOpt_2
//  577             OS_Sched();                               /* Find HPT ready to run                         */
        CALLA   #OS_Sched
//  578         }
//  579         return (OS_ERR_NONE);
        JMP     ??OSMboxPostOpt_2
//  580     }
//  581     if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
??OSMboxPostOpt_5:
        MOVA    0x2(R11), R15
        CMPA    #0x0, R15
        JEQ     ??OSMboxPostOpt_8
//  582         OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  583         return (OS_ERR_MBOX_FULL);
        MOV.B   #0x14, R12
        JMP     ??OSMboxPostOpt_4
//  584     }
//  585     pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
??OSMboxPostOpt_8:
        MOVA    R8, 0x2(R11)
//  586     OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  587     return (OS_ERR_NONE);
??OSMboxPostOpt_2:
        MOV.B   #0x0, R12
??OSMboxPostOpt_4:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock39
//  588 }
//  589 #endif
//  590 
//  591 /*$PAGE*/
//  592 /*
//  593 *********************************************************************************************************
//  594 *                                        QUERY A MESSAGE MAILBOX
//  595 *
//  596 * Description: This function obtains information about a message mailbox.
//  597 *
//  598 * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
//  599 *
//  600 *              p_mbox_data   is a pointer to a structure that will contain information about the message
//  601 *                            mailbox.
//  602 *
//  603 * Returns    : OS_ERR_NONE         The call was successful and the message was sent
//  604 *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
//  605 *              OS_ERR_PEVENT_NULL  If 'pevent'      is a NULL pointer
//  606 *              OS_ERR_PDATA_NULL   If 'p_mbox_data' is a NULL pointer
//  607 *********************************************************************************************************
//  608 */
//  609 
//  610 #if OS_MBOX_QUERY_EN > 0u

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  611 INT8U  OSMboxQuery (OS_EVENT      *pevent,
OSMboxQuery:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function OSMboxQuery
//  612                     OS_MBOX_DATA  *p_mbox_data)
//  613 {
        FUNCALL OSMboxQuery, OSCPUSaveSR
        LOCFRAME CSTACK, 12, STACK
        FUNCALL OSMboxQuery, OSCPURestoreSR
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
        MOVA    R13, R11
//  614     INT8U       i;
//  615     OS_PRIO    *psrc;
//  616     OS_PRIO    *pdest;
//  617 #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
//  618     OS_CPU_SR   cpu_sr = 0u;
//  619 #endif
//  620 
//  621 
//  622 
//  623 #if OS_ARG_CHK_EN > 0u
//  624     if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
//  625         return (OS_ERR_PEVENT_NULL);
//  626     }
//  627     if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
//  628         return (OS_ERR_PDATA_NULL);
//  629     }
//  630 #endif
//  631     if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
        CMP.B   #0x1, 0(R12)
        JEQ     ??OSMboxQuery_1
//  632         return (OS_ERR_EVENT_TYPE);
        MOV.B   #0x1, R12
        JMP     ??OSMboxQuery_2
//  633     }
//  634     OS_ENTER_CRITICAL();
??OSMboxQuery_1:
        CALLA   #OSCPUSaveSR
//  635     p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
        MOV.B   0x8(R10), 0xc(R11)
//  636     psrc                    = &pevent->OSEventTbl[0];
        MOVA    R10, R15
        ADDA    #0x9, R15
//  637     pdest                   = &p_mbox_data->OSEventTbl[0];
        MOVA    R11, R14
        ADDA    #0x4, R14
//  638     for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
        MOV.B   #0x4, R13
//  639         *pdest++ = *psrc++;
??OSMboxQuery_0:
        MOV.B   @R15+, 0(R14)
        ADDA    #0x1, R14
        MOV.B   @R15+, 0(R14)
        ADDA    #0x1, R14
//  640     }
        ADD.B   #0xff, R13
        JNE     ??OSMboxQuery_0
//  641     p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
        MOVX.A  0x2(R10), 0(R11)
//  642     OS_EXIT_CRITICAL();
        CALLA   #OSCPURestoreSR
//  643     return (OS_ERR_NONE);
        MOV.B   #0x0, R12
??OSMboxQuery_2:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock40
//  644 }

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  645 #endif                                                     /* OS_MBOX_QUERY_EN                         */
//  646 #endif                                                     /* OS_MBOX_EN                               */
//  647 	 	   	  		 			 	    		   		 		 	 	 			 	    		   	 			 	  	 		 				 		  			 		 					 	  	  		      		  	   		      		  	 		 	      		   		 		  	 		 	      		  		  		  
// 
// 840 bytes in segment CODE
// 
// 840 bytes of CODE memory
//
//Errors: none
//Warnings: 11
