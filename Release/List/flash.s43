///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      06/Jun/2016  16:42:26 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\flash.c                            /
//    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\flash.c -D NDEBUG -D RAM_VECTOR    /
//                     -lC C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C /
//                     °æ\¹¤³ÌÄ£°å\Release\List\ -lA                          /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\          /
//                     -D__MSP430F5529__ -e --double=32 --dlib_config         /
//                     "D:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº /
//                     ¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MS /
//                     P430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                 /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                   /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I      /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\12864\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\oled\ -I C:\Users\615\Desktop\MSP430\ /
//                     MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc /
//                     \ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\ /
//                     C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\src\ -I                  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\inc\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\src\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\ -I                           /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\2.2TFT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\delay\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\ -I C:\Users\615\Desktop\MSP430\MSP430F /
//                     5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\inc\ -I              /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\src\ -I C:\Users\615\Desktop\MSP430\MSP /
//                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\ -I                /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\User\USER\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\App\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\ -I                         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\        /
//                     --core=430X --data_model=large -Oh --multiplier=32     /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\flash.s43                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME flash

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?cstart_init_copy_ramfunc
        EXTERN ?ShiftLeft32_9
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC Flash_Erase_Addr
        FUNCTION Flash_Erase_Addr,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Flash_Erase_Segment
        FUNCTION Flash_Erase_Segment,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC Flash_Write_Byte
        FUNCTION Flash_Write_Byte,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC Flash_Write_DWold
        FUNCTION Flash_Write_DWold,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC Flash_Write_Word
        FUNCTION Flash_Write_Word,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC Flash_Write_buf
        FUNCTION Flash_Write_buf,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBWEAK _A_FCTL1_L
        PUBWEAK _A_FCTL3_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
// C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\flash.c
//    1 #include "flash.h"

        ASEGN DATA16_AN:DATA:NOROOT,0140H
// union <unnamed> __data16 _A_FCTL1_L
_A_FCTL1_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0144H
// union <unnamed> __data16 _A_FCTL3_L
_A_FCTL3_L:
        DS8 2

        RSEG CODE_I:DATA:NOROOT(1)
Flash_Erase_Addr:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function Flash_Erase_Addr
        CALLA   #?Subroutine3
          CFI EndBlock cfiBlock0
??CrossCallReturnLabel_2:
        REQUIRE ?Subroutine0
        REQUIRE _A_FCTL3_L
        REQUIRE _A_FCTL1_L
        // Fall through to label ?Subroutine0
//    2 #include "system.h"
//    3 
//    4 //×¢Òâ£ºÊ¹ÓÃflashÊ±Ó¦Ê¹ÓÃ¿¿ºóµÄµØÖ·£¬·ñÔò¿ÉÄÜ»áÆÆ»µ³ÌÐò
//    5 /*******************************************************************************
//    6 *  º¯ÊýÃû³Æ£º²Á³ýflashÖÐµÄÄ³Ò»¶Î
//    7 *  ¹¦ÄÜËµÃ÷£º¶ÎÓ¦¸ÃÊÇÔÚ£¨£©£¬Îª±£»¤³ÌÐò£¬×îºÃÈ¡×îºó¼¸¸ö¶Î
//    8 *  ²ÎÊýËµÃ÷£º±ØÐëÒ»´Î²Á³ý512×Ö½Ú£¬FlashÈÝÁ¿£¨128KB£©¶ÔÓ¦segmentNoÊýÁ¿£¨128*1024/512=256£©£¬Ê¹ÓÃÊ±½¨ÒéÈ¡¿¿ºóÃæµÄ¶ÎÎ»
//    9 *  º¯Êý·µ»Ø£ºÎÞ
//   10 *  Ê¹ÓÃÊ¾Àý£ºFlash_Erase_Segment(MAX_SEGMENT);                  //²Á³ýµÚMAX_SEGMENT¶Î
//   11 ********************************************************************************/

        RSEG CODE_I:DATA:NOROOT(1)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
        PUSHM.W #0x2, R13
          CFI CFA SP+8
        POPM.A  #0x1, R15
          CFI CFA SP+4
        MOV.W   #0x0, 0(R15)
??Flash_Erase_Addr_0:
        BIT.W   #0x1, &0x144
        JC      ??Flash_Erase_Addr_0
          CFI EndBlock cfiBlock1
        REQUIRE ?Subroutine5
        // Fall through to label ?Subroutine5

        RSEG CODE_I:DATA:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function Flash_Write_DWold
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function Flash_Write_Word
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond3) R10L Frame(CFA, -12)
          CFI (cfiCond3) R10H Frame(CFA, -10)
          CFI (cfiCond3) R11L Frame(CFA, -8)
          CFI (cfiCond3) R11H Frame(CFA, -6)
          CFI (cfiCond3) CFA SP+16
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function Flash_Write_Byte
          CFI (cfiCond4) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond4) R10L Frame(CFA, -12)
          CFI (cfiCond4) R10H Frame(CFA, -10)
          CFI (cfiCond4) R11L Frame(CFA, -8)
          CFI (cfiCond4) R11H Frame(CFA, -6)
          CFI (cfiCond4) CFA SP+16
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function Flash_Write_buf
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond5) R10L Frame(CFA, -12)
          CFI (cfiCond5) R10H Frame(CFA, -10)
          CFI (cfiCond5) R11L Frame(CFA, -8)
          CFI (cfiCond5) R11H Frame(CFA, -6)
          CFI (cfiCond5) CFA SP+16
          CFI Block cfiBlock6 Using cfiCommon0
          CFI (cfiBlock6) NoFunction
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV.W   #0xa500, &0x140
        MOV.W   #0xa510, &0x144
        RETA
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiBlock6
          CFI EndBlock cfiPicker7

        RSEG CODE_I:DATA:REORDER:NOROOT(1)
//   12 __ramfunc void Flash_Erase_Segment(uint16_t segmentNo)
Flash_Erase_Segment:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function Flash_Erase_Segment
        CALLA   #?Subroutine3
//   13 {
//   14   ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT);  //¶ÏÑÔ¼ì²â¶Î·¶Î§ÊÇ·ñÔÚFLASHÇø¼ä
//   15   
//   16   uint16_t * Addr = (uint16_t *)((uint32_t)segmentNo*512);   //¼ÆËãµØÖ·
//   17   
//   18   FCTL3 = FWKEY;                              // Çå³ýËø¶¨
//   19   FCTL1 = FWKEY+ERASE;                        // ²Á³ýÒ»¶Î
//   20   *Addr = 0;                                  //¶Ô²Á³ýµÄµØÖ··¶Î§ÄÚÈÎÒâ×öÒ»´Î¿ÕÐ´Èë£¬ÓÃÒÔÆô¶¯²Á³ý²Ù×÷
??CrossCallReturnLabel_3:
        MOV.W   #0x0, R13
        CALLA   #?ShiftLeft32_9
        JMP     ?Subroutine0
        NOP
          CFI EndBlock cfiBlock8
        REQUIRE _A_FCTL3_L
        REQUIRE _A_FCTL1_L
//   21   while (FCTL3 & BUSY);                       // µÈ´ýÔÊÐí²Ù×÷
//   22   FCTL1 = FWKEY;                              //Çå³ý²Á³ýÎ»  
//   23   FCTL3 = FWKEY+LOCK;                         //¶ÔFLASH¼ÓËø£¬¿É¶Á£¬²»¿ÉÐ´£¬²»¿É²Á³ý
//   24 }

        RSEG CODE_I:DATA:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond9 Using cfiCommon0
          CFI Function Flash_Erase_Addr
          CFI Conditional ??CrossCallReturnLabel_2
          CFI CFA SP+8
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function Flash_Erase_Segment
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond10) CFA SP+8
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        REQUIRE ?cstart_init_copy_ramfunc
//   25 /*******************************************************************************
//   26 *  º¯ÊýÃû³Æ£º²Á³ýflashÖÐµÄÄ³Ò»¶Î
//   27 *  ¹¦ÄÜËµÃ÷£º¶ÎÓ¦¸ÃÊÇÔÚ£¨£©£¬Îª±£»¤³ÌÐò£¬×îºÃÈ¡×îºó¼¸¸ö¶Î
//   28 *  ²ÎÊýËµÃ÷£º±ØÐëÒ»´Î²Á³ý512×Ö½Ú£¬FlashÈÝÁ¿£¨128KB£©¶ÔÓ¦segmentNoÊýÁ¿£¨128*1024/512=256£©£¬Ê¹ÓÃÊ±½¨ÒéÈ¡¿¿ºóÃæµÄ¶ÎÎ»
//   29 *  º¯Êý·µ»Ø£ºÎÞ
//   30 *  Ê¹ÓÃÊ¾Àý£ºFlash_Erase_Addr(0xFFFF);
//   31 ********************************************************************************/
//   32 __ramfunc void Flash_Erase_Addr   (uint32_t addr)
//   33 {
//   34   uint16_t * Addr = (uint16_t *)addr;
//   35   FCTL3 = FWKEY;                              // Çå³ýËø¶¨
        MOV.W   #0xa500, &0x144
//   36   FCTL1 = FWKEY+ERASE;                        // ²Á³ýÒ»¶Î
        MOV.W   #0xa502, &0x140
        RETA
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG CODE_I:DATA:NOROOT(1)
Flash_Write_buf:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function Flash_Write_buf
        REQUIRE ?cstart_init_copy_ramfunc
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R13, R10
        CALLA   #?Subroutine6
??CrossCallReturnLabel_6:
        PUSHM.W #0x2, R13
          CFI CFA SP+16
        POPM.A  #0x1, R11
          CFI CFA SP+12
        CALLA   #?Subroutine4
??CrossCallReturnLabel_4:
        CMP.W   #0x0, R14
        JEQ     ??Flash_Write_buf_2
??Flash_Write_buf_1:
        ADD.W   #0xffff, R14
??Flash_Write_buf_0:
        BIT.W   #0x1, &0x144
        JC      ??Flash_Write_buf_0
        MOV.B   @R15+, 0(R11)
        ADDA    #0x1, R11
        CMP.W   #0x0, R14
        JNE     ??Flash_Write_buf_1
??Flash_Write_buf_2:
        JMP     ??Subroutine7_0
        NOP
          CFI EndBlock cfiBlock12
        REQUIRE _A_FCTL3_L
        REQUIRE _A_FCTL1_L

        RSEG CODE_I:DATA:NOROOT(1)
Flash_Write_DWold:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function Flash_Write_DWold
        REQUIRE ?cstart_init_copy_ramfunc
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        CALLA   #?Subroutine2
??CrossCallReturnLabel_1:
        PUSHM.W #0x2, R13
          CFI CFA SP+16
        POPM.A  #0x1, R11
          CFI CFA SP+12
        MOV.W   R14, 0(R11)
        MOV.W   R15, 0x2(R11)
        JMP     ?Subroutine1
        NOP
          CFI EndBlock cfiBlock13
        REQUIRE _A_FCTL3_L
        REQUIRE _A_FCTL1_L

        RSEG CODE_I:DATA:NOROOT(1)
Flash_Write_Word:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function Flash_Write_Word
        REQUIRE ?cstart_init_copy_ramfunc
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        CALLA   #?Subroutine2
??CrossCallReturnLabel_0:
        PUSHM.W #0x2, R13
          CFI CFA SP+16
        POPM.A  #0x1, R15
          CFI CFA SP+12
        MOV.W   R14, 0(R15)
        JMP     ?Subroutine1
        NOP
          CFI EndBlock cfiBlock14
        REQUIRE _A_FCTL3_L
        REQUIRE _A_FCTL1_L

        RSEG CODE_I:DATA:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function Flash_Write_DWold
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function Flash_Write_Word
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond16) R10L Frame(CFA, -12)
          CFI (cfiCond16) R10H Frame(CFA, -10)
          CFI (cfiCond16) R11L Frame(CFA, -8)
          CFI (cfiCond16) R11H Frame(CFA, -6)
          CFI (cfiCond16) CFA SP+16
          CFI Block cfiPicker17 Using cfiCommon1
          CFI (cfiPicker17) NoFunction
          CFI (cfiPicker17) Picker
        MOV.W   R13, R10
        MOV.W   #0xa500, &0x144
        MOV.W   #0xa580, &0x140
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiPicker17
        REQUIRE ?Subroutine6
        // Fall through to label ?Subroutine6
//   37   *Addr = 0;                                  //¶Ô²Á³ýµÄµØÖ··¶Î§ÄÚÈÎÒâ×öÒ»´Î¿ÕÐ´Èë£¬ÓÃÒÔÆô¶¯²Á³ý²Ù×÷
//   38   while (FCTL3 & BUSY);                       // µÈ´ýÔÊÐí²Ù×÷
//   39   FCTL1 = FWKEY;                              //Çå³ý²Á³ýÎ»  
//   40   FCTL3 = FWKEY+LOCK;                         //¶ÔFLASH¼ÓËø£¬¿É¶Á£¬²»¿ÉÐ´£¬²»¿É²Á³ý
//   41 }
//   42 /*******************************************************************************
//   43 *  º¯ÊýÃû³Æ£º
//   44 *  ¹¦ÄÜËµÃ÷£ºÐ´ÈëÒ»¸ö×Ö½ÚÊý¾Ýµ½Flash
//   45 *  ²ÎÊýËµÃ÷£ºuint16 segmentNo £º¶ÎÎ» uint16_t offset £ºÆ«ÒÆÁ¿£¬uint16 data £ºÒªÐ´ÈëµÄÊý¾Ý
//   46 *  º¯Êý·µ»Ø£ºÎÞ
//   47 *  Ê¹ÓÃÊ¾Àý£ºFlash_Write(200,0,0x10);    //ÔÚµÚ200¸ö¶ÎÎ»£¬Æ«ÒÆ0¸ö×Ö½Ú£¬Ð´ÈëÊý¾Ý0x10
//   48 ********************************************************************************/

        RSEG CODE_I:DATA:NOROOT(1)
?Subroutine6:
          CFI Block cfiCond18 Using cfiCommon0
          CFI Function Flash_Write_buf
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function Flash_Write_DWold
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond19) R10L Frame(CFA, -12)
          CFI (cfiCond19) R10H Frame(CFA, -10)
          CFI (cfiCond19) R11L Frame(CFA, -8)
          CFI (cfiCond19) R11H Frame(CFA, -6)
          CFI (cfiCond19) CFA SP+16
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function Flash_Write_Word
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond20) R10L Frame(CFA, -12)
          CFI (cfiCond20) R10H Frame(CFA, -10)
          CFI (cfiCond20) R11L Frame(CFA, -8)
          CFI (cfiCond20) R11H Frame(CFA, -6)
          CFI (cfiCond20) CFA SP+16
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function Flash_Write_Byte
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond21) R10L Frame(CFA, -12)
          CFI (cfiCond21) R10H Frame(CFA, -10)
          CFI (cfiCond21) R11L Frame(CFA, -8)
          CFI (cfiCond21) R11H Frame(CFA, -6)
          CFI (cfiCond21) CFA SP+16
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV.W   #0x0, R13
        CALLA   #?ShiftLeft32_9
        ADD.W   R10, R12
        ADDC.W  #0x0, R13
        RETA
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG CODE_I:DATA:NOROOT(1)
//   49 __ramfunc void Flash_Write_Byte(uint16_t segmentNo,uint16_t offset,uint8_t data)
Flash_Write_Byte:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function Flash_Write_Byte
        REQUIRE ?cstart_init_copy_ramfunc
//   50 {
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R13, R10
//   51   ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT);  //¶ÏÑÔ¼ì²â¶Î·¶Î§ÊÇ·ñÔÚFLASHÇø¼ä
//   52   
//   53   uint8_t * Addr = (uint8_t *)((uint32_t)segmentNo*512 + offset);        //¼ÆËãµØÖ·
//   54   
//   55   FCTL3 = FWKEY;                            //Çå³ýËø¶¨ 
        CALLA   #?Subroutine4
//   56   FCTL1 = FWKEY+WRT;                        //ÖÃÎ»±à³ÌÎ»
//   57   *Addr = data;                             //Ð´ÈëÒ»¸ö×Ö
??CrossCallReturnLabel_5:
        CALLA   #?Subroutine6
??CrossCallReturnLabel_7:
        PUSHM.W #0x2, R13
          CFI CFA SP+16
        POPM.A  #0x1, R15
          CFI CFA SP+12
        MOV.B   R14, 0(R15)
          CFI EndBlock cfiBlock23
        REQUIRE ?Subroutine1
        REQUIRE _A_FCTL3_L
        REQUIRE _A_FCTL1_L
        // Fall through to label ?Subroutine1
//   58   while (FCTL3 & BUSY);                     //µÈ´ý²Ù×÷Íê³É
//   59   FCTL1 = FWKEY;                            //Çå³ýÐ´ÈëÎ»
//   60   FCTL3 = FWKEY+LOCK;                       //¶ÔFLASH¼ÓËø£¬¿É¶Á£¬²»¿ÉÐ´£¬²»¿É²Á³ý£¬±£»¤Êý¾Ý
//   61 }

        RSEG CODE_I:DATA:NOROOT(1)
?Subroutine1:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI NoFunction
          CFI CFA SP+12
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
//   62 /*******************************************************************************
//   63 *  º¯ÊýÃû³Æ£º
//   64 *  ¹¦ÄÜËµÃ÷£ºÐ´ÈëÒ»¸ö×ÖÊý¾Ýµ½Flash
//   65 *  ²ÎÊýËµÃ÷£ºuint16 segmentNo £º¶ÎÎ» uint16_t offset £ºÆ«ÒÆÁ¿£¬uint16 data £ºÒªÐ´ÈëµÄÊý¾Ý
//   66 *  º¯Êý·µ»Ø£ºÎÞ
//   67 *  Ê¹ÓÃÊ¾Àý£ºFlash_Write(200,0,0xf010);    //ÔÚµÚ200¸ö¶ÎÎ»£¬Æ«ÒÆ0¸ö×Ö½Ú£¬Ð´ÈëÊý¾Ý0xf010
//   68 ********************************************************************************/
//   69 __ramfunc void Flash_Write_Word(uint16_t segmentNo,uint16_t offset,uint16_t data)
//   70 {
//   71   ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT);  //¶ÏÑÔ¼ì²â¶Î·¶Î§ÊÇ·ñÔÚFLASHÇø¼ä
//   72   
//   73   uint16_t * Addr=(uint16_t *)((uint32_t)segmentNo*512 + offset);        //¼ÆËãµØÖ·
//   74   
//   75   FCTL3 = FWKEY;                            //Çå³ýËø¶¨ 
//   76   FCTL1 = FWKEY+BLKWRT;                     //ÖÃÎ»±à³ÌÎ»
//   77   *Addr = data;                             //Ð´ÈëÒ»¸ö×Ö
//   78   while (FCTL3 & BUSY);                     //µÈ´ý²Ù×÷Íê³É
//   79   FCTL1 = FWKEY;                            //Çå³ýÐ´ÈëÎ»
//   80   FCTL3 = FWKEY+LOCK;                       //¶ÔFLASH¼ÓËø£¬¿É¶Á£¬²»¿ÉÐ´£¬²»¿É²Á³ý£¬±£»¤Êý¾Ý
//   81 }
//   82 /*******************************************************************************
//   83 *  º¯ÊýÃû³Æ£º
//   84 *  ¹¦ÄÜËµÃ÷£ºÐ´ÈëËÄ¸ö×Ö½ÚÊý¾Ýµ½Flash
//   85 *  ²ÎÊýËµÃ÷£ºuint16 segmentNo £º¶ÎÎ» uint16_t offset £ºÆ«ÒÆÁ¿£¬int32 data £ºÒªÐ´ÈëµÄÊý¾Ý
//   86 *  º¯Êý·µ»Ø£ºÎÞ
//   87 *  Ê¹ÓÃÊ¾Àý£ºFlash_Write(200,0,0xf0e0d010);    //ÔÚµÚ200¸ö¶ÎÎ»£¬Æ«ÒÆ0¸ö×Ö½Ú£¬Ð´ÈëÊý¾Ý0xf0e0d010
//   88 ********************************************************************************/
//   89 __ramfunc void Flash_Write_DWold(uint16_t segmentNo,uint16_t offset,uint32_t data)
//   90 {
//   91   ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT);  //¶ÏÑÔ¼ì²â¶Î·¶Î§ÊÇ·ñÔÚFLASHÇø¼ä
//   92   
//   93   uint32_t * Addr = (uint32_t *)((uint32_t)segmentNo*512 + offset);        //¼ÆËãµØÖ·
//   94   
//   95   FCTL3 = FWKEY;                            //Çå³ýËø¶¨ 
//   96   FCTL1 = FWKEY+BLKWRT;                     //ÖÃÎ»±à³ÌÎ»
//   97   *Addr = data;                             //Ð´ÈëÒ»¸ö×Ö
//   98   while (FCTL3 & BUSY);                     //µÈ´ý²Ù×÷Íê³É
        BIT.W   #0x1, &0x144
        JC      ?Subroutine1
          CFI EndBlock cfiBlock24
//   99   FCTL1 = FWKEY;                            //Çå³ýÐ´ÈëÎ»
        REQUIRE ??Subroutine7_0
        // Fall through to label ??Subroutine7_0

        RSEG CODE_I:DATA:REORDER:NOROOT(1)
??Subroutine7_0:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI NoFunction
          CFI CFA SP+12
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
//  100   FCTL3 = FWKEY+LOCK;                       //¶ÔFLASH¼ÓËø£¬¿É¶Á£¬²»¿ÉÐ´£¬²»¿É²Á³ý£¬±£»¤Êý¾Ý
//  101 }
//  102 /*******************************************************************************
//  103 *  º¯ÊýÃû³Æ£ºFlash_Write_buf(uint16_t segmentNo,uint16_t offset,uint16_t cnt,uint8_t buf[])
//  104 *  ¹¦ÄÜËµÃ÷£ºÐ´Èë¶à¸ö×Ö½ÚÊý¾Ýµ½Flash
//  105 *  ²ÎÊýËµÃ÷£ºuint16 segmentNo £º¶ÎÎ» uint16_t offset £ºÆðÊ¼Êý¾ÝÆ«ÒÆÁ¿£¬uint16 cnt £ºÐ´ÈëÊý¾ÝÊýÁ¿£¬uint8 buf[]ÒªÐ´ÈëµÄÊý¾Ý
//  106 *  º¯Êý·µ»Ø£ºÎÞ
//  107 *  Ê¹ÓÃÊ¾Àý£ºuint8 data[10];Flash_Write_buf(200,0,10,data);            //´ÓµÚ200¸ö¶ÎÎ»£¬Æ«ÒÆµØÖ·Îª0¿ªÊ¼£¬Á¬ÐøÐ´Èë10¸ö×Ö½Ú
//  108 ********************************************************************************/
//  109 __ramfunc void Flash_Write_buf(uint16_t segmentNo,uint16_t offset,uint16_t cnt,uint8_t buf[])
//  110 {
//  111   ASSERT(segmentNo >= MIN_SEGMENT && segmentNo <= MAX_SEGMENT);  //¶ÏÑÔ¼ì²â¶Î·¶Î§ÊÇ·ñÔÚFLASHÇø¼ä
//  112    
//  113   uint8_t * Addr = (uint8_t *)((uint32_t)segmentNo*512 + offset);        //¼ÆËãµØÖ·
//  114    
//  115   FCTL3 = FWKEY;                            //Çå³ýËø¶¨ 
//  116   FCTL1 = FWKEY + WRT ;                     //ÖÃÎ»±à³ÌÎ»
//  117   while(cnt--)                              
//  118   {
//  119     while (FCTL3 & BUSY);                   //µÈ´ýÔÊÐí²Ù×÷
//  120     *Addr++ = *buf++;                       //Ð´ÈëÊý¾ÝÊ±Æô¶¯Ê±Ðò·¢ÉúÆ÷
//  121   }
//  122   FCTL1 = FWKEY;                            //Çå³ýÐ´ÈëÎ»
        CALLA   #?Subroutine5
//  123   FCTL3 = FWKEY+LOCK;                       //¶ÔFLASH¼ÓËø£¬¿É¶Á£¬²»¿ÉÐ´£¬²»¿É²Á³ý£¬±£»¤Êý¾Ý
//  124 }
??CrossCallReturnLabel_8:
        POPM.A  #0x2, R11
          CFI CFA SP+4
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R11L SameValue
          CFI R11H SameValue
        RETA
          CFI EndBlock cfiBlock25

        RSEG CODE_I:DATA:REORDER:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function Flash_Write_buf
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+16
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function Flash_Write_Byte
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond27) R10L Frame(CFA, -12)
          CFI (cfiCond27) R10H Frame(CFA, -10)
          CFI (cfiCond27) R11L Frame(CFA, -8)
          CFI (cfiCond27) R11H Frame(CFA, -6)
          CFI (cfiCond27) CFA SP+16
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV.W   #0xa500, &0x144
        MOV.W   #0xa540, &0x140
        RETA
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 218 bytes in segment CODE_I
//   4 bytes in segment DATA16_AN
// 
// 218 bytes of DATA memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
