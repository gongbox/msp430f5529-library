///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      06/Jun/2016  16:42:21 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\clock.c                            /
//    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\clock.c -D NDEBUG -D RAM_VECTOR    /
//                     -lC C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C /
//                     °æ\¹¤³ÌÄ£°å\Release\List\ -lA                          /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\          /
//                     -D__MSP430F5529__ -e --double=32 --dlib_config         /
//                     "D:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº /
//                     ¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MS /
//                     P430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                 /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                   /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\M /
//                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I      /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\12864\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\oled\ -I C:\Users\615\Desktop\MSP430\ /
//                     MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc /
//                     \ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\ /
//                     C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\src\ -I                  /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\inc\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\nokia5110\src\ -I                     /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                        /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\LCD_API\ -I                           /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\2.2TFT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\HardWare\delay\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\ -I C:\Users\615\Desktop\MSP430\MSP430F /
//                     5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\inc\ -I              /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\System\src\ -I C:\Users\615\Desktop\MSP430\MSP /
//                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\ -I                /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\User\USER\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I    /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\App\ -I                             /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\ -I                         /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\UCOSII\CORE\ -I                            /
//                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP4 /
//                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\        /
//                     --core=430X --data_model=large -Oh --multiplier=32     /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹ /
//                     ¤³ÌÄ£°å\Release\List\clock.s43                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME clock

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?ShiftRight32u
        EXTERN ?DivMod32u
        EXTERN ?DivMod16u
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC CLOCK_ACLK_Config
        FUNCTION CLOCK_ACLK_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC CLOCK_MCLK_Config
        FUNCTION CLOCK_MCLK_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC CLOCK_SMCLK_Config
        FUNCTION CLOCK_SMCLK_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC DCO_PLLConfig
        FUNCTION DCO_PLLConfig,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        FUNCTION SetVcoreUp,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC UCS
        FUNCTION XT1_Config,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        FUNCTION XT2_Config,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBWEAK _A_PCDIR_L
        PUBWEAK _A_PCSEL_L
        PUBWEAK _A_PMMCTL0_L
        PUBWEAK _A_PMMIFG_L
        PUBWEAK _A_SFRIFG1_L
        PUBWEAK _A_SVSMHCTL_L
        PUBWEAK _A_SVSMLCTL_L
        PUBLIC g_sClock
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L SameValue
          CFI R12H SameValue
          CFI R12 Concat
          CFI R13L SameValue
          CFI R13H SameValue
          CFI R13 Concat
          CFI R14L SameValue
          CFI R14H SameValue
          CFI R14 Concat
          CFI R15L SameValue
          CFI R15H SameValue
          CFI R15 Concat
          CFI EndCommon cfiCommon1
        
        EXTERN _Cast32uto32f
        FUNCTION _Cast32uto32f,0202H
        EXTERN _Div32f
        FUNCTION _Div32f,0202H
        EXTERN _CmpLt32f
        FUNCTION _CmpLt32f,0202H
        EXTERN _Add32f
        FUNCTION _Add32f,0202H
        EXTERN _Cast32fto32u
        FUNCTION _Cast32fto32u,0202H

// C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\clock.c
//    1 #include "clock.h"

        ASEGN DATA16_AN:DATA:NOROOT,0244H
// union <unnamed> __data16 _A_PCDIR_L
_A_PCDIR_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,024aH
// union <unnamed> __data16 _A_PCSEL_L
_A_PCSEL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0120H
// union <unnamed> __data16 _A_PMMCTL0_L
_A_PMMCTL0_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0124H
// union <unnamed> __data16 _A_SVSMHCTL_L
_A_SVSMHCTL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0126H
// union <unnamed> __data16 _A_SVSMLCTL_L
_A_SVSMLCTL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,012cH
// union <unnamed> __data16 _A_PMMIFG_L
_A_PMMIFG_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0102H
// union <unnamed> __data16 _A_SFRIFG1_L
_A_SFRIFG1_L:
        DS8 2
//    2 
//    3 #ifndef EXTAL_IN_XT1_Hz
//    4 #error Ã»ÓÐºê¶¨Òå"XT1_CLK_Hz",ÇëÔÚclock.hÀïºê¶¨Òå£¬Èç#define EXTAL_IN_XT1_Hz  32768HZ
//    5 #endif  
//    6 #ifndef EXTAL_IN_XT2_Hz
//    7 #error Ã»ÓÐºê¶¨Òå"XT2_CLK_Hz",ÇëÔÚclock.hÀïºê¶¨Òå£¬Èç#define EXTAL_IN_XT2_Hz  4000000HZ
//    8 #endif
//    9 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   10 const UCS_MemMapPtr UCS = UCS_BASE_PTR;
UCS:
        DC32 160H

        RSEG DATA20_N:DATA:SORT:NOROOT(1)
//   11 __no_init CLOCK g_sClock;                                        //È«¾Ö±äÁ¿£¬Ê±ÖÓÆµÂÊ
g_sClock:
        DS8 40
//   12 static void SetVcoreUp (uint8_t level);                            //ÉèÖÃÄÚºËµçÑ¹
//   13 /*******************************************************************************
//   14 *  º¯ÊýÃû³Æ£ºXT1_Config(BOOL status)
//   15 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÊÇ·ñÊ¹ÄÜXT1
//   16 *  ²ÎÊýËµÃ÷£ºBOOL status£ºÊÇ·ñÊ¹ÄÜXT1
//   17 *  º¯Êý·µ»Ø£ºÎÞ
//   18 *  Ê¹ÓÃÊ¾Àý£ºXT1_Config(ENABLE);   //Ê¹ÄÜXT1
//   19 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   20 static inline void XT1_Config(BOOL status)
XT1_Config:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function XT1_Config
//   21 {
//   22   if(status != DISABLE)
        CMP.B   #0x0, R12
        JEQ     ??XT1_Config_1
//   23   {
//   24     if(UCS->XT1_OFF == SET)
        BIT.B   #0x1, &0x16c
        JNC     ??XT1_Config_2
//   25     {
//   26       P5DIR &=~(BIT4+BIT5);
        AND.B   #0xcf, &0x244
//   27       P5SEL |= BIT4+BIT5;                             //Ñ¡ÓÃ XT1 µÚ¶þ¹¦ÄÜ
        BIS.B   #0x30, &0x24a
//   28       UCS->XT1_OFF = RESET ;                          // ¿ªÆô XT1                       
        BIC.B   #0x1, &0x16c
//   29       do
//   30       {
//   31         UCS->XT1_LFOFFG = RESET;                     // Çå³ýXT1,DCO Ê§Ð§±êÖ¾                     
??XT1_Config_0:
        BIC.B   #0x2, &0x16e
//   32         SFRIFG1 &= ~OFIFG;                           // 
        BIC.W   #0x2, &0x102
//   33       }while (UCS->XT1_LFOFFG == SET);               //
        BIT.B   #0x2, &0x16e
        JNC     ??XT1_Config_2
        JMP     ??XT1_Config_0
//   34     }
//   35   }
//   36   else
//   37   {
//   38     UCS->XT1_OFF = SET ;                          // ¹Ø±Õ XT1                       
??XT1_Config_1:
        BIS.B   #0x1, &0x16c
//   39   }
//   40 }
??XT1_Config_2:
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_PCDIR_L
        REQUIRE _A_PCSEL_L
        REQUIRE _A_SFRIFG1_L
//   41 /*******************************************************************************
//   42 *  º¯ÊýÃû³Æ£ºXT2_Config(BOOL status)
//   43 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÊÇ·ñÊ¹ÄÜXT2
//   44 *  ²ÎÊýËµÃ÷£ºBOOL status£ºÊÇ·ñÊ¹ÄÜXT2
//   45 *  º¯Êý·µ»Ø£ºÎÞ
//   46 *  Ê¹ÓÃÊ¾Àý£ºXT2_Config(TRUE);   //Ê¹ÄÜXT2
//   47 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   48 static inline void XT2_Config(BOOL status)
XT2_Config:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function XT2_Config
//   49 {
//   50   if(status != DISABLE)
        CMP.B   #0x0, R12
        JEQ     ??XT2_Config_1
//   51   {
//   52     if(UCS->XT2_OFF == SET)
        BIT.B   #0x1, &0x16d
        JNC     ??XT2_Config_2
//   53     {
//   54       P5DIR &=~(BIT2+BIT3);
        AND.B   #0xf3, &0x244
//   55       P5SEL |= BIT2+BIT3;                         //Ñ¡ÓÃ XT2 µÚ¶þ¹¦ÄÜ
        BIS.B   #0xc, &0x24a
//   56       UCS->XT2_OFF = RESET;                         //¿ªÆô XT2                      
        BIC.B   #0x1, &0x16d
//   57       do
//   58       {
//   59         UCS->XT2_OFFG = RESET;
??XT2_Config_0:
        BIC.B   #0x8, &0x16e
//   60         SFRIFG1 &= ~OFIFG;                       
        BIC.W   #0x2, &0x102
//   61       }while (UCS->XT2_OFFG == SET);
        BIT.B   #0x8, &0x16e
        JNC     ??XT2_Config_2
        JMP     ??XT2_Config_0
//   62     }
//   63   }
//   64   else
//   65   {
//   66     UCS->XT2_OFF = SET ;                          // ¹Ø±ÕXT2                       
??XT2_Config_1:
        BIS.B   #0x1, &0x16d
//   67   }
//   68 }
??XT2_Config_2:
        RETA
          CFI EndBlock cfiBlock1
        REQUIRE _A_PCDIR_L
        REQUIRE _A_PCSEL_L
        REQUIRE _A_SFRIFG1_L
//   69 /*******************************************************************************
//   70 *  º¯ÊýÃû³Æ£ºDCO_PLLConfig     (FLLREF_Source refsource, FLLREF_DIVx refdiv, uint32_t DCO_FLL_Fre)
//   71 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃDCOÆµÂÊ£¬µ¥Î»£¨HZ£©
//   72 *  ²ÎÊýËµÃ÷£ºFLLREF_Source refsource :²Î¿¼Ê±ÖÓÔ´
//   73              FLLREF_DIVx refdiv      :²Î¿¼Ê±ÖÓÔ´·ÖÆµÏµÊý
//   74              uint32_t DCO_FLL_Fre      :DCOÉèÖÃÆµÂÊ
//   75 *  º¯Êý·µ»Ø£ºÎÞ
//   76 *  Ê¹ÓÃÊ¾Àý£ºDCO_PLLConfig     (FLLREF_REFO, FLLREF_DIV_1, 16MHZ);  //ÉèÖÃDCO±¶Æµ»·ÒÔREFOµÄÒ»·ÖÆµ×÷Îª²Î¿¼Ê±ÖÓÔ´£¬±¶Æµµ½16MHZ
//   77 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine3:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CLOCK_ACLK_Config_8
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function CLOCK_SMCLK_Config
          CFI (cfiCond3) Conditional ??CLOCK_SMCLK_Config_8
          CFI (cfiCond3) R10L Frame(CFA, -8)
          CFI (cfiCond3) R10H Frame(CFA, -6)
          CFI (cfiCond3) CFA SP+12
          CFI Block cfiCond4 Using cfiCommon0
          CFI (cfiCond4) Function CLOCK_MCLK_Config
          CFI (cfiCond4) Conditional ??CLOCK_MCLK_Config_8
          CFI (cfiCond4) R10L Frame(CFA, -8)
          CFI (cfiCond4) R10H Frame(CFA, -6)
          CFI (cfiCond4) CFA SP+12
          CFI Block cfiCond5 Using cfiCommon0
          CFI (cfiCond5) Function DCO_PLLConfig
          CFI (cfiCond5) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond5) R6L Frame(CFA, -28)
          CFI (cfiCond5) R6H Frame(CFA, -26)
          CFI (cfiCond5) R7L Frame(CFA, -24)
          CFI (cfiCond5) R7H Frame(CFA, -22)
          CFI (cfiCond5) R8L Frame(CFA, -20)
          CFI (cfiCond5) R8H Frame(CFA, -18)
          CFI (cfiCond5) R9L Frame(CFA, -16)
          CFI (cfiCond5) R9H Frame(CFA, -14)
          CFI (cfiCond5) R10L Frame(CFA, -12)
          CFI (cfiCond5) R10H Frame(CFA, -10)
          CFI (cfiCond5) R11L Frame(CFA, -8)
          CFI (cfiCond5) R11H Frame(CFA, -6)
          CFI (cfiCond5) CFA SP+32
          CFI Block cfiPicker6 Using cfiCommon1
          CFI (cfiPicker6) NoFunction
          CFI (cfiPicker6) Picker
        MOV.W   #0x900, R12
        MOV.W   #0x3d, R13
        RETA
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiCond4
          CFI EndBlock cfiCond5
          CFI EndBlock cfiPicker6

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine1:
          CFI Block cfiCond7 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function CLOCK_SMCLK_Config
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond8) R10L Frame(CFA, -8)
          CFI (cfiCond8) R10H Frame(CFA, -6)
          CFI (cfiCond8) CFA SP+12
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function CLOCK_MCLK_Config
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond9) R10L Frame(CFA, -8)
          CFI (cfiCond9) R10H Frame(CFA, -6)
          CFI (cfiCond9) CFA SP+12
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function DCO_PLLConfig
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond10) R6L Frame(CFA, -28)
          CFI (cfiCond10) R6H Frame(CFA, -26)
          CFI (cfiCond10) R7L Frame(CFA, -24)
          CFI (cfiCond10) R7H Frame(CFA, -22)
          CFI (cfiCond10) R8L Frame(CFA, -20)
          CFI (cfiCond10) R8H Frame(CFA, -18)
          CFI (cfiCond10) R9L Frame(CFA, -16)
          CFI (cfiCond10) R9H Frame(CFA, -14)
          CFI (cfiCond10) R10L Frame(CFA, -12)
          CFI (cfiCond10) R10H Frame(CFA, -10)
          CFI (cfiCond10) R11L Frame(CFA, -8)
          CFI (cfiCond10) R11H Frame(CFA, -6)
          CFI (cfiCond10) CFA SP+32
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOVX.W  &g_sClock + 36, R12
        MOVX.W  &g_sClock + 38, R13
        RETA
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   78 void DCO_PLLConfig     (FLLREF_Source refsource, FLLREF_DIVx refdiv, uint32_t DCO_FLL_Fre)
DCO_PLLConfig:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function DCO_PLLConfig
//   79 {
        FUNCALL DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _CmpLt32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _CmpLt32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _CmpLt32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, XT2_Config
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, XT1_Config
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Div32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Add32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Add32f
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, _Cast32fto32u
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, CLOCK_MCLK_Config
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, CLOCK_SMCLK_Config
        LOCFRAME CSTACK, 28, STACK
        FUNCALL DCO_PLLConfig, CLOCK_ACLK_Config
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.B   R12, R7
        MOV.B   R13, R6
        MOV.W   R14, R10
        MOV.W   R15, R11
//   80   static const uint16_t ref_div_value[6]={1,2,4,8,12,16};
//   81   /*¸ù¾ÝÆµÂÊÌá¸ßÄÚºËµçÑ¹*/
//   82   //SetVcoreUp ( (DCO_FLL_Fre < 12MHz) ? 0 : ((DCO_FLL_Fre < 16MHz) ? 1 : ((DCO_FLL_Fre < 20MHz) ? 2 :3))); //ÉèÖÃÄÚºËµçÑ¹
//   83   if(DCO_FLL_Fre < 12MHz)
        CMP.W   #0xb7, R15
        JNC     ??DCO_PLLConfig_3
        JNE     ??DCO_PLLConfig_4
        CMP.W   #0x1b00, R14
        JC      ??DCO_PLLConfig_4
//   84     SetVcoreUp (0x00);                      //ÉèÖÃÄÚºËµçÑ¹
??DCO_PLLConfig_3:
        MOV.B   #0x0, R12
        JMP     ??DCO_PLLConfig_1
//   85   else if(DCO_FLL_Fre < 16MHz)
??DCO_PLLConfig_4:
        CMP.W   #0xf4, R15
        JNC     ??DCO_PLLConfig_5
        JNE     ??DCO_PLLConfig_6
        CMP.W   #0x2400, R14
        JC      ??DCO_PLLConfig_6
//   86     SetVcoreUp (0x01);       
??DCO_PLLConfig_5:
        MOV.B   #0x1, R12
        JMP     ??DCO_PLLConfig_1
//   87   else if(DCO_FLL_Fre < 20MHz)
??DCO_PLLConfig_6:
        MOV.W   R14, R12
        MOV.W   R15, R13
        CALLA   #_Cast32uto32f
        CALLA   #?Subroutine7
??CrossCallReturnLabel_22:
        JEQ     ??DCO_PLLConfig_7
//   88     SetVcoreUp (0x02);       
        MOV.B   #0x2, R12
        JMP     ??DCO_PLLConfig_1
//   89   else
//   90     SetVcoreUp (0x03);       
??DCO_PLLConfig_7:
        MOV.B   #0x3, R12
??DCO_PLLConfig_1:
        CALLA   #SetVcoreUp
//   91   
//   92   __bis_SR_register(SCG0);                                              // ½ûÖ¹±¶Æµ»·FLL,
        BIS.W   #0x40, SR
//   93   UCS->CTL0 = 0x0000;                                                   // ÇåÁã DCOx, MODx
        MOV.W   #0x0, &0x160
//   94   
//   95   if (DCO_FLL_Fre < 0.63MHz)         //           fsystem < 0.63MHz
        CMP.W   #0x9, R11
        JNC     ??DCO_PLLConfig_8
        JNE     ??DCO_PLLConfig_9
        CMP.W   #0x9cf0, R10
        JC      ??DCO_PLLConfig_9
//   96 	UCS->DCORSEL = 0;
??DCO_PLLConfig_8:
        AND.B   #0x8f, &0x162
        JMP     ??DCO_PLLConfig_10
//   97   else if (DCO_FLL_Fre < 1.25MHz)    // 0.63MHz < fsystem < 1.25MHz
??DCO_PLLConfig_9:
        CMP.W   #0x13, R11
        JNC     ??DCO_PLLConfig_11
        JNE     ??DCO_PLLConfig_12
        CMP.W   #0x12d0, R10
        JC      ??DCO_PLLConfig_12
//   98 	UCS->DCORSEL = 1;
??DCO_PLLConfig_11:
        CALLA   #?Subroutine6
??CrossCallReturnLabel_16:
        BIS.B   #0x10, R14
        JMP     ??DCO_PLLConfig_2
//   99   else if (DCO_FLL_Fre < 2.5MHz)     // 1.25MHz < fsystem <  2.5MHz
??DCO_PLLConfig_12:
        CMP.W   #0x26, R11
        JNC     ??DCO_PLLConfig_13
        JNE     ??DCO_PLLConfig_14
        CMP.W   #0x25a0, R10
        JC      ??DCO_PLLConfig_14
//  100 	UCS->DCORSEL = 2;
??DCO_PLLConfig_13:
        CALLA   #?Subroutine6
??CrossCallReturnLabel_17:
        BIS.B   #0x20, R14
        JMP     ??DCO_PLLConfig_2
//  101   else if (DCO_FLL_Fre <   5MHz)     // 2.5MHz  < fsystem <    5MHz
??DCO_PLLConfig_14:
        CMP.W   #0x4c, R11
        JNC     ??DCO_PLLConfig_15
        JNE     ??DCO_PLLConfig_16
        CMP.W   #0x4b40, R10
        JC      ??DCO_PLLConfig_16
//  102 	UCS->DCORSEL = 3;
??DCO_PLLConfig_15:
        CALLA   #?Subroutine6
??CrossCallReturnLabel_18:
        BIS.B   #0x30, R14
        JMP     ??DCO_PLLConfig_2
//  103   else if (DCO_FLL_Fre <  10MHz)     // 5MHz    < fsystem <   10MHz
??DCO_PLLConfig_16:
        CMP.W   #0x98, R11
        JNC     ??DCO_PLLConfig_17
        JNE     ??DCO_PLLConfig_18
        CMP.W   #0x9680, R10
        JC      ??DCO_PLLConfig_18
//  104 	UCS->DCORSEL = 4;
??DCO_PLLConfig_17:
        CALLA   #?Subroutine6
??CrossCallReturnLabel_19:
        BIS.B   #0x40, R14
        JMP     ??DCO_PLLConfig_2
//  105   else if (DCO_FLL_Fre <  20MHz)     // 10MHz   < fsystem <   20MHz
??DCO_PLLConfig_18:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Cast32uto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        CALLA   #?Subroutine7
??CrossCallReturnLabel_23:
        JEQ     ??DCO_PLLConfig_19
//  106 	UCS->DCORSEL = 5;
        CALLA   #?Subroutine6
??CrossCallReturnLabel_20:
        BIS.B   #0x50, R14
        JMP     ??DCO_PLLConfig_2
//  107   else if (DCO_FLL_Fre <  40MHz)     // 20MHz   < fsystem <   40MHz
??DCO_PLLConfig_19:
        MOV.W   #0x9680, R14
        MOV.W   #0x4c18, R15
        MOV.W   R8, R12
        MOV.W   R9, R13
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??DCO_PLLConfig_20
//  108 	UCS->DCORSEL = 6;
        CALLA   #?Subroutine6
??CrossCallReturnLabel_21:
        BIS.B   #0x60, R14
??DCO_PLLConfig_2:
        MOV.B   R14, &0x162
        JMP     ??DCO_PLLConfig_10
//  109   else
//  110 	UCS->DCORSEL = 7;
??DCO_PLLConfig_20:
        BIS.B   #0x70, &0x162
//  111 
//  112   g_sClock.DCO_FLL_Frequency = DCO_FLL_Fre;
??DCO_PLLConfig_10:
        MOVX.W  R10, &g_sClock + 36
        MOVX.W  R11, &g_sClock + 38
//  113   
//  114   UCS->FLLREFDIV = refdiv;
        MOV.B   #0x7, R8
        MOV.B   R6, R14
        AND.B   R8, R14
        MOV.B   #0xf8, R15
        AND.B   &0x166, R15
        BIS.B   R14, R15
        MOV.B   R15, &0x166
//  115   UCS->SELREF = refsource;
        MOV.B   R7, R14
        RPT     #0x4
        RLAX.B  R14
        AND.B   #0x70, R14
        MOV.B   #0x8f, R15
        AND.B   &0x166, R15
        BIS.B   R14, R15
        MOV.B   R15, &0x166
//  116   
//  117   float Fref_value;
//  118   if(refsource == FLLREF_XT2)
        CMP.B   #0x5, R7
        JNE     ??DCO_PLLConfig_21
//  119   {
//  120     XT2_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT2_Config
//  121     Fref_value = (float)((uint32_t)EXTAL_IN_XT2_Hz/ref_div_value[refdiv]);  
        CALLA   #?Subroutine3
//  122   }
??CrossCallReturnLabel_9:
        ADDA    R6, R6
        MOVX.W  ??ref_div_value(R6), R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        JMP     ??DCO_PLLConfig_22
//  123   else if(refsource == FLLREF_XT1)
??DCO_PLLConfig_21:
        CMP.B   #0x0, R7
        JNE     ??DCO_PLLConfig_23
//  124   {
//  125     XT1_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT1_Config
//  126     Fref_value = (float)(EXTAL_IN_XT1_Hz/ref_div_value[refdiv]);
        JMP     ??DCO_PLLConfig_24
//  127   }
//  128   else if(refsource == FLLREF_REFO)
??DCO_PLLConfig_23:
        CMP.B   #0x2, R7
        JNE     ??DCO_PLLConfig_25
//  129   {
//  130     Fref_value = (float)(REFOCLK_FREQUENCY/ref_div_value[refdiv]);
??DCO_PLLConfig_24:
        MOV.W   #0x8000, R12
        ADDA    R6, R6
        MOVX.W  ??ref_div_value(R6), R14
        CALLA   #?DivMod16u
        MOV.W   #0x0, R13
??DCO_PLLConfig_22:
        CALLA   #_Cast32uto32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  131   }
//  132   uint16_t FLLN_VALUE = (uint16_t)((g_sClock.DCO_FLL_Frequency/Fref_value+0.5f)-1u);
//  133   ASSERT(FLLN_VALUE < 1024);         //²»ÔÊÐí³¬¹ý1023£¬Çë½«DCOÆµÂÊÉèµÍ»òÕß¸ü»»Îª¸ü¸ßÆµÂÊµÄ²Î¿¼Ê±ÖÓÔ´
//  134   
//  135   UCS->FLLN = FLLN_VALUE;        //
??DCO_PLLConfig_25:
        CALLA   #?Subroutine1
??CrossCallReturnLabel_5:
        CALLA   #_Cast32uto32f
        MOV.W   R10, R14
        MOV.W   R11, R15
        CALLA   #_Div32f
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
        CALLA   #_Add32f
        MOV.W   #0x0, R14
        MOV.W   #0xbf80, R15
        CALLA   #_Add32f
        CALLA   #_Cast32fto32u
        AND.W   #0x3ff, R12
        MOV.W   #0xfc00, R15
        AND.W   &0x164, R15
        BIS.W   R12, R15
        MOV.W   R15, &0x164
//  136   UCS->FLLD = 0;     //ÉèÖÃDCO·ÖÆµ  
        AND.W   #0x8fff, &0x164
//  137   
//  138   __bic_SR_register(SCG0);                  // Ê¹ÄÜFLL
        BIC.W   #0x40, SR
//  139   do
//  140   {
//  141     UCS->DCO_FFG = RESET; // Çå³ý,DCO Ê§Ð§±êÖ¾                                        
??DCO_PLLConfig_0:
        BIC.B   #0x1, &0x16e
//  142     SFRIFG1 &= ~OFIFG;                                             // Çå³ýÊ±ÖÓÊ§Ð§±êÖ¾
        BIC.W   #0x2, &0x102
//  143   }while (UCS->DCO_FFG == SET);                                           // ¼ì²éDCOÊ§Ð§±êÖ¾
        BIT.B   #0x1, &0x16e
        JC      ??DCO_PLLConfig_0
//  144  
//  145   //½«Ê¹ÓÃDCO×÷ÎªÊ±ÖÓÔ´µÄÊ±ÖÓÆµÂÊÖµÐÞ¸Ä
//  146   if(UCS->SELM == DCO || UCS->SELM == DCO_DIV) 
        MOVA    #0x168, R11
        MOV.B   R8, R14
        AND.B   @R11, R14
        CMP.B   #0x3, R14
        JEQ     ??DCO_PLLConfig_26
        MOV.B   R8, R14
        AND.B   @R11, R14
        CMP.B   #0x4, R14
        JNE     ??DCO_PLLConfig_27
//  147   {
//  148     CLK_DIVx div = (CLK_DIVx)UCS->DIVM;
??DCO_PLLConfig_26:
        MOV.B   &0x16a, R13
//  149     CLOCK_MCLK_Config ((CLK_Source)UCS->SELM, div);
        AND.B   R8, R13
        MOV.B   R8, R12
        AND.B   @R11, R12
        CALLA   #CLOCK_MCLK_Config
//  150   }
//  151   
//  152   if(UCS->SELS == DCO || UCS->SELS == DCO_DIV)
??DCO_PLLConfig_27:
        MOV.B   @R11, R14
        RPT     #0x4
        RRUX.B  R14
        AND.B   R8, R14
        CMP.B   #0x3, R14
        JEQ     ??DCO_PLLConfig_28
        MOV.B   @R11, R14
        RPT     #0x4
        RRUX.B  R14
        AND.B   R8, R14
        CMP.B   #0x4, R14
        JNE     ??DCO_PLLConfig_29
//  153   {
//  154     CLK_DIVx div = (CLK_DIVx)UCS->DIVS;
??DCO_PLLConfig_28:
        MOV.B   &0x16a, R13
//  155     CLOCK_SMCLK_Config((CLK_Source)UCS->SELS, div);
        RPT     #0x4
        RRUX.B  R13
        AND.B   R8, R13
        MOV.B   @R11, R12
        RPT     #0x4
        RRUX.B  R12
        AND.B   R8, R12
        CALLA   #CLOCK_SMCLK_Config
//  156   }
//  157   
//  158   if(UCS->SELA == DCO || UCS->SELA == DCO_DIV)
??DCO_PLLConfig_29:
        MOV.B   R8, R14
        AND.B   &0x169, R14
        CMP.B   #0x3, R14
        JEQ     ??DCO_PLLConfig_30
        MOV.B   R8, R14
        AND.B   &0x169, R14
        CMP.B   #0x4, R14
        JNE     ??DCO_PLLConfig_31
//  159   {
//  160     CLK_DIVx div = (CLK_DIVx)UCS->DIVA;
??DCO_PLLConfig_30:
        MOV.B   &0x16b, R13
//  161     CLOCK_ACLK_Config ((CLK_Source)UCS->SELS, div);
        AND.B   R8, R13
        MOV.B   @R11, R12
        RPT     #0x4
        RRUX.B  R12
        AND.B   R8, R12
        CALLA   #CLOCK_ACLK_Config
//  162   }
//  163 }
??DCO_PLLConfig_31:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock12
        REQUIRE _A_SFRIFG1_L

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine7:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function DCO_PLLConfig
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function DCO_PLLConfig
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond14) R6L Frame(CFA, -28)
          CFI (cfiCond14) R6H Frame(CFA, -26)
          CFI (cfiCond14) R7L Frame(CFA, -24)
          CFI (cfiCond14) R7H Frame(CFA, -22)
          CFI (cfiCond14) R8L Frame(CFA, -20)
          CFI (cfiCond14) R8H Frame(CFA, -18)
          CFI (cfiCond14) R9L Frame(CFA, -16)
          CFI (cfiCond14) R9H Frame(CFA, -14)
          CFI (cfiCond14) R10L Frame(CFA, -12)
          CFI (cfiCond14) R10H Frame(CFA, -10)
          CFI (cfiCond14) R11L Frame(CFA, -8)
          CFI (cfiCond14) R11H Frame(CFA, -6)
          CFI (cfiCond14) CFA SP+32
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV.W   #0x9680, R14
        MOV.W   #0x4b98, R15
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        RETA
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine6:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function DCO_PLLConfig
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+32
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function DCO_PLLConfig
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond17) R6L Frame(CFA, -28)
          CFI (cfiCond17) R6H Frame(CFA, -26)
          CFI (cfiCond17) R7L Frame(CFA, -24)
          CFI (cfiCond17) R7H Frame(CFA, -22)
          CFI (cfiCond17) R8L Frame(CFA, -20)
          CFI (cfiCond17) R8H Frame(CFA, -18)
          CFI (cfiCond17) R9L Frame(CFA, -16)
          CFI (cfiCond17) R9H Frame(CFA, -14)
          CFI (cfiCond17) R10L Frame(CFA, -12)
          CFI (cfiCond17) R10H Frame(CFA, -10)
          CFI (cfiCond17) R11L Frame(CFA, -8)
          CFI (cfiCond17) R11H Frame(CFA, -6)
          CFI (cfiCond17) CFA SP+32
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function DCO_PLLConfig
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond18) R6L Frame(CFA, -28)
          CFI (cfiCond18) R6H Frame(CFA, -26)
          CFI (cfiCond18) R7L Frame(CFA, -24)
          CFI (cfiCond18) R7H Frame(CFA, -22)
          CFI (cfiCond18) R8L Frame(CFA, -20)
          CFI (cfiCond18) R8H Frame(CFA, -18)
          CFI (cfiCond18) R9L Frame(CFA, -16)
          CFI (cfiCond18) R9H Frame(CFA, -14)
          CFI (cfiCond18) R10L Frame(CFA, -12)
          CFI (cfiCond18) R10H Frame(CFA, -10)
          CFI (cfiCond18) R11L Frame(CFA, -8)
          CFI (cfiCond18) R11H Frame(CFA, -6)
          CFI (cfiCond18) CFA SP+32
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function DCO_PLLConfig
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond19) R6L Frame(CFA, -28)
          CFI (cfiCond19) R6H Frame(CFA, -26)
          CFI (cfiCond19) R7L Frame(CFA, -24)
          CFI (cfiCond19) R7H Frame(CFA, -22)
          CFI (cfiCond19) R8L Frame(CFA, -20)
          CFI (cfiCond19) R8H Frame(CFA, -18)
          CFI (cfiCond19) R9L Frame(CFA, -16)
          CFI (cfiCond19) R9H Frame(CFA, -14)
          CFI (cfiCond19) R10L Frame(CFA, -12)
          CFI (cfiCond19) R10H Frame(CFA, -10)
          CFI (cfiCond19) R11L Frame(CFA, -8)
          CFI (cfiCond19) R11H Frame(CFA, -6)
          CFI (cfiCond19) CFA SP+32
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function DCO_PLLConfig
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond20) R6L Frame(CFA, -28)
          CFI (cfiCond20) R6H Frame(CFA, -26)
          CFI (cfiCond20) R7L Frame(CFA, -24)
          CFI (cfiCond20) R7H Frame(CFA, -22)
          CFI (cfiCond20) R8L Frame(CFA, -20)
          CFI (cfiCond20) R8H Frame(CFA, -18)
          CFI (cfiCond20) R9L Frame(CFA, -16)
          CFI (cfiCond20) R9H Frame(CFA, -14)
          CFI (cfiCond20) R10L Frame(CFA, -12)
          CFI (cfiCond20) R10H Frame(CFA, -10)
          CFI (cfiCond20) R11L Frame(CFA, -8)
          CFI (cfiCond20) R11H Frame(CFA, -6)
          CFI (cfiCond20) CFA SP+32
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function DCO_PLLConfig
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond21) R6L Frame(CFA, -28)
          CFI (cfiCond21) R6H Frame(CFA, -26)
          CFI (cfiCond21) R7L Frame(CFA, -24)
          CFI (cfiCond21) R7H Frame(CFA, -22)
          CFI (cfiCond21) R8L Frame(CFA, -20)
          CFI (cfiCond21) R8H Frame(CFA, -18)
          CFI (cfiCond21) R9L Frame(CFA, -16)
          CFI (cfiCond21) R9H Frame(CFA, -14)
          CFI (cfiCond21) R10L Frame(CFA, -12)
          CFI (cfiCond21) R10H Frame(CFA, -10)
          CFI (cfiCond21) R11L Frame(CFA, -8)
          CFI (cfiCond21) R11H Frame(CFA, -6)
          CFI (cfiCond21) CFA SP+32
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV.B   #0x8f, R14
        AND.B   &0x162, R14
        RETA
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
??ref_div_value:
        DC16 1, 2, 4, 8, 12, 16
//  164 /*************************************************************************
//  165 *  º¯ÊýÃû³Æ£ºCLOCK_MCLK_Config  (CLK_Source mclk , CLK_DIVx mclk_div)
//  166 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÖ÷Ê±ÖÓÔ´¼°·ÖÆµ
//  167 *  ²ÎÊýËµÃ÷£ºCLK_Source mclk   :Ö÷Ê±ÖÓÊ±ÖÓÔ´
//  168              CLK_DIVx mclk_div :Ö÷Ê±ÖÓ·ÖÆµÏµÊý
//  169 *  º¯Êý·µ»Ø£ºÎÞ
//  170 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_MCLK_Config  (DCO , DIV_1);   //Ö÷Ê±ÖÓÊ¹ÓÃDCO×÷ÎªÊ±ÖÓÔ´£¬·ÖÆµÏµÊýÎª1£¨²»·ÖÆµ£©
//  171 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine5:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function CLOCK_SMCLK_Config
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond24) R10L Frame(CFA, -8)
          CFI (cfiCond24) R10H Frame(CFA, -6)
          CFI (cfiCond24) CFA SP+12
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function CLOCK_MCLK_Config
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond25) R10L Frame(CFA, -8)
          CFI (cfiCond25) R10H Frame(CFA, -6)
          CFI (cfiCond25) CFA SP+12
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        CALLA   #_Cast32uto32f
        MOV.W   #0x2400, R14
        MOV.W   #0x4974, R15
        BRA     #_Div32f
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine4:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function CLOCK_SMCLK_Config
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond28) R10L Frame(CFA, -8)
          CFI (cfiCond28) R10H Frame(CFA, -6)
          CFI (cfiCond28) CFA SP+12
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function CLOCK_MCLK_Config
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond29) R10L Frame(CFA, -8)
          CFI (cfiCond29) R10H Frame(CFA, -6)
          CFI (cfiCond29) CFA SP+12
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        CALLA   #?ShiftRight32u
        MOVA    #g_sClock, R10
        RETA
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine2:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function CLOCK_SMCLK_Config
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond32) R10L Frame(CFA, -8)
          CFI (cfiCond32) R10H Frame(CFA, -6)
          CFI (cfiCond32) CFA SP+12
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function CLOCK_MCLK_Config
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond33) R10L Frame(CFA, -8)
          CFI (cfiCond33) R10H Frame(CFA, -6)
          CFI (cfiCond33) CFA SP+12
          CFI Block cfiPicker34 Using cfiCommon1
          CFI (cfiPicker34) NoFunction
          CFI (cfiPicker34) Picker
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        BRA     #?DivMod32u
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiPicker34

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  172 void CLOCK_MCLK_Config  (CLK_Source mclk , CLK_DIVx mclk_div)
CLOCK_MCLK_Config:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function CLOCK_MCLK_Config
//  173 {
        FUNCALL CLOCK_MCLK_Config, XT2_Config
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_MCLK_Config, XT1_Config
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_MCLK_Config, _Cast32uto32f
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_MCLK_Config, _Div32f
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        CALLA   #?Subroutine0
//  174   if(mclk == XT2)
//  175   {
//  176     XT2_Config(TRUE);
//  177   }
//  178   else if(mclk == XT1)
//  179   {
//  180     XT1_Config(TRUE);
//  181   }
//  182   
//  183   UCS->SELM = mclk;                         //Ñ¡ÔñDCO×÷ÎªÊ±ÖÓÔ´
??CrossCallReturnLabel_0:
        CALLA   #?Subroutine9
//  184   UCS->DIVM = mclk_div;
??CrossCallReturnLabel_27:
        CALLA   #?Subroutine12
??CrossCallReturnLabel_33:
        CALLA   #?Subroutine10
//  185   
//  186   switch(mclk)
??CrossCallReturnLabel_29:
        JEQ     ??CLOCK_MCLK_Config_2
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_MCLK_Config_3
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_MCLK_Config_2
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_MCLK_Config_4
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_MCLK_Config_4
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_MCLK_Config_5
        JMP     ??CLOCK_MCLK_Config_6
//  187   {
//  188   case XT1    :g_sClock.MCLK.CLK_HZ = EXTAL_IN_XT1_Hz;break;
//  189   case VLO    :g_sClock.MCLK.CLK_HZ = VLOCLK_FREQUENCY;break;
??CLOCK_MCLK_Config_3:
        MOV.W   #0x2710, R12
        JMP     ??CLOCK_MCLK_Config_7
//  190   case REFO   :g_sClock.MCLK.CLK_HZ = REFOCLK_FREQUENCY;break;       
??CLOCK_MCLK_Config_2:
        MOV.W   #0x8000, R12
??CLOCK_MCLK_Config_7:
        MOV.W   #0x0, R13
        JMP     ??CLOCK_MCLK_Config_8
//  191   case DCO    :g_sClock.MCLK.CLK_HZ = g_sClock.DCO_FLL_Frequency;break;    
//  192   case DCO_DIV:g_sClock.MCLK.CLK_HZ = g_sClock.DCO_FLL_Frequency;break;
??CLOCK_MCLK_Config_4:
        CALLA   #?Subroutine1
??CrossCallReturnLabel_4:
        JMP     ??CLOCK_MCLK_Config_8
//  193   case XT2    :g_sClock.MCLK.CLK_HZ = EXTAL_IN_XT2_Hz;break;
??CLOCK_MCLK_Config_5:
        CALLA   #?Subroutine3
//  194   default :return;
//  195   }
//  196   g_sClock.MCLK.CLK_HZ  >>= mclk_div;
??CLOCK_MCLK_Config_8:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_12:
        MOV.W   R12, 0(R10)
        MOV.W   R13, 0x2(R10)
//  197   g_sClock.MCLK.CLK_KHZ = g_sClock.MCLK.CLK_HZ/1000u;
        CALLA   #?Subroutine2
??CrossCallReturnLabel_8:
        MOV.W   R12, 0x4(R10)
        MOV.W   R13, 0x6(R10)
//  198   g_sClock.MCLK.CLK_MHZ = g_sClock.MCLK.CLK_HZ/1000000.0;
        MOV.W   @R10, R12
        MOV.W   0x2(R10), R13
        CALLA   #?Subroutine5
??CrossCallReturnLabel_15:
        MOV.W   R12, 0x8(R10)
        MOV.W   R13, 0xa(R10)
//  199 }
??CLOCK_MCLK_Config_6:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock35

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine10:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function CLOCK_MCLK_Config
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond37) R10L Frame(CFA, -8)
          CFI (cfiCond37) R10H Frame(CFA, -6)
          CFI (cfiCond37) CFA SP+12
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        AND.B   &0x16a, R10
        BIS.B   R13, R10
        MOV.B   R10, &0x16a
        SUB.B   #0x0, R15
        RETA
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine9:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function CLOCK_MCLK_Config
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond40) R10L Frame(CFA, -8)
          CFI (cfiCond40) R10H Frame(CFA, -6)
          CFI (cfiCond40) CFA SP+12
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        AND.B   &0x168, R10
        BIS.B   R13, R10
        MOV.B   R10, &0x168
        MOV.B   R14, R13
        RETA
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41

        RSEG CODE:CODE:NOROOT(1)
?Subroutine0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function CLOCK_MCLK_Config
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond43) R10L Frame(CFA, -8)
          CFI (cfiCond43) R10H Frame(CFA, -6)
          CFI (cfiCond43) CFA SP+12
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        CALLA   #?Subroutine11
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44
??CrossCallReturnLabel_31:
        REQUIRE ?Subroutine12
        // Fall through to label ?Subroutine12

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine12:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function CLOCK_MCLK_Config
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond46) R10L Frame(CFA, -8)
          CFI (cfiCond46) R10H Frame(CFA, -6)
          CFI (cfiCond46) CFA SP+12
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function CLOCK_ACLK_Config
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond47) R10L Frame(CFA, -8)
          CFI (cfiCond47) R10H Frame(CFA, -6)
          CFI (cfiCond47) CFA SP+12
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function CLOCK_MCLK_Config
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond48) R10L Frame(CFA, -8)
          CFI (cfiCond48) R10H Frame(CFA, -6)
          CFI (cfiCond48) CFA SP+12
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        AND.B   #0x7, R13
        MOV.B   #0xf8, R10
        RETA
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine11:
          CFI Block cfiCond50 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function CLOCK_ACLK_Config
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_1
          CFI (cfiCond51) R10L Frame(CFA, -8)
          CFI (cfiCond51) R10H Frame(CFA, -6)
          CFI (cfiCond51) CFA SP+16
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function CLOCK_MCLK_Config
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_0
          CFI (cfiCond52) R10L Frame(CFA, -8)
          CFI (cfiCond52) R10H Frame(CFA, -6)
          CFI (cfiCond52) CFA SP+16
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        MOV.B   R12, R15
        MOV.B   R13, R14
        CMP.B   #0x5, R12
        JNE     ??CLOCK_SMCLK_Config_0
        MOV.B   #0x1, R12
        CALLA   #XT2_Config
        JMP     ??CLOCK_SMCLK_Config_1
??CLOCK_SMCLK_Config_0:
        CMP.B   #0x0, R12
        JNE     ??CLOCK_SMCLK_Config_1
        MOV.B   #0x1, R12
        CALLA   #XT1_Config
??CLOCK_SMCLK_Config_1:
        MOV.B   R15, R13
        RETA
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53
//  200 /*************************************************************************
//  201 *  º¯ÊýÃû³Æ£ºCLOCK_SMCLK_Config (CLK_Source smclk, CLK_DIVx smclk_div)
//  202 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÏµÍ³Ê±ÖÓÔ´¼°·ÖÆµ
//  203 *  ²ÎÊýËµÃ÷£ºCLK_Source smclk   :ÏµÍ³Ê±ÖÓÊ±ÖÓÔ´
//  204              CLK_DIVx smclk_div :ÏµÍ³Ê±ÖÓ·ÖÆµÏµÊý
//  205 *  º¯Êý·µ»Ø£ºÎÞ
//  206 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_SMCLK_Config  (DCO , DIV_2);   //ÏµÍ³Ê±ÖÓÊ¹ÓÃDCO×÷ÎªÊ±ÖÓÔ´£¬·ÖÆµÏµÊýÎª2£¨¶þ·ÖÆµ£©
//  207 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  208 void CLOCK_SMCLK_Config (CLK_Source smclk, CLK_DIVx smclk_div)
CLOCK_SMCLK_Config:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
//  209 {
        FUNCALL CLOCK_SMCLK_Config, XT2_Config
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_SMCLK_Config, XT1_Config
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_SMCLK_Config, _Cast32uto32f
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_SMCLK_Config, _Div32f
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        CALLA   #?Subroutine11
//  210   if(smclk == XT2)
//  211   {
//  212     XT2_Config(TRUE);
//  213   }
//  214   else if(smclk == XT1)
//  215   {
//  216     XT1_Config(TRUE);
//  217   }
//  218   
//  219   UCS->SELS = smclk;//Ñ¡ÔñsmclkÊ±ÖÓÔ´
??CrossCallReturnLabel_30:
        CALLA   #?Subroutine8
??CrossCallReturnLabel_24:
        CALLA   #?Subroutine9
//  220   UCS->DIVS = smclk_div;
??CrossCallReturnLabel_26:
        CALLA   #?Subroutine8
??CrossCallReturnLabel_25:
        CALLA   #?Subroutine10
//  221   
//  222   switch(smclk)
??CrossCallReturnLabel_28:
        JEQ     ??CLOCK_SMCLK_Config_2
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_SMCLK_Config_3
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_SMCLK_Config_2
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_SMCLK_Config_4
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_SMCLK_Config_4
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_SMCLK_Config_5
        JMP     ??CLOCK_SMCLK_Config_6
//  223   {
//  224   case XT1    :g_sClock.SMCLK.CLK_HZ = EXTAL_IN_XT1_Hz;break;
//  225   case VLO    :g_sClock.SMCLK.CLK_HZ = VLOCLK_FREQUENCY;break;
??CLOCK_SMCLK_Config_3:
        MOV.W   #0x2710, R12
        JMP     ??CLOCK_SMCLK_Config_7
//  226   case REFO   :g_sClock.SMCLK.CLK_HZ = REFOCLK_FREQUENCY;break;       
??CLOCK_SMCLK_Config_2:
        MOV.W   #0x8000, R12
??CLOCK_SMCLK_Config_7:
        MOV.W   #0x0, R13
        JMP     ??CLOCK_SMCLK_Config_8
//  227   case DCO    :g_sClock.SMCLK.CLK_HZ = g_sClock.DCO_FLL_Frequency;break; 
//  228   case DCO_DIV:g_sClock.SMCLK.CLK_HZ = g_sClock.DCO_FLL_Frequency;break;
??CLOCK_SMCLK_Config_4:
        CALLA   #?Subroutine1
??CrossCallReturnLabel_3:
        JMP     ??CLOCK_SMCLK_Config_8
//  229   case XT2    :g_sClock.SMCLK.CLK_HZ = EXTAL_IN_XT2_Hz;break;
??CLOCK_SMCLK_Config_5:
        CALLA   #?Subroutine3
//  230   default :return;
//  231   }
//  232   g_sClock.SMCLK.CLK_HZ >>= smclk_div;
??CLOCK_SMCLK_Config_8:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_11:
        MOV.W   R12, 0xc(R10)
        MOV.W   R13, 0xe(R10)
//  233   g_sClock.SMCLK.CLK_KHZ = g_sClock.SMCLK.CLK_HZ/1000u;;
        CALLA   #?Subroutine2
??CrossCallReturnLabel_7:
        MOV.W   R12, 0x10(R10)
        MOV.W   R13, 0x12(R10)
//  234   g_sClock.SMCLK.CLK_MHZ = g_sClock.SMCLK.CLK_HZ/1000000.0;
        MOV.W   0xc(R10), R12
        MOV.W   0xe(R10), R13
        CALLA   #?Subroutine5
??CrossCallReturnLabel_14:
        MOV.W   R12, 0x14(R10)
        MOV.W   R13, 0x16(R10)
//  235 }
??CLOCK_SMCLK_Config_6:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock54

        RSEG CODE:CODE:REORDER:NOROOT(1)
?Subroutine8:
          CFI Block cfiCond55 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+12
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function CLOCK_SMCLK_Config
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond56) R10L Frame(CFA, -8)
          CFI (cfiCond56) R10H Frame(CFA, -6)
          CFI (cfiCond56) CFA SP+12
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        RPT     #0x4
        RLAX.B  R13
        AND.B   #0x70, R13
        MOV.B   #0x8f, R10
        RETA
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57
//  236 /*************************************************************************
//  237 *  º¯ÊýÃû³Æ£ºCLOCK_ACLK_Config  (CLK_Source aclk , CLK_DIVx aclk_div)
//  238 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃ¸¨ÖúÊ±ÖÓÔ´¼°·ÖÆµ
//  239 *  ²ÎÊýËµÃ÷£ºCLK_Source aclk   :¸¨ÖúÊ±ÖÓÊ±ÖÓÔ´
//  240              CLK_DIVx aclk_div :¸¨ÖúÊ±ÖÓ·ÖÆµÏµÊý
//  241 *  º¯Êý·µ»Ø£ºÎÞ
//  242 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_ACLK_Config  (XT! , DIV_4);   //¸¨ÖúÊ±ÖÓÊ¹ÓÃXT1×÷ÎªÊ±ÖÓÔ´£¬·ÖÆµÏµÊýÎª4£¨ËÄ·ÖÆµ£©
//  243 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  244 void CLOCK_ACLK_Config  (CLK_Source aclk , CLK_DIVx aclk_div)
CLOCK_ACLK_Config:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
//  245 {
        FUNCALL CLOCK_ACLK_Config, XT2_Config
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_ACLK_Config, XT1_Config
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_ACLK_Config, _Cast32uto32f
        LOCFRAME CSTACK, 8, STACK
        FUNCALL CLOCK_ACLK_Config, _Div32f
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        CALLA   #?Subroutine0
//  246    if(aclk == XT2)
//  247   {
//  248     XT2_Config(TRUE);
//  249   }
//  250   else if(aclk == XT1)
//  251   {
//  252     XT1_Config(TRUE);
//  253   }
//  254   
//  255   UCS->SELA = aclk;//Ñ¡ÔñÊ±ÖÓÔ´                   
??CrossCallReturnLabel_1:
        AND.B   &0x169, R10
        BIS.B   R13, R10
        MOV.B   R10, &0x169
//  256   UCS->DIVA = aclk_div; //ÉèÖÃ·ÖÆµÏµÊýÎª0
        MOV.B   R14, R13
        CALLA   #?Subroutine12
??CrossCallReturnLabel_32:
        AND.B   &0x16b, R10
        BIS.B   R13, R10
        MOV.B   R10, &0x16b
//  257   
//  258   switch(aclk)
        SUB.B   #0x0, R15
        JEQ     ??CLOCK_ACLK_Config_2
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_ACLK_Config_3
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_ACLK_Config_2
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_ACLK_Config_4
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_ACLK_Config_4
        SUB.B   #0x1, R15
        JEQ     ??CLOCK_ACLK_Config_5
        JMP     ??CLOCK_ACLK_Config_6
//  259   {
//  260   case XT1    :g_sClock.ACLK.CLK_HZ = EXTAL_IN_XT1_Hz;break;
//  261   case VLO    :g_sClock.ACLK.CLK_HZ = VLOCLK_FREQUENCY;break;
??CLOCK_ACLK_Config_3:
        MOV.W   #0x2710, R12
        JMP     ??CLOCK_ACLK_Config_7
//  262   case REFO   :g_sClock.ACLK.CLK_HZ = REFOCLK_FREQUENCY;break;       
??CLOCK_ACLK_Config_2:
        MOV.W   #0x8000, R12
??CLOCK_ACLK_Config_7:
        MOV.W   #0x0, R13
        JMP     ??CLOCK_ACLK_Config_8
//  263   case DCO    :g_sClock.ACLK.CLK_HZ = g_sClock.DCO_FLL_Frequency;break;   
//  264   case DCO_DIV:g_sClock.ACLK.CLK_HZ = g_sClock.DCO_FLL_Frequency;break;
??CLOCK_ACLK_Config_4:
        CALLA   #?Subroutine1
??CrossCallReturnLabel_2:
        JMP     ??CLOCK_ACLK_Config_8
//  265   case XT2    :g_sClock.ACLK.CLK_HZ = EXTAL_IN_XT2_Hz;break;
??CLOCK_ACLK_Config_5:
        CALLA   #?Subroutine3
//  266   default :return;
//  267   }
//  268   g_sClock.ACLK.CLK_HZ >>= aclk_div;
??CLOCK_ACLK_Config_8:
        CALLA   #?Subroutine4
??CrossCallReturnLabel_10:
        MOV.W   R12, 0x18(R10)
        MOV.W   R13, 0x1a(R10)
//  269   g_sClock.ACLK.CLK_KHZ = g_sClock.ACLK.CLK_HZ/1000u;;
        CALLA   #?Subroutine2
??CrossCallReturnLabel_6:
        MOV.W   R12, 0x1c(R10)
        MOV.W   R13, 0x1e(R10)
//  270   g_sClock.ACLK.CLK_MHZ = g_sClock.ACLK.CLK_HZ/1000000.0;
        MOV.W   0x18(R10), R12
        MOV.W   0x1a(R10), R13
        CALLA   #?Subroutine5
??CrossCallReturnLabel_13:
        MOV.W   R12, 0x20(R10)
        MOV.W   R13, 0x22(R10)
//  271 }
??CLOCK_ACLK_Config_6:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock58
//  272 /*******************************************************************************
//  273 º¯Êý¹¦ÄÜ£ºÉèÖÃÄÚºËµçÑ¹Öµ£¨ÓëÆµÂÊÉèÖÃÓÐ¹Ø£©
//  274 º¯Êý²ÎÊý£ºu8 level £ºµçÑ¹½×ÌÝ Ð¡ÓÚ3
//  275 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  276 void SetVcoreUp (uint8_t level)
SetVcoreUp:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function SetVcoreUp
//  277 {
//  278 #if 1  //·ÂÕæÊ±ÐÞ¸ÄÎª0£¬·ñÔò»á¿¨ÔÚËÀÑ­»·Àï
//  279   // Open PMM registers for write
//  280   PMMCTL0_H = PMMPW_H;              
        MOV.B   #0xa5, &0x121
//  281   // Set SVS/SVM high side new level
//  282   SVSMHCTL = SVSHE + SVSHRVL0 * level + SVMHE + SVSMHRRL0 * level;
        MOV.B   R12, R15
        MOV.W   R15, R14
        SWPB    R14
        ADD.W   R15, R14
        ADD.W   #0x4400, R14
        MOV.W   R14, &0x124
//  283   // Set SVM low side to new level
//  284   SVSMLCTL = SVSLE + SVMLE + SVSMLRRL0 * level;
        ADD.W   #0x4400, R15
        MOV.W   R15, &0x126
//  285   // Wait till SVM is settled
//  286   uint16_t i=50000; 
        MOV.W   #0xc350, R13
//  287   while (((PMMIFG & SVSMLDLYIFG) == 0)&&((i--)>0));
??SetVcoreUp_0:
        BIT.W   #0x1, &0x12c
        JC      ??SetVcoreUp_2
        MOV.W   R13, R15
        ADD.W   #0xffff, R13
        CMP.W   #0x0, R15
        JNE     ??SetVcoreUp_0
//  288   // Clear already set flags
//  289   PMMIFG &= ~(SVMLVLRIFG + SVMLIFG);
??SetVcoreUp_2:
        AND.W   #0xfff9, &0x12c
//  290   // Set VCore to new level
//  291   PMMCTL0_L = PMMCOREV0 * level;
        MOV.B   R12, &0x120
//  292   // Wait till new level reached
//  293   i =50000;
        MOV.W   #0xc350, R13
//  294   if ((PMMIFG & SVMLIFG))
        BIT.W   #0x2, &0x12c
        JNC     ??SetVcoreUp_3
//  295     while(((PMMIFG & SVMLVLRIFG) == 0)&&((i--)>0));
??SetVcoreUp_1:
        BIT.W   #0x4, &0x12c
        JC      ??SetVcoreUp_3
        MOV.W   R13, R15
        ADD.W   #0xffff, R13
        CMP.W   #0x0, R15
        JNE     ??SetVcoreUp_1
//  296   /*
//  297   if ((PMMIFG & SVMLIFG))
//  298     while ((PMMIFG & SVMLVLRIFG) == 0);
//  299   */
//  300   // Set SVS/SVM low side to new level
//  301   SVSMLCTL = SVSLE + SVSLRVL0 * level + SVMLE + SVSMLRRL0 * level;
??SetVcoreUp_3:
        MOV.W   R14, &0x126
//  302   // Lock PMM registers for write access
//  303   PMMCTL0_H = 0x00;
        MOV.B   #0x0, &0x121
//  304 #endif
//  305 }
        RETA
          CFI EndBlock cfiBlock59
        REQUIRE _A_PMMCTL0_L
        REQUIRE _A_SVSMHCTL_L
        REQUIRE _A_SVSMLCTL_L
        REQUIRE _A_PMMIFG_L

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 1 330 bytes in segment CODE
//    14 bytes in segment DATA16_AN
//    16 bytes in segment DATA20_C
//    40 bytes in segment DATA20_N
// 
// 1 330 bytes of CODE  memory
//    16 bytes of CONST memory
//    40 bytes of DATA  memory (+ 14 bytes shared)
//
//Errors: none
//Warnings: none
