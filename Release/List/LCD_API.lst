###############################################################################
#                                                                             #
#                                                       06/Jun/2016  16:42:18 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  large                                                   #
#    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LCD_API\LCD_API.c                       #
#    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LCD_API\LCD_API.c -D NDEBUG -D          #
#                     RAM_VECTOR -lC C:\Users\615\Desktop\MSP430\MSP430F5529¿ #
#                     âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\List\ -lA                 #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\             #
#                     -D__MSP430F5529__ -e --double=32 --dlib_config          #
#                     "D:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Ê #
#                     ý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MSP4 #
#                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                   #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                     #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\12864\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\oled\ -I      #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\inc\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\src\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\src\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LCD_API\ -I                             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\2.2TFT\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\delay\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\System\inc\ -I C:\Users\615\Desktop\MSP430\MSP43 #
#                     0F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\src\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\User\ -I C:\Users\615\Desktop\MSP430\MSP430F5529 #
#                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\USER\ -I                    #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\uCOSII\App\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\    #
#                     -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ #
#                     \¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CORE\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP430 #
#                     F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\           #
#                     --core=430X --data_model=large -Oh --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\LCD_API.lst                         #
#    Object file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\Obj\LCD_API.r43                          #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LCD_API\LCD_API.c
      1          #include "LCD_API.h"
      2          #include "LCD_FONT.h"

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const asc2_1206[95][12]
   \                     asc2_1206:
   \   000000   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0
   \            000000000000
   \            000004040404
   \            0404000400  
   \   000017   0000140A0A00 DC8 0, 0, 20, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 63, 20, 10
   \            000000000000
   \            00000014143F
   \            140A        
   \   00002B   3F0A0A000000 DC8 63, 10, 10, 0, 0, 0, 4, 30, 21, 5, 6, 12, 20, 21, 15, 4, 0, 0, 0
   \            041E1505060C
   \            14150F040000
   \            00          
   \   00003E   12150D0A142C DC8 18, 21, 13, 10, 20, 44, 42, 18, 0, 0, 0, 0, 4, 10, 10, 30, 21, 21
   \            2A1200000000
   \            040A0A1E1515
   \   000050   093600000002 DC8 9, 54, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 8, 8, 8
   \            020100000000
   \            000000000020
   \            10080808    
   \   000066   080808102000 DC8 8, 8, 8, 16, 32, 0, 0, 2, 4, 8, 8, 8, 8, 8, 8, 4, 2, 0, 0, 0, 0, 4
   \            000204080808
   \            080808040200
   \            00000004    
   \   00007C   150E0E150400 DC8 21, 14, 14, 21, 4, 0, 0, 0, 0, 0, 4, 4, 4, 31, 4, 4, 4, 0, 0, 0, 0
   \            000000000404
   \            041F04040400
   \            000000      
   \   000091   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0
   \            000002020100
   \            000000001F00
   \            00000000    
   \   0000A7   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 8, 8, 8, 4, 4, 2, 2
   \            000000000200
   \            000010080808
   \            04040202    
   \   0000BD   02010000000E DC8 2, 1, 0, 0, 0, 14, 17, 17, 17, 17, 17, 17, 14, 0, 0, 0, 0, 4, 6, 4
   \            111111111111
   \            0E0000000004
   \            0604        
   \   0000D1   040404040E00 DC8 4, 4, 4, 4, 14, 0, 0, 0, 0, 14, 17, 17, 8, 4, 2, 1, 31, 0, 0, 0, 0
   \            0000000E1111
   \            080402011F00
   \            000000      
   \   0000E6   0E11100C1010 DC8 14, 17, 16, 12, 16, 16, 17, 14, 0, 0, 0, 0, 8, 12, 10, 10, 9, 30, 8
   \            110E00000000
   \            080C0A0A091E
   \            08          
   \   0000F9   18000000001F DC8 24, 0, 0, 0, 0, 31, 1, 1, 15, 16, 16, 17, 14, 0, 0, 0, 0, 14, 9, 1
   \            01010F101011
   \            0E000000000E
   \            0901        
   \   00010D   0F1111110E00 DC8 15, 17, 17, 17, 14, 0, 0, 0, 0, 31, 9, 8, 4, 4, 4, 4, 4, 0, 0, 0, 0
   \            0000001F0908
   \            040404040400
   \            000000      
   \   000122   0E11110E1111 DC8 14, 17, 17, 14, 17, 17, 17, 14, 0, 0, 0, 0, 14, 17, 17, 17, 30, 16
   \            110E00000000
   \            0E1111111E10
   \   000134   120E00000000 DC8 18, 14, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4
   \            000004000000
   \            000400000000
   \            00000004    
   \   00014A   000000040400 DC8 0, 0, 0, 4, 4, 0, 0, 32, 16, 8, 4, 2, 4, 8, 16, 32, 0, 0, 0, 0, 0
   \            002010080402
   \            040810200000
   \            000000      
   \   00015F   001F00001F00 DC8 0, 31, 0, 0, 31, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 16, 8, 4, 2, 0, 0
   \            000000000204
   \            081020100804
   \            020000      
   \   000174   00000E111108 DC8 0, 0, 14, 17, 17, 8, 4, 4, 0, 4, 0, 0, 0, 0, 14, 17, 25, 21, 21, 29
   \            040400040000
   \            00000E111915
   \            151D        
   \   000188   011E00000000 DC8 1, 30, 0, 0, 0, 0, 4, 4, 12, 10, 10, 30, 18, 51, 0, 0, 0, 0, 15, 18
   \            04040C0A0A1E
   \            123300000000
   \            0F12        
   \   00019C   120E1212120F DC8 18, 14, 18, 18, 18, 15, 0, 0, 0, 0, 30, 17, 1, 1, 1, 1, 17, 14, 0
   \            000000001E11
   \            01010101110E
   \            00          
   \   0001AF   0000000F1212 DC8 0, 0, 0, 15, 18, 18, 18, 18, 18, 18, 15, 0, 0, 0, 0, 31, 18, 10, 14
   \            121212120F00
   \            0000001F120A
   \            0E          
   \   0001C2   0A02121F0000 DC8 10, 2, 18, 31, 0, 0, 0, 0, 31, 18, 10, 14, 10, 2, 2, 7, 0, 0, 0, 0
   \            00001F120A0E
   \            0A0202070000
   \            0000        
   \   0001D6   1C1201013911 DC8 28, 18, 1, 1, 57, 17, 18, 12, 0, 0, 0, 0, 51, 18, 18, 30, 18, 18
   \            120C00000000
   \            3312121E1212
   \   0001E8   123300000000 DC8 18, 51, 0, 0, 0, 0, 31, 4, 4, 4, 4, 4, 4, 31, 0, 0, 0, 0, 62, 8, 8
   \            1F0404040404
   \            041F00000000
   \            3E0808      
   \   0001FD   080808080907 DC8 8, 8, 8, 8, 9, 7, 0, 0, 0, 55, 18, 10, 6, 10, 10, 18, 55, 0, 0, 0
   \            00000037120A
   \            060A0A123700
   \            0000        
   \   000211   000702020202 DC8 0, 7, 2, 2, 2, 2, 2, 34, 63, 0, 0, 0, 0, 27, 27, 27, 27, 21, 21, 21
   \            02223F000000
   \            001B1B1B1B15
   \            1515        
   \   000225   15000000003B DC8 21, 0, 0, 0, 0, 59, 18, 22, 22, 26, 26, 18, 23, 0, 0, 0, 0, 14, 17
   \            1216161A1A12
   \            17000000000E
   \            11          
   \   000238   11111111110E DC8 17, 17, 17, 17, 17, 14, 0, 0, 0, 0, 15, 18, 18, 14, 2, 2, 2, 7, 0
   \            000000000F12
   \            120E02020207
   \            00          
   \   00024B   0000000E1111 DC8 0, 0, 0, 14, 17, 17, 17, 17, 23, 25, 14, 24, 0, 0, 0, 15, 18, 18
   \            111117190E18
   \            0000000F1212
   \   00025D   0E0A12123700 DC8 14, 10, 18, 18, 55, 0, 0, 0, 0, 30, 17, 1, 6, 8, 16, 17, 15, 0, 0
   \            0000001E1101
   \            060810110F00
   \            00          
   \   000270   00001F150404 DC8 0, 0, 31, 21, 4, 4, 4, 4, 4, 14, 0, 0, 0, 0, 51, 18, 18, 18, 18, 18
   \            0404040E0000
   \            000033121212
   \            1212        
   \   000284   120C00000000 DC8 18, 12, 0, 0, 0, 0, 51, 18, 18, 10, 10, 12, 4, 4, 0, 0, 0, 0, 21
   \            3312120A0A0C
   \            040400000000
   \            15          
   \   000297   15150E0A0A0A DC8 21, 21, 14, 10, 10, 10, 10, 0, 0, 0, 0, 27, 10, 10, 4, 4, 10, 10
   \            0A000000001B
   \            0A0A04040A0A
   \   0002A9   1B000000001B DC8 27, 0, 0, 0, 0, 27, 10, 10, 4, 4, 4, 4, 14, 0, 0, 0, 0, 31, 9, 8, 4
   \            0A0A04040404
   \            0E000000001F
   \            090804      
   \   0002BE   0402121F0000 DC8 4, 2, 18, 31, 0, 0, 0, 28, 4, 4, 4, 4, 4, 4, 4, 4, 28, 0, 0, 2, 2
   \            001C04040404
   \            040404041C00
   \            000202      
   \   0002D3   020404080808 DC8 2, 4, 4, 8, 8, 8, 16, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 14, 0, 0
   \            100000000E08
   \            080808080808
   \            080E0000    
   \   0002E9   040A00000000 DC8 4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            00000000    
   \   0002FF   3F0004000000 DC8 63, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 18, 28
   \            000000000000
   \            000000000000
   \            0C121C      
   \   000314   123C00000000 DC8 18, 60, 0, 0, 0, 0, 3, 2, 2, 14, 18, 18, 18, 14, 0, 0, 0, 0, 0, 0
   \            0302020E1212
   \            120E00000000
   \            0000        
   \   000328   001C1202021C DC8 0, 28, 18, 2, 2, 28, 0, 0, 0, 0, 24, 16, 16, 28, 18, 18, 18, 60, 0
   \            000000001810
   \            101C1212123C
   \            00          
   \   00033B   000000000000 DC8 0, 0, 0, 0, 0, 0, 12, 18, 30, 2, 28, 0, 0, 0, 0, 56, 4, 4, 30, 4, 4
   \            0C121E021C00
   \            000000380404
   \            1E0404      
   \   000350   041E00000000 DC8 4, 30, 0, 0, 0, 0, 0, 0, 0, 60, 18, 12, 2, 30, 34, 28, 0, 0, 3, 2
   \            0000003C120C
   \            021E221C0000
   \            0302        
   \   000364   020E12121237 DC8 2, 14, 18, 18, 18, 55, 0, 0, 0, 0, 4, 0, 0, 6, 4, 4, 4, 14, 0, 0, 0
   \            000000000400
   \            00060404040E
   \            000000      
   \   000379   000800000C08 DC8 0, 8, 0, 0, 12, 8, 8, 8, 8, 8, 7, 0, 0, 3, 2, 2, 58, 10, 14, 18, 55
   \            080808080700
   \            000302023A0A
   \            0E1237      
   \   00038E   000000000704 DC8 0, 0, 0, 0, 7, 4, 4, 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 15, 21
   \            04040404041F
   \            000000000000
   \            000F15      
   \   0003A3   151515000000 DC8 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 15, 18, 18, 18, 55, 0, 0, 0, 0, 0
   \            000000000F12
   \            121237000000
   \            0000        
   \   0003B7   00000C121212 DC8 0, 0, 12, 18, 18, 18, 12, 0, 0, 0, 0, 0, 0, 0, 15, 18, 18, 18, 14
   \            0C0000000000
   \            00000F121212
   \            0E          
   \   0003CA   020700000000 DC8 2, 7, 0, 0, 0, 0, 0, 28, 18, 18, 18, 28, 16, 56, 0, 0, 0, 0, 0, 27
   \            001C1212121C
   \            103800000000
   \            001B        
   \   0003DE   060202070000 DC8 6, 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 30, 2, 12, 16, 30, 0, 0, 0, 0, 0
   \            00000000001E
   \            020C101E0000
   \            000000      
   \   0003F3   04040E040404 DC8 4, 4, 14, 4, 4, 4, 24, 0, 0, 0, 0, 0, 0, 0, 27, 18, 18, 18, 60, 0
   \            180000000000
   \            00001B121212
   \            3C00        
   \   000407   000000000000 DC8 0, 0, 0, 0, 0, 0, 55, 18, 10, 12, 4, 0, 0, 0, 0, 0, 0, 0, 21, 21
   \            37120A0C0400
   \            000000000000
   \            1515        
   \   00041B   0E0A0A000000 DC8 14, 10, 10, 0, 0, 0, 0, 0, 0, 0, 27, 10, 4, 10, 27, 0, 0, 0, 0, 0
   \            000000001B0A
   \            040A1B000000
   \            0000        
   \   00042F   000037120A0C DC8 0, 0, 55, 18, 10, 12, 4, 4, 3, 0, 0, 0, 0, 0, 30, 8, 4, 4, 30, 0, 0
   \            040403000000
   \            00001E080404
   \            1E0000      
   \   000444   001808080804 DC8 0, 24, 8, 8, 8, 4, 8, 8, 8, 8, 24, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
   \            080808081800
   \            080808080808
   \            08080808    
   \   00045A   080800060404 DC8 8, 8, 0, 6, 4, 4, 4, 8, 4, 4, 4, 4, 6, 0, 2, 37, 24, 0, 0, 0, 0, 0
   \            040804040404
   \            060002251800
   \            00000000    
   \   000470   00000000     DC8 0, 0, 0, 0

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const asc2_1608[95][16]
   \                     asc2_1608:
   \   000000   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8
   \            000000000000
   \            000000000000
   \            0008080808  
   \   000017   080808000018 DC8 8, 8, 8, 0, 0, 24, 24, 0, 0, 0, 72, 108, 36, 18, 0, 0, 0, 0, 0, 0
   \            18000000486C
   \            241200000000
   \            0000        
   \   00002B   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 127, 18, 18, 18, 127, 18, 18
   \            00002424247F
   \            1212127F1212
   \   00003D   120000000008 DC8 18, 0, 0, 0, 0, 8, 28, 42, 42, 10, 12, 24, 40, 40, 42, 42, 28, 8, 8
   \            1C2A2A0A0C18
   \            28282A2A1C08
   \            08          
   \   000050   000000222515 DC8 0, 0, 0, 34, 37, 21, 21, 21, 42, 88, 84, 84, 84, 34, 0, 0, 0, 0, 0
   \            15152A585454
   \            542200000000
   \            00          
   \   000063   0C1212120A76 DC8 12, 18, 18, 18, 10, 118, 37, 41, 17, 145, 110, 0, 0, 0, 6, 6, 4, 3
   \            252911916E00
   \            000006060403
   \   000075   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32, 16, 16, 8, 8, 8, 8, 8
   \            000000000000
   \            402010100808
   \            080808      
   \   00008A   081010204000 DC8 8, 16, 16, 32, 64, 0, 0, 2, 4, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8
   \            000204080810
   \            101010101008
   \            08          
   \   00009D   040200000000 DC8 4, 2, 0, 0, 0, 0, 0, 8, 8, 107, 28, 28, 107, 8, 8, 0, 0, 0, 0, 0, 0
   \            0008086B1C1C
   \            6B0808000000
   \            000000      
   \   0000B2   000008080808 DC8 0, 0, 8, 8, 8, 8, 127, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            7F0808080800
   \            000000000000
   \            00000000    
   \   0000C8   000000000606 DC8 0, 0, 0, 0, 6, 6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0
   \            040300000000
   \            00000000FE00
   \            00000000    
   \   0000DE   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 128, 64
   \            000000000000
   \            000006060000
   \            00008040    
   \   0000F4   402020101008 DC8 64, 32, 32, 16, 16, 8, 8, 4, 4, 2, 2, 0, 0, 0, 0, 24, 36, 66, 66
   \            080404020200
   \            000000182442
   \            42          
   \   000107   424242424224 DC8 66, 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 8, 14, 8, 8, 8, 8, 8, 8
   \            180000000000
   \            080E08080808
   \            0808        
   \   00011B   08083E000000 DC8 8, 8, 62, 0, 0, 0, 0, 0, 60, 66, 66, 66, 32, 32, 16, 8, 4, 66, 126
   \            00003C424242
   \            202010080442
   \            7E          
   \   00012E   00000000003C DC8 0, 0, 0, 0, 0, 60, 66, 66, 32, 24, 32, 64, 64, 66, 34, 28, 0, 0, 0
   \            424220182040
   \            4042221C0000
   \            00          
   \   000141   000020302824 DC8 0, 0, 32, 48, 40, 36, 36, 34, 34, 126, 32, 32, 120, 0, 0, 0, 0, 0
   \            2422227E2020
   \            780000000000
   \   000153   7E0202021A26 DC8 126, 2, 2, 2, 26, 38, 64, 64, 66, 34, 28, 0, 0, 0, 0, 0, 56, 36, 2
   \            404042221C00
   \            000000003824
   \            02          
   \   000166   021A26424242 DC8 2, 26, 38, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 126, 34, 34, 16, 16
   \            241800000000
   \            007E22221010
   \   000178   080808080808 DC8 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 60, 66, 66, 66, 36, 24, 36, 66, 66
   \            00000000003C
   \            424242241824
   \            4242        
   \   00018C   423C00000000 DC8 66, 60, 0, 0, 0, 0, 0, 24, 36, 66, 66, 66, 100, 88, 64, 64, 36, 28
   \            001824424242
   \            64584040241C
   \   00019E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0
   \            000018180000
   \            000018180000
   \            000000      
   \   0001B3   000000000800 DC8 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 8, 4, 0, 0, 0, 64, 32, 16, 8, 4, 2
   \            000000000808
   \            040000004020
   \            10080402    
   \   0001C9   040810204000 DC8 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 0, 0
   \            000000000000
   \            007F0000007F
   \            0000        
   \   0001DD   000000000000 DC8 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2, 0, 0, 0, 0
   \            020408102040
   \            201008040200
   \            000000      
   \   0001F2   003C42424640 DC8 0, 60, 66, 66, 70, 64, 32, 16, 16, 0, 24, 24, 0, 0, 0, 0, 0, 28, 34
   \            201010001818
   \            00000000001C
   \            22          
   \   000205   5A555555552D DC8 90, 85, 85, 85, 85, 45, 66, 34, 28, 0, 0, 0, 0, 0, 8, 8, 24, 20, 20
   \            42221C000000
   \            000008081814
   \            14          
   \   000218   243C224242E7 DC8 36, 60, 34, 66, 66, 231, 0, 0, 0, 0, 0, 31, 34, 34, 34, 30, 34, 66
   \            00000000001F
   \            2222221E2242
   \   00022A   4242221F0000 DC8 66, 66, 34, 31, 0, 0, 0, 0, 0, 124, 66, 66, 1, 1, 1, 1, 1, 66, 34
   \            0000007C4242
   \            010101010142
   \            22          
   \   00023D   1C0000000000 DC8 28, 0, 0, 0, 0, 0, 31, 34, 66, 66, 66, 66, 66, 66, 66, 34, 31, 0, 0
   \            1F2242424242
   \            424242221F00
   \            00          
   \   000250   0000003F4212 DC8 0, 0, 0, 63, 66, 18, 18, 30, 18, 18, 2, 66, 66, 63, 0, 0, 0, 0, 0
   \            121E12120242
   \            423F00000000
   \            00          
   \   000263   3F4212121E12 DC8 63, 66, 18, 18, 30, 18, 18, 2, 2, 2, 7, 0, 0, 0, 0, 0, 60, 34, 34
   \            120202020700
   \            000000003C22
   \            22          
   \   000276   010101712122 DC8 1, 1, 1, 113, 33, 34, 34, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
   \            221C00000000
   \            00E742424242
   \   000288   7E42424242E7 DC8 126, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 62, 8, 8, 8, 8, 8, 8, 8, 8
   \            00000000003E
   \            080808080808
   \            0808        
   \   00029C   083E00000000 DC8 8, 62, 0, 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \            007C10101010
   \            101010101010
   \   0002AE   110F00000077 DC8 17, 15, 0, 0, 0, 119, 34, 18, 10, 14, 10, 18, 18, 34, 34, 119, 0, 0
   \            22120A0E0A12
   \            122222770000
   \   0002C0   000000070202 DC8 0, 0, 0, 7, 2, 2, 2, 2, 2, 2, 2, 2, 66, 127, 0, 0, 0, 0, 0, 119, 54
   \            020202020202
   \            427F00000000
   \            007736      
   \   0002D5   3636362A2A2A DC8 54, 54, 54, 42, 42, 42, 42, 42, 107, 0, 0, 0, 0, 0, 227, 70, 70, 74
   \            2A2A6B000000
   \            0000E346464A
   \   0002E7   4A5252526262 DC8 74, 82, 82, 82, 98, 98, 71, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65
   \            470000000000
   \            1C2241414141
   \   0002F9   414141221C00 DC8 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 63, 66, 66, 66, 66, 62, 2, 2, 2
   \            000000003F42
   \            4242423E0202
   \            02          
   \   00030C   020700000000 DC8 2, 7, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65, 65, 77, 83, 50, 28, 96
   \            001C22414141
   \            41414D53321C
   \            60          
   \   00031F   000000003F42 DC8 0, 0, 0, 0, 63, 66, 66, 66, 62, 18, 18, 34, 34, 66, 199, 0, 0, 0, 0
   \            42423E121222
   \            2242C7000000
   \            00          
   \   000332   007C42420204 DC8 0, 124, 66, 66, 2, 4, 24, 32, 64, 66, 66, 62, 0, 0, 0, 0, 0, 127
   \            18204042423E
   \            00000000007F
   \   000344   490808080808 DC8 73, 8, 8, 8, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
   \            0808081C0000
   \            000000E74242
   \            4242        
   \   000358   42424242423C DC8 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 231, 66, 66, 34, 36, 36, 20
   \            0000000000E7
   \            424222242414
   \   00036A   141808080000 DC8 20, 24, 8, 8, 0, 0, 0, 0, 0, 107, 73, 73, 73, 73, 85, 85, 54, 34
   \            0000006B4949
   \            494955553622
   \   00037C   222200000000 DC8 34, 34, 0, 0, 0, 0, 0, 231, 66, 36, 36, 24, 24, 24, 36, 36, 66, 231
   \            00E742242418
   \            1818242442E7
   \   00038E   000000000077 DC8 0, 0, 0, 0, 0, 119, 34, 34, 20, 20, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0
   \            222214140808
   \            0808081C0000
   \            0000        
   \   0003A2   007E21201010 DC8 0, 126, 33, 32, 16, 16, 8, 4, 4, 66, 66, 63, 0, 0, 0, 120, 8, 8, 8
   \            08040442423F
   \            000000780808
   \            08          
   \   0003B5   080808080808 DC8 8, 8, 8, 8, 8, 8, 8, 8, 8, 120, 0, 0, 0, 2, 2, 4, 4, 8, 8, 8, 16
   \            080808780000
   \            000202040408
   \            080810      
   \   0003CA   102020204040 DC8 16, 32, 32, 32, 64, 64, 0, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16
   \            001E10101010
   \            1010101010  
   \   0003DB   1010101E0000 DC8 16, 16, 16, 30, 0, 0, 56, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            384400000000
   \            000000000000
   \            000000      
   \   0003F0   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 6, 8, 0, 0, 0
   \            000000000000
   \            000000FF0006
   \            08000000    
   \   000406   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 120, 68
   \            000000000000
   \            00000000003C
   \            427844      
   \   00041B   4242FC000000 DC8 66, 66, 252, 0, 0, 0, 0, 0, 3, 2, 2, 2, 26, 38, 66, 66, 66, 38, 26
   \            000003020202
   \            1A2642424226
   \            1A          
   \   00042E   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 68, 2, 2, 2, 68, 56, 0, 0, 0, 0, 0
   \            000000384402
   \            020244380000
   \            000000      
   \   000443   604040407844 DC8 96, 64, 64, 64, 120, 68, 66, 66, 66, 100, 216, 0, 0, 0, 0, 0, 0, 0
   \            42424264D800
   \            000000000000
   \   000455   00003C427E02 DC8 0, 0, 60, 66, 126, 2, 2, 66, 60, 0, 0, 0, 0, 0, 240, 136, 8, 8, 126
   \            02423C000000
   \            0000F0880808
   \            7E          
   \   000468   08080808083E DC8 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 34, 34, 28, 2
   \            000000000000
   \            0000007C2222
   \            1C02        
   \   00047C   3C42423C0000 DC8 60, 66, 66, 60, 0, 0, 0, 3, 2, 2, 2, 58, 70, 66, 66, 66, 66, 231, 0
   \            00030202023A
   \            4642424242E7
   \            00          
   \   00048F   000000000C0C DC8 0, 0, 0, 0, 12, 12, 0, 0, 14, 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 48
   \            00000E080808
   \            08083E000000
   \            000030      
   \   0004A4   300000382020 DC8 48, 0, 0, 56, 32, 32, 32, 32, 32, 32, 34, 30, 0, 0, 0, 3, 2, 2, 2
   \            20202020221E
   \            000000030202
   \            02          
   \   0004B7   72120A161222 DC8 114, 18, 10, 22, 18, 34, 119, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8
   \            770000000000
   \            0E0808080808
   \            08          
   \   0004CA   0808083E0000 DC8 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 146, 146, 146, 146
   \            000000000000
   \            007F92929292
   \   0004DC   92B700000000 DC8 146, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 70, 66, 66, 66, 66, 231, 0
   \            00000000003B
   \            4642424242E7
   \            00          
   \   0004EF   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0
   \            00003C424242
   \            42423C000000
   \            0000        
   \   000503   000000001B26 DC8 0, 0, 0, 0, 27, 38, 66, 66, 66, 34, 30, 2, 7, 0, 0, 0, 0, 0, 0, 0
   \            424242221E02
   \            070000000000
   \            0000        
   \   000517   784442424244 DC8 120, 68, 66, 66, 66, 68, 120, 64, 224, 0, 0, 0, 0, 0, 0, 0, 119, 76
   \            7840E0000000
   \            00000000774C
   \   000529   040404041F00 DC8 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 66, 2, 60, 64, 66
   \            000000000000
   \            00007C42023C
   \            4042        
   \   00053D   3E0000000000 DC8 62, 0, 0, 0, 0, 0, 0, 0, 8, 8, 62, 8, 8, 8, 8, 8, 48, 0, 0, 0, 0, 0
   \            000008083E08
   \            080808083000
   \            00000000    
   \   000553   000000006342 DC8 0, 0, 0, 0, 99, 66, 66, 66, 66, 98, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            42424262DC00
   \            000000000000
   \            0000        
   \   000567   E74224241408 DC8 231, 66, 36, 36, 20, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 73, 73
   \            080000000000
   \            00000000EB49
   \            49          
   \   00057A   555522220000 DC8 85, 85, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 36, 24, 24, 24, 36
   \            000000000000
   \            007624181818
   \            24          
   \   00058D   6E0000000000 DC8 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 36, 36, 20, 24, 8, 8, 7, 0
   \            00000000E742
   \            242414180808
   \            0700        
   \   0005A1   000000000000 DC8 0, 0, 0, 0, 0, 0, 126, 34, 16, 8, 8, 68, 126, 0, 0, 0, 192, 32, 32
   \            7E2210080844
   \            7E000000C020
   \            20          
   \   0005B4   202020102020 DC8 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 192, 0, 16, 16, 16, 16, 16
   \            20202020C000
   \            1010101010  
   \   0005C5   101010101010 DC8 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 6, 8, 8, 8, 8, 8, 16
   \            101010101000
   \            060808080808
   \            10          
   \   0005D8   080808080808 DC8 8, 8, 8, 8, 8, 8, 6, 0, 12, 50, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            06000C32C200
   \            000000000000
   \            000000      
   \   0005ED   000000       DC8 0, 0, 0

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const asc2_1608c[95][16]
   \                     asc2_1608c:
   \   000000   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3
   \            000000000000
   \            000000000000
   \            0000030303  
   \   000017   030303030003 DC8 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 27, 27, 27, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            001B1B1B0000
   \            00000000    
   \   00002D   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 152, 152, 255, 204, 102, 255, 51, 51, 0, 0
   \            00009898FFCC
   \            66FF33330000
   \   00003F   00000000000C DC8 0, 0, 0, 0, 0, 12, 126, 13, 13, 13, 127, 204, 204, 63, 12, 12, 0, 0
   \            7E0D0D0D7FCC
   \            CC3F0C0C0000
   \   000051   00000000672D DC8 0, 0, 0, 0, 103, 45, 55, 24, 24, 236, 182, 230, 0, 0, 0, 0, 0, 0, 0
   \            371818ECB6E6
   \            000000000000
   \            00          
   \   000064   001C363ECEFB DC8 0, 28, 54, 62, 206, 251, 113, 113, 223, 0, 0, 0, 0, 0, 0, 0, 6, 6
   \            7171DF000000
   \            000000000606
   \   000076   060000000000 DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 14, 6, 3, 3, 3, 3, 3
   \            000000000000
   \            00000C0E0603
   \            03030303    
   \   00008C   0306060C0000 DC8 3, 6, 6, 12, 0, 0, 0, 0, 1, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 1, 0, 0
   \            000001030306
   \            060606060603
   \            03010000    
   \   0000A2   0000063F0F19 DC8 0, 0, 6, 63, 15, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12
   \            000000000000
   \            000000000000
   \            00000C      
   \   0000B7   0C3F3F0C0C00 DC8 12, 63, 63, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            000000000000
   \            000000      
   \   0000CC   060703000000 DC8 6, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 0, 0, 0, 0, 0
   \            000000000000
   \            003E3E000000
   \            00000000    
   \   0000E2   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 48, 24, 24
   \            000000000600
   \            000000000000
   \            00301818    
   \   0000F8   0C0603030100 DC8 12, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 62, 98, 99, 99, 99, 99, 34
   \            000000000000
   \            003E62636363
   \            6322        
   \   00010C   3E0000000000 DC8 62, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 15, 12, 12, 12, 12, 63, 0, 0, 0
   \            0000000C0F0F
   \            0C0C0C0C3F00
   \            0000        
   \   000120   00000000003E DC8 0, 0, 0, 0, 0, 62, 99, 96, 56, 30, 7, 3, 127, 0, 0, 0, 0, 0, 0, 0
   \            6360381E0703
   \            7F0000000000
   \            0000        
   \   000134   003E63603068 DC8 0, 62, 99, 96, 48, 104, 96, 99, 62, 0, 0, 0, 0, 0, 0, 0, 0, 48, 56
   \            60633E000000
   \            000000000030
   \            38          
   \   000147   343231FF3030 DC8 52, 50, 49, 255, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 63, 99
   \            000000000000
   \            00007F03033F
   \            63          
   \   00015A   60731E000000 DC8 96, 115, 30, 0, 0, 0, 0, 0, 0, 0, 0, 28, 14, 6, 63, 99, 99, 99, 62
   \            00000000001C
   \            0E063F636363
   \            3E          
   \   00016D   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 96, 48, 24, 24, 12, 14, 6, 0, 0, 0, 0
   \            0000FF603018
   \            180C0E060000
   \            0000        
   \   000181   000000003F63 DC8 0, 0, 0, 0, 63, 99, 99, 98, 127, 99, 99, 62, 0, 0, 0, 0, 0, 0, 0, 0
   \            63627F63633E
   \            000000000000
   \            0000        
   \   000195   3E7363637E30 DC8 62, 115, 99, 99, 126, 48, 24, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6
   \            180E00000000
   \            000000000000
   \            06          
   \   0001A8   060000060600 DC8 6, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 6, 7, 3
   \            000000000000
   \            000000060600
   \            0000060703  
   \   0001BF   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 48, 24, 14, 28, 48, 0, 0, 0, 0, 0, 0, 0, 0
   \            000030180E1C
   \            300000000000
   \            000000      
   \   0001D4   00001F1F0000 DC8 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 28
   \            1F1F00000000
   \            000000000000
   \            00061C      
   \   0001E9   381C06000000 DC8 56, 28, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 49, 48, 28, 6, 0, 6, 6, 0
   \            000000000000
   \            0F31301C0600
   \            060600      
   \   0001FE   000000000000 DC8 0, 0, 0, 0, 0, 0, 252, 134, 51, 57, 77, 109, 249, 3, 134, 252, 0, 0
   \            FC8633394D6D
   \            F90386FC0000
   \   000210   000000000040 DC8 0, 0, 0, 0, 0, 64, 96, 112, 216, 220, 254, 135, 131, 0, 0, 0, 0, 0
   \            6070D8DCFE87
   \            830000000000
   \   000222   0000001F7363 DC8 0, 0, 0, 31, 115, 99, 99, 127, 195, 227, 127, 0, 0, 0, 0, 0, 0, 0
   \            637FC3E37F00
   \            000000000000
   \   000234   007C66030301 DC8 0, 124, 102, 3, 3, 1, 1, 97, 62, 0, 0, 0, 0, 0, 0, 0, 0, 15, 59, 99
   \            01613E000000
   \            00000000000F
   \            3B63        
   \   000248   C3C3C3633F00 DC8 195, 195, 195, 99, 63, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 127, 3, 3
   \            000000000000
   \            007F03037F03
   \            03          
   \   00025B   037E00000000 DC8 3, 126, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 127, 3, 3, 3, 3, 0, 0, 0
   \            000000007F03
   \            037F03030303
   \            000000      
   \   000270   00000000003C DC8 0, 0, 0, 0, 0, 60, 102, 3, 1, 249, 225, 113, 31, 0, 0, 0, 0, 0, 0
   \            660301F9E171
   \            1F0000000000
   \            00          
   \   000283   0000838383FF DC8 0, 0, 131, 131, 131, 255, 131, 131, 131, 131, 0, 0, 0, 0, 0, 0, 0
   \            838383830000
   \            0000000000  
   \   000294   003F0C0C0C0C DC8 0, 63, 12, 12, 12, 12, 12, 12, 63, 0, 0, 0, 0, 0, 0, 0, 0, 254, 48
   \            0C0C3F000000
   \            0000000000FE
   \            30          
   \   0002A7   303030303333 DC8 48, 48, 48, 48, 51, 51, 28, 0, 0, 0, 0, 0, 0, 0, 195, 99, 59, 31
   \            1C0000000000
   \            0000C3633B1F
   \   0002B9   0F1F73E30000 DC8 15, 31, 115, 227, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 127
   \            000000000000
   \            030303030303
   \            037F        
   \   0002CD   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 198, 198, 231, 239, 191, 189, 57, 25, 0, 0
   \            0000C6C6E7EF
   \            BFBD39190000
   \   0002DF   000000000000 DC8 0, 0, 0, 0, 0, 0, 131, 135, 143, 159, 187, 243, 227, 131, 0, 0, 0
   \            83878F9FBBF3
   \            E383000000  
   \   0002F0   0000000000FC DC8 0, 0, 0, 0, 0, 252, 135, 3, 1, 1, 1, 131, 124, 0, 0, 0, 0, 0, 0, 0
   \            870301010183
   \            7C0000000000
   \            0000        
   \   000304   000F1919190F DC8 0, 15, 25, 25, 25, 15, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 252, 6, 3
   \            010101000000
   \            0000000000FC
   \            0603        
   \   000318   010131F7FC00 DC8 1, 1, 49, 247, 252, 0, 0, 0, 0, 0, 0, 0, 0, 31, 51, 99, 115, 31, 59
   \            000000000000
   \            001F3363731F
   \            3B          
   \   00032B   63C300000000 DC8 99, 195, 0, 0, 0, 0, 0, 0, 0, 0, 124, 7, 3, 126, 192, 192, 225, 63
   \            000000007C07
   \            037EC0C0E13F
   \   00033D   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0
   \            0000FF181818
   \            181818180000
   \            0000        
   \   000351   00000000C3C3 DC8 0, 0, 0, 0, 195, 195, 195, 195, 195, 99, 102, 60, 0, 0, 0, 0, 0, 0
   \            C3C3C363663C
   \            000000000000
   \   000363   0000C3636636 DC8 0, 0, 195, 99, 102, 54, 52, 20, 28, 8, 0, 0, 0, 0, 0, 0, 0, 0, 97
   \            34141C080000
   \            000000000000
   \            61          
   \   000376   6373F7DEDE8C DC8 99, 115, 247, 222, 222, 140, 140, 0, 0, 0, 0, 0, 0, 0, 0, 129, 199
   \            8C0000000000
   \            00000081C7  
   \   000387   6E383C6EC781 DC8 110, 56, 60, 110, 199, 129, 0, 0, 0, 0, 0, 0, 0, 0, 193, 227, 102
   \            000000000000
   \            0000C1E366  
   \   000398   3C38181C0C00 DC8 60, 56, 24, 28, 12, 0, 0, 0, 0, 0, 0, 0, 0, 255, 112, 56, 28, 14, 7
   \            000000000000
   \            00FF70381C0E
   \            07          
   \   0003AB   03FF00000000 DC8 3, 255, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15
   \            0000000F0303
   \            030303030303
   \            03030F      
   \   0003C0   000000000003 DC8 0, 0, 0, 0, 0, 3, 3, 6, 12, 12, 24, 24, 48, 48, 0, 0, 0, 0, 0, 0, 7
   \            03060C0C1818
   \            303000000000
   \            000007      
   \   0003D5   060606060606 DC8 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 24, 60, 102, 0, 0, 0
   \            060606060700
   \            000000183C66
   \            000000      
   \   0003EA   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0
   \            000000000000
   \            000000000000
   \            0000FF00    
   \   000400   000000000103 DC8 0, 0, 0, 0, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            060000000000
   \            000000000000
   \            0000000000  
   \   000417   1E333131313F DC8 30, 51, 49, 49, 49, 63, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 31, 51, 51
   \            000000000000
   \            000303031F33
   \            33          
   \   00042A   33331F000000 DC8 51, 51, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 3, 1, 1, 1, 31, 0, 0
   \            000000000000
   \            001E03010101
   \            1F0000      
   \   00043F   000000000030 DC8 0, 0, 0, 0, 0, 48, 48, 48, 63, 49, 49, 49, 49, 63, 0, 0, 0, 0, 0, 0
   \            30303F313131
   \            313F00000000
   \            0000        
   \   000453   000000003E39 DC8 0, 0, 0, 0, 62, 57, 7, 1, 3, 63, 0, 0, 0, 0, 0, 0, 0, 60, 6, 6, 63
   \            0701033F0000
   \            00000000003C
   \            06063F      
   \   000468   060606060606 DC8 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 25, 25, 25, 29, 31
   \            000000000000
   \            0000000E1919
   \            191D1F      
   \   00047D   181C0F000000 DC8 24, 28, 15, 0, 0, 0, 0, 3, 3, 3, 63, 55, 51, 51, 51, 51, 0, 0, 0, 0
   \            000303033F37
   \            333333330000
   \            0000        
   \   000491   000000000300 DC8 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0
   \            030303030303
   \            000000000000
   \            00000C00    
   \   0004A7   0C0C0C0C0C0C DC8 12, 12, 12, 12, 12, 12, 12, 13, 7, 0, 0, 0, 0, 1, 1, 1, 49, 29, 15
   \            0C0D07000000
   \            00010101311D
   \            0F          
   \   0004BA   1F3931000000 DC8 31, 57, 49, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0
   \            000000000303
   \            030303030303
   \            03000000    
   \   0004D0   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 253, 155, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0
   \            00FD9B999999
   \            990000000000
   \            00          
   \   0004E3   000000000F1B DC8 0, 0, 0, 0, 15, 27, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \            191919190000
   \            000000000000
   \            0000        
   \   0004F7   0F1919191907 DC8 15, 25, 25, 25, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 25, 25, 25
   \            000000000000
   \            000000000F19
   \            1919        
   \   00050B   190F01010100 DC8 25, 15, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 31, 27, 25, 25, 25, 31, 24
   \            000000000000
   \            1F1B1919191F
   \            18          
   \   00051E   181800000000 DC8 24, 24, 0, 0, 0, 0, 0, 0, 0, 31, 27, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
   \            0000001F1B01
   \            010101000000
   \            000000      
   \   000533   000000001F01 DC8 0, 0, 0, 0, 31, 1, 7, 30, 24, 15, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 31
   \            071E180F0000
   \            000000000000
   \            06061F      
   \   000548   060606060600 DC8 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 31
   \            000000000000
   \            000000191919
   \            19191F      
   \   00055D   000000000000 DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 59, 27, 15, 14, 6, 0, 0, 0, 0, 0
   \            00000000313B
   \            1B0F0E060000
   \            000000      
   \   000572   000000000099 DC8 0, 0, 0, 0, 0, 153, 153, 221, 247, 119, 51, 0, 0, 0, 0, 0, 0, 0, 0
   \            99DDF7773300
   \            000000000000
   \            00          
   \   000585   0000333B0E0E DC8 0, 0, 51, 59, 14, 14, 27, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 115
   \            1B3100000000
   \            000000000000
   \            6173        
   \   000599   373E1C0C0C06 DC8 55, 62, 28, 12, 12, 6, 6, 0, 0, 0, 0, 0, 0, 0, 63, 56, 28, 14, 7
   \            060000000000
   \            00003F381C0E
   \            07          
   \   0005AC   3F0000000000 DC8 63, 0, 0, 0, 0, 0, 0, 0, 12, 14, 6, 3, 3, 3, 3, 3, 3, 6, 6, 12, 0
   \            00000C0E0603
   \            030303030306
   \            060C00      
   \   0005C1   000000060606 DC8 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 1, 3, 3, 6
   \            060606060606
   \            060606000000
   \            0001030306  
   \   0005D8   060606060603 DC8 6, 6, 6, 6, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 103, 109, 57, 0, 0, 0
   \            030100000000
   \            000000676D39
   \            000000      
   \   0005ED   000000       DC8 0, 0, 0

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const hanzi_Idx[41]
   \                     hanzi_Idx:
   \   000000   B1B1BEA9C1FA DC8 "\261\261\276\251\301\372\307\361\307\360\326\307\304\334\277\306\274\274\314\324\261\246\265\352\322\272\276\247\265\245\306\254\273\372\326\307\304\334\263\265"
   \            C7F1C7F0D6C7
   \            C4DCBFC6BCBC
   \            CCD4B1A6B5EA
   \            D2BABEA7B5A5
   \            C6ACBBFAD6C7
   \            C4DCB3B500  

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const hanzi[480]
   \                     hanzi:
   \   000000   000000000880 DC8 0, 0, 0, 0, 8, 128, 8, 128, 8, 140, 248, 240, 8, 128, 8, 128, 56
   \            0880088CF8F0
   \            0880088038  
   \   000011   84C88408F800 DC8 132, 200, 132, 8, 248, 0, 0, 0, 0, 0, 0, 3, 0, 255, 252, 63, 240
   \            000000000003
   \            00FFFC3FF0  
   \   000022   201020103FF0 DC8 32, 16, 32, 16, 63, 240, 25, 96, 49, 24, 199, 12, 0, 0, 0, 0, 0, 0
   \            19603118C70C
   \            000000000000
   \   000034   046004307FFC DC8 4, 96, 4, 48, 127, 252, 4, 136, 4, 144, 8, 224, 9, 132, 54, 132, 96
   \            0488049008E0
   \            0984368460  
   \   000045   F8000000000E DC8 248, 0, 0, 0, 0, 14, 0, 120, 248, 64, 136, 64, 144, 126, 160, 72
   \            0078F8408840
   \            907EA048    
   \   000055   90488848884A DC8 144, 72, 136, 72, 136, 74, 240, 244, 128, 0, 128, 0, 0, 0, 0, 0
   \            F0F480008000
   \            00000000    
   \   000065   781F80100010 DC8 120, 31, 128, 16, 0, 16, 0, 31, 248, 16, 64, 16, 64, 16, 64, 127
   \            001FF8104010
   \            4010407F    
   \   000075   FC0000000020 DC8 252, 0, 0, 0, 0, 32, 0, 126, 248, 144, 136, 254, 136, 56, 248, 198
   \            007EF89088FE
   \            8838F8C6    
   \   000085   003FF03FF020 DC8 0, 63, 240, 63, 240, 32, 16, 63, 240, 0, 0, 0, 0, 0, 0, 48, 140, 70
   \            103FF0000000
   \            000000308C46
   \   000097   F4FF847EF842 DC8 244, 255, 132, 126, 248, 66, 132, 126, 152, 126, 228, 66, 132, 78
   \            847E987EE442
   \            844E        
   \   0000A5   FC0000000000 DC8 252, 0, 0, 0, 0, 0, 0, 0, 16, 125, 144, 16, 208, 127, 16, 25, 144
   \            0000107D9010
   \            D07F101990  
   \   0000B6   37FC50101010 DC8 55, 252, 80, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 32, 64, 255, 252
   \            101000000000
   \            00002040FFFC
   \   0000C8   204027F83208 DC8 32, 64, 39, 248, 50, 8, 225, 16, 32, 224, 33, 224, 238, 28, 0, 0, 0
   \            E11020E021E0
   \            EE1C000000  
   \   0000D9   000000620037 DC8 0, 0, 0, 98, 0, 55, 248, 106, 8, 55, 232, 15, 248, 36, 168, 36, 168
   \            F86A0837E80F
   \            F824A824A8  
   \   0000EA   47E840780000 DC8 71, 232, 64, 120, 0, 0, 0, 0, 0, 0, 3, 0, 127, 248, 64, 8, 127, 248
   \            000000000300
   \            7FF840087FF8
   \   0000FC   02003FF00260 DC8 2, 0, 63, 240, 2, 96, 2, 16, 127, 248, 0, 0, 0, 0, 0, 0, 1, 128, 63
   \            02107FF80000
   \            000000000180
   \            3F          
   \   00010F   F8210021F821 DC8 248, 33, 0, 33, 248, 33, 0, 47, 240, 40, 16, 104, 16, 79, 240, 0, 0
   \            002FF0281068
   \            104FF00000  
   \   000120   0000000060C0 DC8 0, 0, 0, 0, 96, 192, 63, 252, 98, 64, 52, 248, 13, 72, 54, 176, 36
   \            3FFC624034F8
   \            0D4836B024  
   \   000131   6044E0471C00 DC8 96, 68, 224, 71, 28, 0, 0, 0, 0, 0, 0, 63, 240, 32, 16, 63, 240, 63
   \            00000000003F
   \            F020103FF03F
   \   000143   F07CF844887C DC8 240, 124, 248, 68, 136, 124, 248, 68, 136, 124, 248, 68, 136, 0, 0
   \            F844887CF844
   \            880000      
   \   000152   102008C03FF0 DC8 16, 32, 8, 192, 63, 240, 34, 16, 63, 240, 34, 16, 63, 240, 2, 0
   \            22103FF02210
   \            3FF00200    
   \   000162   7FF802000200 DC8 127, 248, 2, 0, 2, 0, 0, 0, 0, 0, 16, 64, 16, 64, 16, 64, 31, 252
   \            000000001040
   \            104010401FFC
   \   000174   10001FE01020 DC8 16, 0, 31, 224, 16, 32, 32, 32, 96, 32, 0, 0, 0, 0, 32, 0, 35, 224
   \            202060200000
   \            0000200023E0
   \   000186   FA2022207220 DC8 250, 32, 34, 32, 114, 32, 106, 32, 162, 32, 162, 36, 36, 36, 40, 56
   \            6A20A220A224
   \            24242838    
   \   000196   000000002000 DC8 0, 0, 0, 0, 32, 0, 126, 248, 144, 136, 254, 136, 56, 248, 198, 0
   \            7EF89088FE88
   \            38F8C600    
   \   0001A6   3FF03FF02010 DC8 63, 240, 63, 240, 32, 16, 63, 240, 0, 0, 0, 0, 0, 0, 48, 140, 70
   \            3FF000000000
   \            0000308C46  
   \   0001B7   F4FF847EF842 DC8 244, 255, 132, 126, 248, 66, 132, 126, 152, 126, 228, 66, 132, 78
   \            847E987EE442
   \            844E        
   \   0001C5   FC0000000004 DC8 252, 0, 0, 0, 0, 4, 0, 8, 0, 127, 248, 17, 0, 49, 0, 63, 240, 1, 0
   \            0008007FF811
   \            0031003FF001
   \            00          
   \   0001D8   0100FFFC0100 DC8 1, 0, 255, 252, 1, 0, 1, 0
   \            0100        

   \                                 In  segment DATA20_C, align 1, align-sorted
   \   unsigned char const hanzi16x16[640]
   \                     hanzi16x16:
   \   000000   044004400440 DC8 4, 64, 4, 64, 4, 64, 4, 68, 4, 72, 124, 80, 4, 96, 4, 64, 4, 64, 4
   \            044404487C50
   \            046004400440
   \            04          
   \   000013   40044004421C DC8 64, 4, 64, 4, 66, 28, 66, 228, 66, 68, 62, 4, 0, 2, 0, 1, 0, 255
   \            42E442443E04
   \            0002000100FF
   \   000025   FE000000001F DC8 254, 0, 0, 0, 0, 31, 240, 16, 16, 16, 16, 16, 16, 31, 240, 1, 0, 17
   \            F01010101010
   \            101FF0010011
   \   000037   101108210445 DC8 16, 17, 8, 33, 4, 69, 4, 2, 0, 4, 32, 4, 16, 4, 16, 4, 0, 255, 254
   \            040200042004
   \            1004100400FF
   \            FE          
   \   00004A   048004880488 DC8 4, 128, 4, 136, 4, 136, 4, 144, 8, 160, 8, 192, 16, 130, 17, 130
   \            049008A008C0
   \            10821182    
   \   00005A   2282447E8000 DC8 34, 130, 68, 126, 128, 0, 0, 0, 3, 62, 60, 34, 32, 36, 32, 36, 32
   \            0000033E3C22
   \            2024202420  
   \   00006B   283FA4222422 DC8 40, 63, 164, 34, 36, 34, 34, 34, 34, 34, 34, 34, 52, 39, 168, 248
   \            222222222222
   \            3427A8F8    
   \   00007B   204020002000 DC8 32, 64, 32, 0, 32, 0, 16, 0, 120, 31, 128, 16, 0, 16, 0, 16, 0, 16
   \            1000781F8010
   \            001000100010
   \   00008D   001FFC104010 DC8 0, 31, 252, 16, 64, 16, 64, 16, 64, 16, 64, 16, 64, 16, 64, 255
   \            401040104010
   \            401040FF    
   \   00009D   FE000020003E DC8 254, 0, 0, 32, 0, 62, 124, 72, 68, 8, 68, 255, 68, 20, 68, 34, 124
   \            7C48440844FF
   \            441444227C  
   \   0000AE   40001FF01010 DC8 64, 0, 31, 240, 16, 16, 16, 16, 31, 240, 16, 16, 16, 16, 31, 240
   \            10101FF01010
   \            10101FF0    
   \   0000BE   101010402444 DC8 16, 16, 16, 64, 36, 68, 66, 72, 255, 112, 1, 64, 0, 66, 126, 66, 66
   \            4248FF700140
   \            00427E4242  
   \   0000CF   3E42007E4442 DC8 62, 66, 0, 126, 68, 66, 72, 66, 112, 126, 64, 66, 66, 74, 66, 68
   \            4842707E4042
   \            424A4244    
   \   0000DF   3E08101D10F0 DC8 62, 8, 16, 29, 16, 240, 144, 16, 144, 16, 16, 253, 16, 16, 144, 56
   \            9010901010FD
   \            10109038    
   \   0000EF   903410501E53 DC8 144, 52, 16, 80, 30, 83, 240, 144, 16, 16, 16, 16, 16, 16, 16, 16
   \            F09010101010
   \            10101010    
   \   0000FF   101020102010 DC8 16, 16, 32, 16, 32, 16, 32, 19, 254, 252, 32, 16, 32, 16, 32, 21
   \            2013FEFC2010
   \            20102015    
   \   00010F   FC18843088D0 DC8 252, 24, 132, 48, 136, 208, 72, 16, 80, 16, 32, 16, 80, 81, 136, 38
   \            481050102010
   \            50518826    
   \   00011F   060100210011 DC8 6, 1, 0, 33, 0, 17, 252, 18, 4, 133, 4, 65, 228, 66, 132, 16, 132
   \            FC1204850441
   \            E442841084  
   \   000130   17F42084E2A4 DC8 23, 244, 32, 132, 226, 164, 34, 164, 35, 228, 32, 4, 32, 40, 0, 16
   \            22A423E42004
   \            20280010    
   \   000140   020001007FFE DC8 2, 0, 1, 0, 127, 254, 64, 2, 128, 4, 0, 0, 127, 252, 1, 0, 1, 0, 1
   \            400280040000
   \            7FFC01000100
   \            01          
   \   000153   003FF8010001 DC8 0, 63, 248, 1, 0, 1, 32, 1, 16, 255, 254, 0, 0, 1, 0, 0, 128, 63
   \            200110FFFE00
   \            00010000803F
   \   000165   FE2080208020 DC8 254, 32, 128, 32, 128, 32, 128, 32, 252, 32, 128, 32, 128, 39, 248
   \            8020FC208020
   \            8027F8      
   \   000174   240824084408 DC8 36, 8, 36, 8, 68, 8, 68, 8, 135, 248, 4, 8, 0, 128, 32, 64, 23, 254
   \            440887F80408
   \            0080204017FE
   \   000186   11208120423C DC8 17, 32, 129, 32, 66, 60, 66, 68, 22, 100, 18, 148, 35, 72, 226, 72
   \            424416641294
   \            2348E248    
   \   000196   223022202250 DC8 34, 48, 34, 32, 34, 80, 34, 136, 3, 6, 15, 224, 8, 32, 8, 32, 15
   \            228803060FE0
   \            082008200F  
   \   0001A7   E0082008200F DC8 224, 8, 32, 8, 32, 15, 224, 0, 0, 126, 252, 66, 132, 66, 132, 126
   \            E000007EFC42
   \            8442847E    
   \   0001B7   FC428442847E DC8 252, 66, 132, 66, 132, 126, 252, 66, 132, 16, 16, 8, 32, 4, 64, 63
   \            FC4284101008
   \            2004403F    
   \   0001C7   F8210821083F DC8 248, 33, 8, 33, 8, 63, 248, 33, 8, 33, 8, 63, 248, 1, 0, 1, 0, 255
   \            F8210821083F
   \            F801000100FF
   \   0001D9   FE0100010001 DC8 254, 1, 0, 1, 0, 1, 0, 0, 64, 16, 64, 16, 64, 16, 64, 16, 64, 31
   \            000040104010
   \            40104010401F
   \   0001EB   FC1000100010 DC8 252, 16, 0, 16, 0, 16, 0, 31, 224, 16, 32, 16, 32, 16, 32, 32, 32
   \            001FE0102010
   \            2010202020  
   \   0001FC   202040201000 DC8 32, 32, 64, 32, 16, 0, 17, 240, 17, 16, 17, 16, 253, 16, 17, 16, 49
   \            11F011101110
   \            FD10111031  
   \   00020D   103910551055 DC8 16, 57, 16, 85, 16, 85, 16, 145, 16, 17, 18, 17, 18, 18, 18, 18, 14
   \            109110111211
   \            121212120E  
   \   00021E   140020003E7C DC8 20, 0, 32, 0, 62, 124, 72, 68, 8, 68, 255, 68, 20, 68, 34, 124, 64
   \            48440844FF44
   \            1444227C40  
   \   00022F   001FF0101010 DC8 0, 31, 240, 16, 16, 16, 16, 31, 240, 16, 16, 16, 16, 31, 240, 16
   \            101FF0101010
   \            101FF010    
   \   00023F   101040244442 DC8 16, 16, 64, 36, 68, 66, 72, 255, 112, 1, 64, 0, 66, 126, 66, 66, 62
   \            48FF70014000
   \            427E42423E  
   \   000250   42007E444248 DC8 66, 0, 126, 68, 66, 72, 66, 112, 126, 64, 66, 66, 74, 66, 68, 62, 2
   \            42707E404242
   \            4A42443E02  
   \   000261   00020002007F DC8 0, 2, 0, 2, 0, 127, 252, 4, 0, 9, 0, 17, 0, 33, 0, 63, 248, 1, 0, 1
   \            FC0400090011
   \            0021003FF801
   \            0001        
   \   000275   00FFFE010001 DC8 0, 255, 254, 1, 0, 1, 0, 1, 0, 1, 0
   \            0001000100  
      3          #include <stdarg.h>
      4          #include <string.h>
      5          #include <stdio.h>
      6          #include <stdlib.h>
      7          //±³¾°É«£¬»­±ÊÉ«

   \                                 In  segment DATA20_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy20
      8          uint16_t POINT_COLOR=RED,BACK_COLOR=WHITE; 
   \                     POINT_COLOR:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for POINT_COLOR>`

   \                                 In  segment DATA20_I, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_copy20
   \                     BACK_COLOR:
   \   000000                DS8 2
   \   000002                REQUIRE `?<Initializer for BACK_COLOR>`
      9          /*************************************************************************
     10          *  º¯ÊýÃû³Æ£º
     11          *  ¹¦ÄÜËµÃ÷£º²¿·ÖÇøÓòÓÃÒ»ÖÖÑÕÉ«Ìî³ä
     12          *  ²ÎÊýËµÃ÷£º
     13          *  º¯Êý·µ»Ø£º
     14          *  Ê¹ÓÃÊ¾Àý£º
     15          *************************************************************************/ 

   \                                 In  segment CODE, align 2
     16          void LCD_Draw_Part(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
   \                     LCD_Draw_Part:
     17          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   084C         MOV.W   R12, R8
   \   000004   094D         MOV.W   R13, R9
   \   000006   0A4E         MOV.W   R14, R10
   \   000008   0B4F         MOV.W   R15, R11
     18            uint16_t i,j;
     19            LCD_PTLON(xs,ys,xe,ye);
   \   00000A   ........     CALLA   #LCD_SetPos
     20            for(j=0;j<(ye-ys+1);j++)
   \   00000E   0B89         SUB.W   R9, R11
   \   000010   1B53         ADD.W   #0x1, R11
   \   000012   0E24         JEQ     ??LCD_Draw_Part_2
   \   000014   0A88         SUB.W   R8, R10
   \   000016   1A53         ADD.W   #0x1, R10
   \   000018   18411400     MOV.W   0x14(SP), R8
     21            {
     22              for(i=0;i<(xe-xs+1);i++)
   \                     ??LCD_Draw_Part_1:
   \   00001C   0A93         CMP.W   #0x0, R10
   \   00001E   0624         JEQ     ??LCD_Draw_Part_3
   \   000020   094A         MOV.W   R10, R9
     23              {
     24                LCD_WR_WORD(color_dat);
   \                     ??LCD_Draw_Part_0:
   \   000022   0C48         MOV.W   R8, R12
   \   000024   ........     CALLA   #LCD_Write_DATA16
     25              }
   \   000028   3953         ADD.W   #0xffff, R9
   \   00002A   FB23         JNE     ??LCD_Draw_Part_0
     26            }  
   \                     ??LCD_Draw_Part_3:
   \   00002C   3B53         ADD.W   #0xffff, R11
   \   00002E   F623         JNE     ??LCD_Draw_Part_1
     27          }
   \                     ??LCD_Draw_Part_2:
   \   000030   3816         POPM.A  #0x4, R11
   \   000032   1001         RETA
     28          /*************************************************************************
     29          *  º¯ÊýÃû³Æ£º
     30          *  ¹¦ÄÜËµÃ÷£ºÈ«ÆÁÓÃÒ»ÖÖÑÕÉ«Ìî³ä
     31          *  ²ÎÊýËµÃ÷£º
     32          *  º¯Êý·µ»Ø£º
     33          *  Ê¹ÓÃÊ¾Àý£º
     34          *************************************************************************/ 

   \                                 In  segment CODE, align 2
     35          void LCD_Display_Full(uint16_t color)
   \                     LCD_Display_Full:
     36          {
   \   000000   3B14         PUSHM.A #0x4, R11
   \   000002   0A4C         MOV.W   R12, R10
     37            unsigned int i,j;	
     38            LCD_PTLON(0,0,LCD_W,LCD_H);
   \   000004   3F404001     MOV.W   #0x140, R15
   \   000008   3E40F000     MOV.W   #0xf0, R14
   \   00000C   0D43         MOV.W   #0x0, R13
   \   00000E   0C43         MOV.W   #0x0, R12
   \   000010   ........     CALLA   #LCD_SetPos
     39            for(i=0;i<=LCD_H;i++)
   \   000014   3B404101     MOV.W   #0x141, R11
     40            {
     41              for(j=0;j<=LCD_W;j++)
   \                     ??LCD_Display_Full_1:
   \   000018   7840F100     MOV.B   #0xf1, R8
     42              {
     43                 LCD_WR_WORD(color);
   \                     ??LCD_Display_Full_0:
   \   00001C   0C4A         MOV.W   R10, R12
   \   00001E   ........     CALLA   #LCD_Write_DATA16
     44              }
   \   000022   7853         ADD.B   #0xff, R8
   \   000024   FB23         JNE     ??LCD_Display_Full_0
     45            }
   \   000026   3B53         ADD.W   #0xffff, R11
   \   000028   F723         JNE     ??LCD_Display_Full_1
     46          }
   \   00002A   3816         POPM.A  #0x4, R11
   \   00002C   1001         RETA
     47          /*************************************************************************
     48          *  º¯ÊýÃû³Æ£º
     49          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
     50          *  ²ÎÊýËµÃ÷£º
     51          *  º¯Êý·µ»Ø£º
     52          *  Ê¹ÓÃÊ¾Àý£º
     53          *************************************************************************/ 

   \                                 In  segment CODE, align 2
     54          void LCD_Show_Char8X16(uint16_t x, uint16_t y, char c_dat,uint16_t word_color,uint16_t back_color)
   \                     LCD_Show_Char8X16:
     55          { 
   \   000000   5B14         PUSHM.A #0x6, R11
   \   000002   4A4E         MOV.B   R14, R10
   \   000004   0B4F         MOV.W   R15, R11
     56            if(c_dat<' '||c_dat>'~')return;
   \   000006   7A50E000     ADD.B   #0xe0, R10
   \   00000A   7A905F00     CMP.B   #0x5f, R10
   \   00000E   262C         JC      ??LCD_Show_Char8X16_2
     57            uint16_t i,j;
     58            char temp;
     59            c_dat=c_dat-' ';
     60            LCD_PTLON(x,y,x+7,y+15);			//¶¨Î»×Ö·ûÏÔÊ¾ÇøÓò
   \   000010   0F4D         MOV.W   R13, R15
   \   000012   3F500F00     ADD.W   #0xf, R15
   \   000016   0E4C         MOV.W   R12, R14
   \   000018   3E500700     ADD.W   #0x7, R14
   \   00001C   ........     CALLA   #LCD_SetPos
     61            for(j=0; j<16; j++)
   \   000020   4A0E         RLAM.A  #0x4, R10
   \   000022   ........     ADDA    #asc2_1608, R10
   \   000026   C80A         MOVA    R10, R8
   \   000028   A8001000     ADDA    #0x10, R8
   \   00002C   19411C00     MOV.W   0x1c(SP), R9
     62            {
     63              temp=asc2_1608[c_dat][j];
   \                     ??LCD_Show_Char8X16_1:
   \   000030   664A         MOV.B   @R10, R6
     64              for(i=0; i<8; i++)
   \   000032   4743         MOV.B   #0x0, R7
     65              {
     66                if((temp) & (0x01<<i))
   \                     ??LCD_Show_Char8X16_0:
   \   000034   1E43         MOV.W   #0x1, R14
   \   000036   5783         SUB.B   #0x1, R7
   \   000038   0230         JN      ??LCD_Show_Char8X16_3
   \   00003A                RPT     R7
   \   00003A   C7180E5E     RLAX.W  R14
   \                     ??LCD_Show_Char8X16_3:
   \   00003E   5753         ADD.B   #0x1, R7
   \   000040   46BE         BIT.B   R14, R6
   \   000042   0224         JEQ     ??LCD_Show_Char8X16_4
     67                { 
     68                  LCD_WR_WORD(word_color);
   \   000044   0C4B         MOV.W   R11, R12
   \   000046   013C         JMP     ??LCD_Show_Char8X16_5
     69                }
     70                else
     71                {
     72                  LCD_WR_WORD(back_color);
   \                     ??LCD_Show_Char8X16_4:
   \   000048   0C49         MOV.W   R9, R12
   \                     ??LCD_Show_Char8X16_5:
   \   00004A   ........     CALLA   #LCD_Write_DATA16
     73                }
     74              }
   \   00004E   1753         ADD.W   #0x1, R7
   \   000050   3792         CMP.W   #0x8, R7
   \   000052   F02B         JNC     ??LCD_Show_Char8X16_0
     75            }
   \   000054   AA000100     ADDA    #0x1, R10
   \   000058   DA08         CMPA    R8, R10
   \   00005A   EA23         JNE     ??LCD_Show_Char8X16_1
   \                     ??LCD_Show_Char8X16_2:
   \   00005C   5616         POPM.A  #0x6, R11
   \   00005E   1001         RETA
     76          }
     77          /*************************************************************************
     78          *  º¯ÊýÃû³Æ£º
     79          *  ¹¦ÄÜËµÃ÷£º
     80          *  ²ÎÊýËµÃ÷£º
     81          *  º¯Êý·µ»Ø£º
     82          *  Ê¹ÓÃÊ¾Àý£º
     83          *************************************************************************/ 

   \                                 In  segment CODE, align 2
     84          void LCD_Show_NChar8X16(uint16_t x, uint16_t y, char *s_dat,int num,uint16_t word_color,uint16_t back_color)
   \                     LCD_Show_NChar8X16:
     85          {
   \   000000   5B14         PUSHM.A #0x6, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   C70E         MOVA    R14, R7
   \   000008   084F         MOV.W   R15, R8
   \   00000A   16411C00     MOV.W   0x1c(SP), R6
   \   00000E   19411E00     MOV.W   0x1e(SP), R9
   \   000012   0C3C         JMP     ??LCD_Show_NChar8X16_1
     86            while(num--)
   \                     ??LCD_Show_NChar8X16_0:
   \   000014   3853         ADD.W   #0xffff, R8
     87            {
     88              LCD_Show_Char8X16( x, y,*s_dat++, word_color, back_color);
   \   000016   0912         PUSH.W  R9
   \   000018   0F46         MOV.W   R6, R15
   \   00001A   7E47         MOV.B   @R7+, R14
   \   00001C   0D4B         MOV.W   R11, R13
   \   00001E   0C4A         MOV.W   R10, R12
   \   000020   ........     CALLA   #LCD_Show_Char8X16
     89              x+=8;
   \   000024   3A52         ADD.W   #0x8, R10
     90              if(x>LCD_W-8)
   \   000026   2153         ADD.W   #0x2, SP
   \   000028   ........     CALLA   #?Subroutine8
     91              {
     92                 x=0;
     93                 y+=16;
     94              }
     95            }
   \                     ??LCD_Show_NChar8X16_1:
   \   00002C   0893         CMP.W   #0x0, R8
   \   00002E   F223         JNE     ??LCD_Show_NChar8X16_0
     96          }
   \   000030   5616         POPM.A  #0x6, R11
   \   000032   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine8:
   \   000000   3A90E900     CMP.W   #0xe9, R10
   \   000004   0328         JNC     ??LCD_Show_NChar8X16_2
   \   000006   0A43         MOV.W   #0x0, R10
   \   000008   3B501000     ADD.W   #0x10, R11
   \                     ??LCD_Show_NChar8X16_2:
   \   00000C   1001         RETA
     97          /*************************************************************************
     98          *  º¯ÊýÃû³Æ£º
     99          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û´®
    100          *  ²ÎÊýËµÃ÷£º
    101          *  º¯Êý·µ»Ø£º
    102          *  Ê¹ÓÃÊ¾Àý£º
    103          *************************************************************************/ 

   \                                 In  segment CODE, align 2
    104          void LCD_Show_String8X16(uint16_t x, uint16_t y, char *s_dat,uint16_t word_color,uint16_t back_color)
   \                     LCD_Show_String8X16:
    105          {
   \   000000   5B14         PUSHM.A #0x6, R11
   \   000002   0A4C         MOV.W   R12, R10
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   C80E         MOVA    R14, R8
   \   000008   064F         MOV.W   R15, R6
   \   00000A   19411C00     MOV.W   0x1c(SP), R9
   \   00000E   0B3C         JMP     ??LCD_Show_String8X16_1
    106            while(*s_dat!='\0') 
    107            {
    108              LCD_Show_Char8X16(x, y, *s_dat++,word_color,back_color);
   \                     ??LCD_Show_String8X16_0:
   \   000010   0912         PUSH.W  R9
   \   000012   0F46         MOV.W   R6, R15
   \   000014   7E48         MOV.B   @R8+, R14
   \   000016   0D4B         MOV.W   R11, R13
   \   000018   0C4A         MOV.W   R10, R12
   \   00001A   ........     CALLA   #LCD_Show_Char8X16
    109              x+=8;
   \   00001E   3A52         ADD.W   #0x8, R10
    110              if(x>LCD_W-8)
   \   000020   2153         ADD.W   #0x2, SP
   \   000022   ........     CALLA   #?Subroutine8
    111              {
    112                 x=0;
    113                 y+=16;
    114              }
    115            }
   \                     ??LCD_Show_String8X16_1:
   \   000026   C8930000     CMP.B   #0x0, 0(R8)
   \   00002A   F223         JNE     ??LCD_Show_String8X16_0
    116          }
   \   00002C   5616         POPM.A  #0x6, R11
   \   00002E   1001         RETA
    117          /*************************************************************************
    118          *  º¯ÊýÃû³Æ£º
    119          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öÕûÊý
    120          *  ²ÎÊýËµÃ÷£º
    121          *  º¯Êý·µ»Ø£º
    122          *  Ê¹ÓÃÊ¾Àý£º
    123          *************************************************************************/ 

   \                                 In  segment CODE, align 2
    124          void LCD_Show_IntNumber8X16(uint16_t x,uint16_t y,int number,uint16_t word_color,uint16_t back_color)
   \                     LCD_Show_IntNumber8X16:
    125          { 
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   0C12         PUSH.W  R12
   \   000004   3182         SUB.W   #0x8, SP
   \   000006   0A4D         MOV.W   R13, R10
   \   000008   074E         MOV.W   R14, R7
   \   00000A   0B4F         MOV.W   R15, R11
   \   00000C   18412E00     MOV.W   0x2e(SP), R8
    126            char str[7],j,k=0,i;
   \   000010   4943         MOV.B   #0x0, R9
    127            unsigned int c=10000;
   \   000012   36401027     MOV.W   #0x2710, R6
    128            if(number<0)
   \   000016   0E93         CMP.W   #0x0, R14
   \   000018   0634         JGE     ??LCD_Show_IntNumber8X16_1
    129              {str[0]='-';number=-number;}
   \   00001A   F1402D000000 MOV.B   #0x2d, 0(SP)
   \   000020   37E3         XOR.W   #0xffff, R7
   \   000022   1753         ADD.W   #0x1, R7
   \   000024   033C         JMP     ??LCD_Show_IntNumber8X16_2
    130            else str[0]=' ';
   \                     ??LCD_Show_IntNumber8X16_1:
   \   000026   F14020000000 MOV.B   #0x20, 0(SP)
    131            for( i=1;i<=5;i++)
   \                     ??LCD_Show_IntNumber8X16_2:
   \   00002C   5443         MOV.B   #0x1, R4
   \   00002E   0541         MOV.W   SP, R5
   \   000030   1553         ADD.W   #0x1, R5
    132            {
    133              j=number/c%10;
   \                     ??LCD_Show_IntNumber8X16_0:
   \   000032   0C47         MOV.W   R7, R12
   \   000034   0E46         MOV.W   R6, R14
   \   000036   ........     CALLA   #?DivMod16u
   \   00003A   3E400A00     MOV.W   #0xa, R14
   \   00003E   ........     CALLA   #?DivMod16u
    134              if(j==0&&k==0&&i<5)
   \   000042   4E93         CMP.B   #0x0, R14
   \   000044   0820         JNE     ??LCD_Show_IntNumber8X16_3
   \   000046   59B3         BIT.B   #0x1, R9
   \   000048   062C         JC      ??LCD_Show_IntNumber8X16_3
   \   00004A   74900500     CMP.B   #0x5, R4
   \   00004E   032C         JC      ??LCD_Show_IntNumber8X16_3
    135              {
    136                str[i]=' ';
   \   000050   7E402000     MOV.B   #0x20, R14
   \   000054   033C         JMP     ??LCD_Show_IntNumber8X16_4
    137              }
    138              else
    139              {
    140                k=1;
   \                     ??LCD_Show_IntNumber8X16_3:
   \   000056   5943         MOV.B   #0x1, R9
    141                str[i]=j+'0';
   \   000058   7E503000     ADD.B   #0x30, R14
   \                     ??LCD_Show_IntNumber8X16_4:
   \   00005C   C54E0000     MOV.B   R14, 0(R5)
    142              }
    143              c/=10;
   \   000060   0C46         MOV.W   R6, R12
   \   000062   3E400A00     MOV.W   #0xa, R14
   \   000066   ........     CALLA   #?DivMod16u
   \   00006A   064C         MOV.W   R12, R6
    144            }
   \   00006C   5453         ADD.B   #0x1, R4
   \   00006E   1553         ADD.W   #0x1, R5
   \   000070   74900600     CMP.B   #0x6, R4
   \   000074   DE2B         JNC     ??LCD_Show_IntNumber8X16_0
    145            str[6]='\0';
   \   000076   C1430600     MOV.B   #0x0, 0x6(SP)
    146            LCD_Show_String8X16(x,y,str,word_color,back_color);
   \   00007A   0812         PUSH.W  R8
   \   00007C   0F4B         MOV.W   R11, R15
   \   00007E   0E41         MOV.W   SP, R14
   \   000080   2E53         ADD.W   #0x2, R14
   \   000082   0D4A         MOV.W   R10, R13
   \   000084   1C410A00     MOV.W   0xa(SP), R12
   \   000088   ........     CALLA   #LCD_Show_String8X16
    147          }
   \   00008C   31500C00     ADD.W   #0xc, SP
   \   000090   7416         POPM.A  #0x8, R11
   \   000092   1001         RETA
    148          /*************************************************************************
    149          *  º¯ÊýÃû³Æ£º
    150          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö¸¡µãÊý£¬×¢ÒâÈôÊÇÖ®Ç°ÏÔÊ¾µÄ¸¡µãÊýÎ»Êý¶àÓàµ±Ç°µÄ£¬Ôò¿ÉÄÜ»á±£ÁôÉÏÒ»´ÎµÄÏÔÊ¾
    151          *  ²ÎÊýËµÃ÷£º
    152          *  º¯Êý·µ»Ø£º
    153          *  Ê¹ÓÃÊ¾Àý£º
    154          *************************************************************************/ 

   \                                 In  segment CODE, align 2
    155          void LCD_Show_FloatNumber8X16(uint16_t x,uint16_t y,float number,int decimals,uint16_t word_color,uint16_t back_color)
   \                     LCD_Show_FloatNumber8X16:
    156          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   0C12         PUSH.W  R12
   \   000004   0D12         PUSH.W  R13
   \   000006   31802800     SUB.W   #0x28, SP
   \   00000A   0A4E         MOV.W   R14, R10
   \   00000C   0B4F         MOV.W   R15, R11
    157            const float _fround[6]={0.49,0.05,0.005,0.0005,0.00005,0.000005};
   \   00000E   0C41         MOV.W   SP, R12
   \   000010   3C501000     ADD.W   #0x10, R12
   \   000014   ........     MOVA    #`?<Constant {(4.90000009E-1F), (5.00000007E-2F)`, R14
   \   000018   8D000C00     MOVA    #0xc, R13
   \   00001C   ........     CALLA   #?CopyMemoryWords20
   \   000020   0541         MOV.W   SP, R5
   \   000022   0553         ADD.W   #0x0, R5
   \   000024   C805         MOVA    R5, R8
    158            char Str[15];
    159            char * str=Str;
    160            float scale;
    161            unsigned char i,d;
    162            if (number<0.0) {number=-number; *str++='-';};
   \   000026   0E43         MOV.W   #0x0, R14
   \   000028   0F43         MOV.W   #0x0, R15
   \   00002A   0C4A         MOV.W   R10, R12
   \   00002C   0D4B         MOV.W   R11, R13
   \   00002E   ........     CALLA   #_CmpLt32f
   \   000032   0C93         CMP.W   #0x0, R12
   \   000034   0724         JEQ     ??LCD_Show_FloatNumber8X16_5
   \   000036   3BE00080     XOR.W   #0x8000, R11
   \   00003A   F5402D000000 MOV.B   #0x2d, 0(R5)
   \   000040   A8000100     ADDA    #0x1, R8
   \                     ??LCD_Show_FloatNumber8X16_5:
   \   000044   19415000     MOV.W   0x50(SP), R9
    163            if (decimals>5) decimals=5;
   \   000048   39900600     CMP.W   #0x6, R9
   \   00004C   0238         JL      ??LCD_Show_FloatNumber8X16_6
   \   00004E   39400500     MOV.W   #0x5, R9
    164            number=number+_fround[decimals];
   \                     ??LCD_Show_FloatNumber8X16_6:
   \   000052   0F49         MOV.W   R9, R15
   \   000054   5F06         RLAM.W  #0x2, R15
   \   000056   0F51         ADD.W   SP, R15
   \   000058   1E4F1000     MOV.W   0x10(R15), R14
   \   00005C   1F4F1200     MOV.W   0x12(R15), R15
   \   000060   0C4A         MOV.W   R10, R12
   \   000062   0D4B         MOV.W   R11, R13
   \   000064   ........     CALLA   #_Add32f
   \   000068   0A4C         MOV.W   R12, R10
   \   00006A   0B4D         MOV.W   R13, R11
    165            i=0;
   \   00006C   4443         MOV.B   #0x0, R4
    166            scale=1.0;
   \   00006E   0643         MOV.W   #0x0, R6
   \   000070   3740803F     MOV.W   #0x3f80, R7
   \   000074   0A3C         JMP     ??LCD_Show_FloatNumber8X16_7
    167            while (number>=scale) {scale=scale*10.0; ++i;};
   \                     ??LCD_Show_FloatNumber8X16_0:
   \   000076   0E43         MOV.W   #0x0, R14
   \   000078   3F402041     MOV.W   #0x4120, R15
   \   00007C   0C46         MOV.W   R6, R12
   \   00007E   0D47         MOV.W   R7, R13
   \   000080   ........     CALLA   #_Mul32f
   \   000084   064C         MOV.W   R12, R6
   \   000086   074D         MOV.W   R13, R7
   \   000088   5453         ADD.B   #0x1, R4
   \                     ??LCD_Show_FloatNumber8X16_7:
   \   00008A   0E46         MOV.W   R6, R14
   \   00008C   0F47         MOV.W   R7, R15
   \   00008E   0C4A         MOV.W   R10, R12
   \   000090   0D4B         MOV.W   R11, R13
   \   000092   ........     CALLA   #_CmpGe32f
   \   000096   0C93         CMP.W   #0x0, R12
   \   000098   EE23         JNE     ??LCD_Show_FloatNumber8X16_0
    168            if (i==0) *str++='0';
   \   00009A   4493         CMP.B   #0x0, R4
   \   00009C   0620         JNE     ??LCD_Show_FloatNumber8X16_1
   \   00009E   F84030000000 MOV.B   #0x30, 0(R8)
   \   0000A4   A8000100     ADDA    #0x1, R8
   \   0000A8   233C         JMP     ??LCD_Show_FloatNumber8X16_8
   \                     ??LCD_Show_FloatNumber8X16_1:
   \   0000AA   7453         ADD.B   #0xff, R4
    169            else
    170              while (i--)
    171              {
    172                scale=(float)((int32_t)(0.5+scale/10.0));
   \   0000AC   0E43         MOV.W   #0x0, R14
   \   0000AE   3F402041     MOV.W   #0x4120, R15
   \   0000B2   0C46         MOV.W   R6, R12
   \   0000B4   0D47         MOV.W   R7, R13
   \   0000B6   ........     CALLA   #_Div32f
   \   0000BA   0E43         MOV.W   #0x0, R14
   \   0000BC   3F40003F     MOV.W   #0x3f00, R15
   \   0000C0   ........     CALLA   #_Add32f
   \   0000C4   ........     CALLA   #_Cast32fto32s
   \   0000C8   ........     CALLA   #_Cast32sto32f
   \   0000CC   064C         MOV.W   R12, R6
   \   0000CE   074D         MOV.W   R13, R7
    173                d=(unsigned char) (number/scale);
   \   0000D0   0E4C         MOV.W   R12, R14
   \   0000D2   0F4D         MOV.W   R13, R15
   \   0000D4   0C4A         MOV.W   R10, R12
   \   0000D6   0D4B         MOV.W   R11, R13
   \   0000D8   ........     CALLA   #_Div32f
   \   0000DC   ........     CALLA   #?Subroutine13
    174                *str++=d+'0';
    175                number=number-scale*d;
    176               };
   \                     ??CrossCallReturnLabel_16:
   \   0000E0   0E46         MOV.W   R6, R14
   \   0000E2   0F47         MOV.W   R7, R15
   \   0000E4   ........     CALLA   #_Mul32f
   \   0000E8   ........     CALLA   #?Subroutine2
   \                     ??CrossCallReturnLabel_0:
   \   0000EC   4493         CMP.B   #0x0, R4
   \   0000EE   DD23         JNE     ??LCD_Show_FloatNumber8X16_1
   \                     ??LCD_Show_FloatNumber8X16_8:
   \   0000F0   16415200     MOV.W   0x52(SP), R6
   \   0000F4   17415400     MOV.W   0x54(SP), R7
    177            if (decimals==0) {*str=0; LCD_Show_String8X16(x,y,Str,word_color,back_color);return;};
   \   0000F8   0993         CMP.W   #0x0, R9
   \   0000FA   1524         JEQ     ??LCD_Show_FloatNumber8X16_4
    178            *str++='.';
   \   0000FC   F8402E000000 MOV.B   #0x2e, 0(R8)
   \   000102   A8000100     ADDA    #0x1, R8
   \                     ??LCD_Show_FloatNumber8X16_2:
   \   000106   3953         ADD.W   #0xffff, R9
    179            while (decimals--)
    180            {
    181              number=number*10.0;
   \   000108   0E43         MOV.W   #0x0, R14
   \   00010A   3F402041     MOV.W   #0x4120, R15
   \   00010E   0C4A         MOV.W   R10, R12
   \   000110   0D4B         MOV.W   R11, R13
   \   000112   ........     CALLA   #_Mul32f
   \   000116   0A4C         MOV.W   R12, R10
   \   000118   0B4D         MOV.W   R13, R11
    182              d=(unsigned char)number;
   \   00011A   ........     CALLA   #?Subroutine13
    183              *str++=d+'0';
    184              number=number-d;
    185            }
   \                     ??CrossCallReturnLabel_15:
   \   00011E   ........     CALLA   #?Subroutine2
   \                     ??CrossCallReturnLabel_1:
   \   000122   0993         CMP.W   #0x0, R9
   \   000124   F023         JNE     ??LCD_Show_FloatNumber8X16_2
    186            *str=0;
   \                     ??LCD_Show_FloatNumber8X16_4:
   \   000126   C8430000     MOV.B   #0x0, 0(R8)
    187            LCD_Show_String8X16(x,y,Str,word_color,back_color);
   \   00012A   0712         PUSH.W  R7
   \   00012C   0F46         MOV.W   R6, R15
   \   00012E   CE05         MOVA    R5, R14
   \   000130   1D412A00     MOV.W   0x2a(SP), R13
   \   000134   1C412C00     MOV.W   0x2c(SP), R12
   \   000138   ........     CALLA   #LCD_Show_String8X16
    188          }
   \   00013C   2153         ADD.W   #0x2, SP
   \   00013E   31502C00     ADD.W   #0x2c, SP
   \   000142   7416         POPM.A  #0x8, R11
   \   000144   1001         RETA

   \                                 In  segment CODE, align 2
   \                     ?Subroutine13:
   \   000000   ........     CALLA   #_Cast32fto32u
   \   000004   4E4C         MOV.B   R12, R14
   \   000006   7E503000     ADD.B   #0x30, R14
   \   00000A   C84E0000     MOV.B   R14, 0(R8)
   \   00000E   A8000100     ADDA    #0x1, R8
   \   000012   4C4C         MOV.B   R12, R12
   \   000014   0D43         MOV.W   #0x0, R13
   \   000016   ........     BRA     #_Cast32uto32f

   \                                 In  segment CODE, align 2
   \                     ?Subroutine2:
   \   000000   0E4C         MOV.W   R12, R14
   \   000002   0F4D         MOV.W   R13, R15
   \   000004   0C4A         MOV.W   R10, R12
   \   000006   0D4B         MOV.W   R11, R13
   \   000008   ........     CALLA   #_Sub32f
   \   00000C   0A4C         MOV.W   R12, R10
   \   00000E   0B4D         MOV.W   R13, R11
   \   000010   1001         RETA
    189          /*************************************************************************
    190          *  º¯ÊýÃû³Æ£º
    191          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Á½¸öµãÁ¬Ïß
    192          *  ²ÎÊýËµÃ÷£º
    193          *  º¯Êý·µ»Ø£º
    194          *  Ê¹ÓÃÊ¾Àý£º
    195          *************************************************************************/ 

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   000000   3152         ADD.W   #0x8, SP
   \   000002   7416         POPM.A  #0x8, R11
   \   000004   1001         RETA

   \                                 In  segment CODE, align 2
    196          void LCD_Draw_Line(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
   \                     LCD_Draw_Line:
    197          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   0E12         PUSH.W  R14
   \   000004   31800600     SUB.W   #0x6, SP
   \   000008   0A4C         MOV.W   R12, R10
   \   00000A   0B4D         MOV.W   R13, R11
   \   00000C   084F         MOV.W   R15, R8
    198            uint16_t i,ds;
    199            int dx,dy,inc_x, inc_y;
    200            int xerr = 0, yerr = 0;				//³õÊ¼»¯±äÁ¿
   \   00000E   0743         MOV.W   #0x0, R7
   \   000010   0643         MOV.W   #0x0, R6
   \   000012   19412C00     MOV.W   0x2c(SP), R9
    201          
    202            if(xs==xe)	  						//Èç¹ûÊÇ»­´¹Ö±ÏßÔòÖ»Ðè¶ÔÊúÖ±×ø±ê¼ÆÊý
   \   000016   0C9E         CMP.W   R14, R12
   \   000018   0B20         JNE     ??LCD_Draw_Line_3
    203            {
    204              LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
   \   00001A   ........     CALLA   #LCD_SetPos
   \   00001E   088B         SUB.W   R11, R8
   \   000020   1853         ADD.W   #0x1, R8
   \   000022   4A24         JEQ     ??LCD_Draw_Line_4
    205              for(i=0;i<(ye-ys+1);i++)
    206              {
    207                 LCD_WR_WORD(color_dat);
   \                     ??LCD_Draw_Line_0:
   \   000024   0C49         MOV.W   R9, R12
   \   000026   ........     CALLA   #LCD_Write_DATA16
    208              }
   \   00002A   3853         ADD.W   #0xffff, R8
   \   00002C   4524         JEQ     ??LCD_Draw_Line_4
   \   00002E   FA3F         JMP     ??LCD_Draw_Line_0
    209            }
    210            else if(ys==ye)						//Èç¹ûÊÇË®Æ½ÏßÔòÖ»ÐèÒª¶ÔË®Æ½×ø±ê¼ÆÊý
   \                     ??LCD_Draw_Line_3:
   \   000030   044E         MOV.W   R14, R4
   \   000032   048C         SUB.W   R12, R4
   \   000034   0D9F         CMP.W   R15, R13
   \   000036   0A20         JNE     ??LCD_Draw_Line_5
    211            {
    212              LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
   \   000038   ........     CALLA   #LCD_SetPos
    213              for(i=0;i<(xe-xs+1);i++)
   \   00003C   1453         ADD.W   #0x1, R4
   \   00003E   3C24         JEQ     ??LCD_Draw_Line_4
    214              {
    215                 LCD_WR_WORD(color_dat);
   \                     ??LCD_Draw_Line_1:
   \   000040   0C49         MOV.W   R9, R12
   \   000042   ........     CALLA   #LCD_Write_DATA16
    216              }
   \   000046   3453         ADD.W   #0xffff, R4
   \   000048   3724         JEQ     ??LCD_Draw_Line_4
   \   00004A   FA3F         JMP     ??LCD_Draw_Line_1
    217            } 
    218            else											//Èç¹ûÊÇÐ±Ïß£¬ÔòÖØÐÂ¼ÆËã£¬Ê¹ÓÃ»­µãº¯Êý»­³öÖ±Ïß
    219            {
    220              dx = xe - xs;								//¼ÆËã×ø±êÔöÁ¿
    221              dy = ye - ys;
   \                     ??LCD_Draw_Line_5:
   \   00004C   094F         MOV.W   R15, R9
   \   00004E   098D         SUB.W   R13, R9
    222          
    223              if(dx > 0) inc_x = 1;						//ÉèÖÃµ¥²½·½Ïò
   \   000050   1493         CMP.W   #0x1, R4
   \   000052   0338         JL      ??LCD_Draw_Line_6
   \   000054   91430400     MOV.W   #0x1, 0x4(SP)
   \   000058   043C         JMP     ??LCD_Draw_Line_7
    224              else 
    225              {
    226                inc_x = -1; dx = -dx;
   \                     ??LCD_Draw_Line_6:
   \   00005A   B1430400     MOV.W   #0xffff, 0x4(SP)
   \   00005E   34E3         XOR.W   #0xffff, R4
   \   000060   1453         ADD.W   #0x1, R4
    227              }
    228              if(dy > 0) inc_y = 1;						//ÉèÖÃµ¥²½·½Ïò
   \                     ??LCD_Draw_Line_7:
   \   000062   1993         CMP.W   #0x1, R9
   \   000064   0338         JL      ??LCD_Draw_Line_8
   \   000066   91430200     MOV.W   #0x1, 0x2(SP)
   \   00006A   043C         JMP     ??LCD_Draw_Line_9
    229              else
    230              {
    231                inc_y = -1; dy = -dy;
   \                     ??LCD_Draw_Line_8:
   \   00006C   B1430200     MOV.W   #0xffff, 0x2(SP)
   \   000070   39E3         XOR.W   #0xffff, R9
   \   000072   1953         ADD.W   #0x1, R9
    232              }
    233          
    234              if(dx > dy) ds = dx;						//Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá
   \                     ??LCD_Draw_Line_9:
   \   000074   0994         CMP.W   R4, R9
   \   000076   0234         JGE     ??LCD_Draw_Line_10
   \   000078   0544         MOV.W   R4, R5
   \   00007A   013C         JMP     ??LCD_Draw_Line_11
    235              else		
    236                ds = dy;
   \                     ??LCD_Draw_Line_10:
   \   00007C   0549         MOV.W   R9, R5
    237              for(i = 0; i <= ds+1; i++)					//»­ÏßÊä³ö
   \                     ??LCD_Draw_Line_11:
   \   00007E   81430000     MOV.W   #0x0, 0(SP)
    238              {
    239                LCD_PTLON(xs,ys,xe,ye);//LCD_draw_dot(xs, ys,color_dat);	//»­µã
   \                     ??LCD_Draw_Line_2:
   \   000082   0F48         MOV.W   R8, R15
   \   000084   1E410600     MOV.W   0x6(SP), R14
   \   000088   0D4B         MOV.W   R11, R13
   \   00008A   0C4A         MOV.W   R10, R12
   \   00008C   ........     CALLA   #LCD_SetPos
    240                xerr += dx;
   \   000090   0754         ADD.W   R4, R7
    241                yerr += dy;
   \   000092   0659         ADD.W   R9, R6
    242                if(xerr > ds)
   \   000094   0597         CMP.W   R7, R5
   \   000096   032C         JC      ??LCD_Draw_Line_12
    243                {
    244                  xerr -= ds;
   \   000098   0785         SUB.W   R5, R7
    245                  xs   += inc_x;
   \   00009A   1A510400     ADD.W   0x4(SP), R10
    246                }
    247                if(yerr > ds)
   \                     ??LCD_Draw_Line_12:
   \   00009E   0596         CMP.W   R6, R5
   \   0000A0   032C         JC      ??LCD_Draw_Line_13
    248                {
    249                  yerr -= ds;
   \   0000A2   0685         SUB.W   R5, R6
    250                  ys   += inc_y;
   \   0000A4   1B510200     ADD.W   0x2(SP), R11
    251                }
    252              }
   \                     ??LCD_Draw_Line_13:
   \   0000A8   2F41         MOV.W   @SP, R15
   \   0000AA   1F53         ADD.W   #0x1, R15
   \   0000AC   814F0000     MOV.W   R15, 0(SP)
   \   0000B0   0F45         MOV.W   R5, R15
   \   0000B2   1F53         ADD.W   #0x1, R15
   \   0000B4   2F91         CMP.W   @SP, R15
   \   0000B6   E52F         JC      ??LCD_Draw_Line_2
    253            }  
    254          }
   \                     ??LCD_Draw_Line_4:
   \   0000B8   ....         JMP     ?Subroutine0
   \   0000BA   0343         NOP
    255          /*************************************************************************
    256          *  º¯ÊýÃû³Æ£º
    257          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸ö³¤·½ÐÎ
    258          *  ²ÎÊýËµÃ÷£º
    259          *  º¯Êý·µ»Ø£º
    260          *  Ê¹ÓÃÊ¾Àý£º
    261          *************************************************************************/ 

   \                                 In  segment CODE, align 2
    262          void LCD_Draw_Rectangle(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
   \                     LCD_Draw_Rectangle:
    263          {
   \   000000   5B14         PUSHM.A #0x6, R11
   \   000002   064C         MOV.W   R12, R6
   \   000004   0A4D         MOV.W   R13, R10
   \   000006   0B4E         MOV.W   R14, R11
   \   000008   084F         MOV.W   R15, R8
   \   00000A   19411C00     MOV.W   0x1c(SP), R9
    264            LCD_Draw_Line(xs,ys,xs,ye,color_dat);	  //»­¾ØÐÎ×ó±ß
   \   00000E   0912         PUSH.W  R9
   \   000010   0E4C         MOV.W   R12, R14
   \   000012   ........     CALLA   #LCD_Draw_Line
    265            LCD_Draw_Line(xe,ys,xe,ye,color_dat);	  //»­¾ØÐÎÓÒ±ß
   \   000016   0912         PUSH.W  R9
   \   000018   0F48         MOV.W   R8, R15
   \   00001A   0E4B         MOV.W   R11, R14
   \   00001C   0D4A         MOV.W   R10, R13
   \   00001E   0C4B         MOV.W   R11, R12
   \   000020   ........     CALLA   #LCD_Draw_Line
    266            LCD_Draw_Line(xs,ys,xe,ys,color_dat);	  //»­¾ØÐÎÉÏ±ß
   \   000024   0912         PUSH.W  R9
   \   000026   0F4A         MOV.W   R10, R15
   \   000028   0E4B         MOV.W   R11, R14
   \   00002A   0D4A         MOV.W   R10, R13
   \   00002C   0C46         MOV.W   R6, R12
   \   00002E   ........     CALLA   #LCD_Draw_Line
    267            LCD_Draw_Line(xs,ye,xe,ye,color_dat);	  //»­¾ØÐÎÏÂ±ß
   \   000032   0912         PUSH.W  R9
   \   000034   0F48         MOV.W   R8, R15
   \   000036   0E4B         MOV.W   R11, R14
   \   000038   0D48         MOV.W   R8, R13
   \   00003A   0C46         MOV.W   R6, R12
   \   00003C   ........     CALLA   #LCD_Draw_Line
    268          }
   \   000040   3152         ADD.W   #0x8, SP
   \   000042   5616         POPM.A  #0x6, R11
   \   000044   1001         RETA
    269          /*************************************************************************
    270          *  º¯ÊýÃû³Æ£º
    271          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸öÈ·¶¨°ë¾¶µÄÔ²
    272          *  ²ÎÊýËµÃ÷£º
    273          *  º¯Êý·µ»Ø£º
    274          *  Ê¹ÓÃÊ¾Àý£º
    275          *************************************************************************/ 

   \                                 In  segment CODE, align 2, keep-with-next
    276          void LCD_Draw_Circle(uint16_t x,uint16_t y,uint16_t r,uint16_t color_dat)
   \                     LCD_Draw_Circle:
    277          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   3182         SUB.W   #0x8, SP
   \   000004   054C         MOV.W   R12, R5
   \   000006   044D         MOV.W   R13, R4
   \   000008   0A4E         MOV.W   R14, R10
   \   00000A   0B4F         MOV.W   R15, R11
    278            unsigned char dx, dy = r; 
   \   00000C   C14A0000     MOV.B   R10, 0(SP)
    279            if((x>=r) &&((128-x)>=r) && (y>=r) && ((160-y)>=r))		//È·¶¨Ëù»­Ô²ÔÚÆÁÄ»·¶Î§ÄÚ£¬Ã»ÓÐ³¬³ö×îÍâ±ß£¬(ÔÝ²»Ö§³ÖÓëÆÁÄ»±ßÏà½»)
   \   000010   0C9E         CMP.W   R14, R12
   \   000012   7B28         JNC     ??LCD_Draw_Circle_2
   \   000014   3F408000     MOV.W   #0x80, R15
   \   000018   0F8C         SUB.W   R12, R15
   \   00001A   0F9E         CMP.W   R14, R15
   \   00001C   7628         JNC     ??LCD_Draw_Circle_2
   \   00001E   0D9E         CMP.W   R14, R13
   \   000020   7428         JNC     ??LCD_Draw_Circle_2
   \   000022   3F40A000     MOV.W   #0xa0, R15
   \   000026   0F8D         SUB.W   R13, R15
   \   000028   0F9E         CMP.W   R14, R15
   \   00002A   6F28         JNC     ??LCD_Draw_Circle_2
    280            {
    281              for(dx = 0; dx <= r; dx++)
   \   00002C   C1430100     MOV.B   #0x0, 0x1(SP)
   \   000030   074C         MOV.W   R12, R7
   \   000032   064D         MOV.W   R13, R6
   \   000034   084C         MOV.W   R12, R8
   \   000036   094D         MOV.W   R13, R9
   \   000038   0212         PUSH.W  SR
   \   00003A   ........     CALLA   #?Subroutine12
   \                     ??CrossCallReturnLabel_13:
   \   00003E   1F42CA04     MOV.W   &0x4ca, R15
   \   000042   3241         POP.W   SR
   \   000044   1F53         ADD.W   #0x1, R15
   \   000046   814F0600     MOV.W   R15, 0x6(SP)
   \   00004A   5B3C         JMP     ??LCD_Draw_Circle_3
    282              {
    283                while((r * r + 1 - dx * dx) < (dy * dy)) dy--;
   \                     ??LCD_Draw_Circle_0:
   \   00004C   6E41         MOV.B   @SP, R14
   \   00004E   7E53         ADD.B   #0xff, R14
   \   000050   C14E0000     MOV.B   R14, 0(SP)
   \                     ??LCD_Draw_Circle_1:
   \   000054   6F41         MOV.B   @SP, R15
   \   000056   5E410100     MOV.B   0x1(SP), R14
   \   00005A   1D410600     MOV.W   0x6(SP), R13
   \   00005E   0212         PUSH.W  SR
   \   000060   ........     CALLA   #?Subroutine12
   \                     ??CrossCallReturnLabel_14:
   \   000064   1E42CA04     MOV.W   &0x4ca, R14
   \   000068   3241         POP.W   SR
   \   00006A   0D8E         SUB.W   R14, R13
   \   00006C   0212         PUSH.W  SR
   \   00006E   32C2         DINT
   \   000070   0343         NOP
   \   000072   824FC004     MOV.W   R15, &0x4c0
   \   000076   824FC804     MOV.W   R15, &0x4c8
   \   00007A   1F42CA04     MOV.W   &0x4ca, R15
   \   00007E   3241         POP.W   SR
   \   000080   0D9F         CMP.W   R15, R13
   \   000082   E42B         JNC     ??LCD_Draw_Circle_0
   \   000084   6F41         MOV.B   @SP, R15
   \   000086   0E44         MOV.W   R4, R14
   \   000088   0E8F         SUB.W   R15, R14
   \   00008A   814E0200     MOV.W   R14, 0x2(SP)
   \   00008E   0D4E         MOV.W   R14, R13
    284                LCD_Draw_Dot(x + dx, y - dy, color_dat);
   \   000090   0F4E         MOV.W   R14, R15
   \   000092   0E47         MOV.W   R7, R14
   \   000094   0C47         MOV.W   R7, R12
   \   000096   ........     CALLA   #?Subroutine3
   \                     ??CrossCallReturnLabel_2:
   \   00009A   0E48         MOV.W   R8, R14
   \   00009C   0C48         MOV.W   R8, R12
   \   00009E   ........     CALLA   #?Subroutine14
    285                LCD_Draw_Dot(x - dx, y - dy, color_dat);
    286                LCD_Draw_Dot(x - dx, y + dy, color_dat);
   \                     ??CrossCallReturnLabel_19:
   \   0000A2   6F41         MOV.B   @SP, R15
   \   0000A4   0E44         MOV.W   R4, R14
   \   0000A6   0E5F         ADD.W   R15, R14
   \   0000A8   814E0200     MOV.W   R14, 0x2(SP)
   \   0000AC   0D4E         MOV.W   R14, R13
   \   0000AE   0F4E         MOV.W   R14, R15
   \   0000B0   0E48         MOV.W   R8, R14
   \   0000B2   0C48         MOV.W   R8, R12
   \   0000B4   ........     CALLA   #?Subroutine3
   \                     ??CrossCallReturnLabel_3:
   \   0000B8   0E47         MOV.W   R7, R14
   \   0000BA   0C47         MOV.W   R7, R12
   \   0000BC   ........     CALLA   #?Subroutine4
    287                LCD_Draw_Dot(x + dx, y + dy, color_dat);
    288                LCD_Draw_Dot(x + dy, y - dx, color_dat);
   \                     ??CrossCallReturnLabel_4:
   \   0000C0   0E5F         ADD.W   R15, R14
   \   0000C2   814E0400     MOV.W   R14, 0x4(SP)
   \   0000C6   0C4E         MOV.W   R14, R12
   \   0000C8   0F49         MOV.W   R9, R15
   \   0000CA   0D49         MOV.W   R9, R13
   \   0000CC   ........     CALLA   #?Subroutine4
    289                LCD_Draw_Dot(x - dy, y - dx, color_dat);
   \                     ??CrossCallReturnLabel_5:
   \   0000D0   0E8F         SUB.W   R15, R14
   \   0000D2   814E0200     MOV.W   R14, 0x2(SP)
   \   0000D6   0C4E         MOV.W   R14, R12
   \   0000D8   0F49         MOV.W   R9, R15
   \   0000DA   0D49         MOV.W   R9, R13
   \   0000DC   ........     CALLA   #?Subroutine14
    290                LCD_Draw_Dot(x - dy, y + dx, color_dat);
   \                     ??CrossCallReturnLabel_20:
   \   0000E0   1C410200     MOV.W   0x2(SP), R12
   \   0000E4   ........     CALLA   #?Subroutine1
    291                LCD_Draw_Dot(x + dy, y + dx, color_dat);
   \                     ??CrossCallReturnLabel_17:
   \   0000E8   1C410400     MOV.W   0x4(SP), R12
   \   0000EC   ........     CALLA   #?Subroutine1
    292              }
   \                     ??CrossCallReturnLabel_18:
   \   0000F0   5E410100     MOV.B   0x1(SP), R14
   \   0000F4   5E53         ADD.B   #0x1, R14
   \   0000F6   C14E0100     MOV.B   R14, 0x1(SP)
   \   0000FA   3953         ADD.W   #0xffff, R9
   \   0000FC   3853         ADD.W   #0xffff, R8
   \   0000FE   1653         ADD.W   #0x1, R6
   \   000100   1753         ADD.W   #0x1, R7
   \                     ??LCD_Draw_Circle_3:
   \   000102   5F410100     MOV.B   0x1(SP), R15
   \   000106   0A9F         CMP.W   R15, R10
   \   000108   A52F         JC      ??LCD_Draw_Circle_1
    293            }
    294          }
   \                     ??LCD_Draw_Circle_2:
   \   00010A   ....         JMP     ?Subroutine0
   \   00010C   0343         NOP

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine12:
   \   000000   32C2         DINT
   \   000002   0343         NOP
   \   000004   824EC004     MOV.W   R14, &0x4c0
   \   000008   824EC804     MOV.W   R14, &0x4c8
   \   00000C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine4:
   \   000000   ........     CALLA   #LCD_SetPos
   \   000004   0C4B         MOV.W   R11, R12
   \   000006   ........     CALLA   #LCD_Write_DATA16
   \   00000A   5F410400     MOV.B   0x4(SP), R15
   \   00000E   0E45         MOV.W   R5, R14
   \   000010   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine3:
   \   000000   ........     CALLA   #LCD_SetPos
   \   000004   0C4B         MOV.W   R11, R12
   \   000006   ........     CALLA   #LCD_Write_DATA16
   \   00000A   1D410600     MOV.W   0x6(SP), R13
   \   00000E   0F4D         MOV.W   R13, R15
   \   000010   1001         RETA
    295          /*************************************************************************
    296          *  º¯ÊýÃû³Æ£º
    297          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸öµã
    298          *  ²ÎÊýËµÃ÷£º
    299          *  º¯Êý·µ»Ø£º
    300          *  Ê¹ÓÃÊ¾Àý£º
    301          *************************************************************************/ 

   \                                 In  segment CODE, align 2, keep-with-next
    302          void LCD_Draw_Dot(uint16_t x,uint16_t y,uint16_t color_dat)
   \                     LCD_Draw_Dot:
    303          {
   \   000000   0A14         PUSHM.A #0x1, R10
   \   000002   0A4E         MOV.W   R14, R10
    304            LCD_PTLON(x,y,x,y); 
   \   000004   0F4D         MOV.W   R13, R15
   \   000006   0E4C         MOV.W   R12, R14
   \   000008   ........     CALLA   #LCD_SetPos
    305            LCD_WR_WORD(color_dat);
   \   00000C   0C4A         MOV.W   R10, R12
   \   00000E   ........     CALLA   #LCD_Write_DATA16
    306          }
   \   000012   0A16         POPM.A  #0x1, R10
   \   000014   1001         RETA
    307          /*************************************************************************
    308          *  º¯ÊýÃû³Æ£º
    309          *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨ÇøÓòÏÔÊ¾Ò»¸±Í¼Ïñ
    310          *  ²ÎÊýËµÃ÷£º
    311          *  º¯Êý·µ»Ø£º
    312          *  Ê¹ÓÃÊ¾Àý£º
    313          *************************************************************************/ 

   \                                 In  segment CODE, align 2, keep-with-next
    314          void LCD_Show_Picture(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t pic[])
   \                     LCD_Show_Picture:
    315          {
   \   000000   5B14         PUSHM.A #0x6, R11
   \   000002   064C         MOV.W   R12, R6
   \   000004   0B4D         MOV.W   R13, R11
   \   000006   084E         MOV.W   R14, R8
   \   000008   094F         MOV.W   R15, R9
    316            unsigned int i,j,k=0;
   \   00000A   0A43         MOV.W   #0x0, R10
    317          
    318            LCD_PTLON(xs,ys,xe,ye);
   \   00000C   ........     CALLA   #LCD_SetPos
    319            for(i=0;i<ye-ys;i++)
   \   000010   098B         SUB.W   R11, R9
   \   000012   1224         JEQ     ??LCD_Show_Picture_2
   \   000014   0886         SUB.W   R6, R8
   \   000016   3B011C00     MOVA    0x1c(SP), R11
    320            { 
    321              for(j=0;j<xe-xs;j++)
   \                     ??LCD_Show_Picture_1:
   \   00001A   0893         CMP.W   #0x0, R8
   \   00001C   0B24         JEQ     ??LCD_Show_Picture_3
   \   00001E   0648         MOV.W   R8, R6
    322              {
    323                LCD_WR_WORD(pic[k++]);	
   \                     ??LCD_Show_Picture_0:
   \   000020   0E4A         MOV.W   R10, R14
   \   000022   EE0E         ADDA    R14, R14
   \   000024   CF0B         MOVA    R11, R15
   \   000026   EF0E         ADDA    R14, R15
   \   000028   2C4F         MOV.W   @R15, R12
   \   00002A   ........     CALLA   #LCD_Write_DATA16
   \   00002E   1A53         ADD.W   #0x1, R10
    324              }
   \   000030   3653         ADD.W   #0xffff, R6
   \   000032   F623         JNE     ??LCD_Show_Picture_0
    325            }
   \                     ??LCD_Show_Picture_3:
   \   000034   3953         ADD.W   #0xffff, R9
   \   000036   F123         JNE     ??LCD_Show_Picture_1
    326          }
   \                     ??LCD_Show_Picture_2:
   \   000038   5616         POPM.A  #0x6, R11
   \   00003A   1001         RETA
    327          /*************************************************************************
    328          *  º¯ÊýÃû³Æ£ºLCD_Printf_8x16
    329          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    330          *  ²ÎÊýËµÃ÷£º
    331          *  º¯Êý·µ»Ø£ºÎÞ
    332          *  Ê¹ÓÃÊ¾Àý£ºLCD_Printf_8x16("Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
    333          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
    334          void LCD_Printf_8x16(uint16_t x,uint16_t y,const char * fmt,...)
   \                     LCD_Printf_8x16:
    335          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   31800600     SUB.W   #0x6, SP
   \   000006   0B4C         MOV.W   R12, R11
   \   000008   084D         MOV.W   R13, R8
    336            static char LCD_String[256];
    337            va_list ap;
    338            va_start(ap,fmt);
   \   00000A   0F41         MOV.W   SP, R15
   \   00000C   3F502A00     ADD.W   #0x2a, R15
   \   000010   710F0200     MOVA    R15, 0x2(SP)
    339            vsprintf(LCD_String,fmt,ap);
   \   000014   ........     MOVA    #??LCD_String, R9
   \   000018   0312         PUSH.W  #0x0
   \   00001A   0F12         PUSH.W  R15
   \   00001C   CD0E         MOVA    R14, R13
   \   00001E   CC09         MOVA    R9, R12
   \   000020   ........     CALLA   #vsprintf
    340            uint8_t lastposition=0;
   \   000024   4A43         MOV.B   #0x0, R10
    341            int length=strlen(LCD_String);
   \   000026   CC09         MOVA    R9, R12
   \   000028   ........     CALLA   #strlen
   \   00002C   044C         MOV.W   R12, R4
    342            int TEXT_SIZE=LCD_W/8;
    343            for(int i=0;i <= length;i++)
   \   00002E   0743         MOV.W   #0x0, R7
   \   000030   2152         ADD.W   #0x4, SP
   \   000032   0C93         CMP.W   #0x0, R12
   \   000034   5D38         JL      ??LCD_Printf_8x16_3
   \   000036   71090200     MOVA    R9, 0x2(SP)
    344            {
    345              if(LCD_String[i] == '\n')
   \                     ??LCD_Printf_8x16_2:
   \   00003A   3F010200     MOVA    0x2(SP), R15
   \   00003E   FF900A000000 CMP.B   #0xa, 0(R15)
   \   000044   4C20         JNE     ??LCD_Printf_8x16_4
    346              {
    347                uint8_t position=i;
   \   000046   C1470000     MOV.B   R7, 0(SP)
   \   00004A   4647         MOV.B   R7, R6
   \   00004C   068A         SUB.W   R10, R6
   \   00004E   C509         MOVA    R9, R5
   \   000050   E50A         ADDA    R10, R5
   \   000052   153C         JMP     ??LCD_Printf_8x16_5
    348                while(position>lastposition)
    349                {
    350                  if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
    351                  {
    352                     LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
   \                     ??LCD_Printf_8x16_0:
   \   000054   ....1212.... PUSHX.W &BACK_COLOR
   \   00005A   ....1212.... PUSHX.W &POINT_COLOR
   \   000060   3F401E00     MOV.W   #0x1e, R15
   \   000064   CE05         MOVA    R5, R14
   \   000066   ........     CALLA   #??Subroutine15_0
    353                     y+=16;//»»ÐÐ
   \                     ??CrossCallReturnLabel_21:
   \   00006A   38501000     ADD.W   #0x10, R8
    354                     x=0;
   \   00006E   0B43         MOV.W   #0x0, R11
    355                     lastposition+=TEXT_SIZE;
   \   000070   7A501E00     ADD.B   #0x1e, R10
   \   000074   A5001E00     ADDA    #0x1e, R5
   \   000078   3650E2FF     ADD.W   #0xffe2, R6
   \   00007C   2152         ADD.W   #0x4, SP
    356                  }
   \                     ??LCD_Printf_8x16_5:
   \   00007E   6A91         CMP.B   @SP, R10
   \   000080   252C         JC      ??LCD_Printf_8x16_6
   \   000082   36901F00     CMP.W   #0x1f, R6
   \   000086   E637         JGE     ??LCD_Printf_8x16_0
    357                  else
    358                  {
    359                    LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
   \   000088   6641         MOV.B   @SP, R6
   \   00008A   068A         SUB.W   R10, R6
   \   00008C   ....1212.... PUSHX.W &BACK_COLOR
   \   000092   ....1212.... PUSHX.W &POINT_COLOR
   \   000098   0F46         MOV.W   R6, R15
   \   00009A   ........     CALLA   #?Subroutine10
    360                    for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \                     ??CrossCallReturnLabel_23:
   \   00009E   560A         RLAM.W  #0x3, R6
   \   0000A0   0B56         ADD.W   R6, R11
   \   0000A2   2152         ADD.W   #0x4, SP
   \   0000A4   3B90F000     CMP.W   #0xf0, R11
   \   0000A8   112C         JC      ??LCD_Printf_8x16_6
    361                    {
    362                       LCD_Show_Char8X16(x,y,' ',POINT_COLOR,BACK_COLOR);
   \                     ??LCD_Printf_8x16_1:
   \   0000AA   ....1212.... PUSHX.W &BACK_COLOR
   \   0000B0   ....1F42.... MOVX.W  &POINT_COLOR, R15
   \   0000B6   7E402000     MOV.B   #0x20, R14
   \   0000BA   0D48         MOV.W   R8, R13
   \   0000BC   0C4B         MOV.W   R11, R12
   \   0000BE   ........     CALLA   #LCD_Show_Char8X16
    363                    }
   \   0000C2   3B52         ADD.W   #0x8, R11
   \   0000C4   2153         ADD.W   #0x2, SP
   \   0000C6   3B90F000     CMP.W   #0xf0, R11
   \   0000CA   EF2B         JNC     ??LCD_Printf_8x16_1
    364                    break;
    365                  }
    366                } 
    367                lastposition=position+1;
   \                     ??LCD_Printf_8x16_6:
   \   0000CC   6A41         MOV.B   @SP, R10
   \   0000CE   5A53         ADD.B   #0x1, R10
    368                //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
    369                x=0;
   \   0000D0   0B43         MOV.W   #0x0, R11
    370                y+=16;
   \   0000D2   38501000     ADD.W   #0x10, R8
    371                if(y>=LCD_H)y=0;
   \   0000D6   38904001     CMP.W   #0x140, R8
   \   0000DA   0128         JNC     ??LCD_Printf_8x16_4
   \   0000DC   0843         MOV.W   #0x0, R8
    372              }
    373            }
   \                     ??LCD_Printf_8x16_4:
   \   0000DE   1753         ADD.W   #0x1, R7
   \   0000E0   3F010200     MOVA    0x2(SP), R15
   \   0000E4   AF000100     ADDA    #0x1, R15
   \   0000E8   710F0200     MOVA    R15, 0x2(SP)
   \   0000EC   0497         CMP.W   R7, R4
   \   0000EE   A537         JGE     ??LCD_Printf_8x16_2
    374            if(lastposition<length)
   \                     ??LCD_Printf_8x16_3:
   \   0000F0   4F4A         MOV.B   R10, R15
   \   0000F2   0F94         CMP.W   R4, R15
   \   0000F4   0B34         JGE     ??LCD_Printf_8x16_7
    375              LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
   \   0000F6   ....1212.... PUSHX.W &BACK_COLOR
   \   0000FC   ....1212.... PUSHX.W &POINT_COLOR
   \   000102   048F         SUB.W   R15, R4
   \   000104   0F44         MOV.W   R4, R15
   \   000106   ........     CALLA   #?Subroutine10
   \                     ??CrossCallReturnLabel_22:
   \   00010A   2152         ADD.W   #0x4, SP
    376            va_end(ap);
    377            free(LCD_String);
   \                     ??LCD_Printf_8x16_7:
   \   00010C   CC09         MOVA    R9, R12
   \   00010E   ........     CALLA   #__data20_free
    378          }
   \   000112   31500600     ADD.W   #0x6, SP
   \   000116   7416         POPM.A  #0x8, R11
   \   000118   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine10:
   \   000000   CE09         MOVA    R9, R14
   \   000002   EE0A         ADDA    R10, R14
   \   000004                REQUIRE ??Subroutine15_0
   \   000004                // Fall through to label ??Subroutine15_0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ??Subroutine15_0:
   \   000000   0D48         MOV.W   R8, R13
   \   000002   0C4B         MOV.W   R11, R12
   \   000004   ........     BRA     #LCD_Show_NChar8X16

   \                                 In  segment DATA20_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??LCD_String:
   \   000000                DS8 256
    379          /*************************************************************************
    380          *  º¯ÊýÃû³Æ£ºLCD_Printf
    381          *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
    382          *  ²ÎÊýËµÃ÷£º
    383          *  º¯Êý·µ»Ø£ºÎÞ
    384          *  Ê¹ÓÃÊ¾Àý£ºLCD_Printf"Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
    385          *************************************************************************/  

   \                                 In  segment CODE, align 2, keep-with-next
    386          void LCD_Printf(const char * fmt,...)
   \                     LCD_Printf:
    387          {
   \   000000   7B14         PUSHM.A #0x8, R11
   \   000002   3182         SUB.W   #0x8, SP
    388            static char LCD_String[256];
    389            static uint16_t x=0,y=0;
    390            va_list ap;
    391            va_start(ap,fmt);
   \   000004   0F41         MOV.W   SP, R15
   \   000006   3F502C00     ADD.W   #0x2c, R15
   \   00000A   710F0400     MOVA    R15, 0x4(SP)
    392            vsprintf(LCD_String,fmt,ap);
   \   00000E   ........     MOVA    #??LCD_String_1, R6
   \   000012   0312         PUSH.W  #0x0
   \   000014   0F12         PUSH.W  R15
   \   000016   CD0C         MOVA    R12, R13
   \   000018   CC06         MOVA    R6, R12
   \   00001A   ........     CALLA   #vsprintf
    393            uint8_t lastposition=0;
   \   00001E   4A43         MOV.B   #0x0, R10
    394            int length=strlen(LCD_String);          
   \   000020   CC06         MOVA    R6, R12
   \   000022   ........     CALLA   #strlen
   \   000026   044C         MOV.W   R12, R4
    395            int TEXT_SIZE=LCD_W/8;
    396            for(int i=0;i<=length;i++)
   \   000028   81430600     MOV.W   #0x0, 0x6(SP)
   \   00002C   2152         ADD.W   #0x4, SP
   \   00002E   0C93         CMP.W   #0x0, R12
   \   000030   6B38         JL      ??LCD_Printf_9
   \   000032   71060400     MOVA    R6, 0x4(SP)
   \   000036   ........     CALLA   #?Subroutine9
    397            {
    398              if(LCD_String[i]=='\n')     //Óöµ½»»ÐÐ·û
   \                     ??LCD_Printf_2:
   \   00003A   3F010400     MOVA    0x4(SP), R15
   \   00003E   FF900A000000 CMP.B   #0xa, 0(R15)
   \   000044   5320         JNE     ??LCD_Printf_10
    399              {
    400                uint8_t position=i;
   \   000046   D14102000000 MOV.B   0x2(SP), 0(SP)
   \   00004C   6741         MOV.B   @SP, R7
   \   00004E   078A         SUB.W   R10, R7
   \   000050   C506         MOVA    R6, R5
   \   000052   E50A         ADDA    R10, R5
   \   000054   173C         JMP     ??LCD_Printf_11
    401                while(position>lastposition)  //ÈôÓÐÒ»¶Î×Ö·û´®Ã»ÓÐÏÔÊ¾£¬ÔòÏÔÊ¾ÍêÎªÖ¹
    402                {
    403                  if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
    404                  {
    405                     LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
   \                     ??LCD_Printf_0:
   \   000056   2912         PUSH.W  @R9
   \   000058   ....1212.... PUSHX.W &POINT_COLOR
   \   00005E   3F401E00     MOV.W   #0x1e, R15
   \   000062   CE05         MOVA    R5, R14
   \   000064   ........     CALLA   #?Subroutine7
    406                     y+=16;//»»ÐÐ
   \                     ??CrossCallReturnLabel_9:
   \   000068   B85010000000 ADD.W   #0x10, 0(R8)
    407                     if(y>=LCD_H)
   \   00006E   2152         ADD.W   #0x4, SP
   \   000070   ........     CALLA   #?Subroutine6
    408                     {
    409                       y=0;
    410                       LCD_Display_Full(BACK_COLOR);
    411                     }
    412                     x=0;
   \                     ??CrossCallReturnLabel_6:
   \   000074   8B430000     MOV.W   #0x0, 0(R11)
    413                     lastposition+=TEXT_SIZE;
   \   000078   7A501E00     ADD.B   #0x1e, R10
   \   00007C   A5001E00     ADDA    #0x1e, R5
   \   000080   3750E2FF     ADD.W   #0xffe2, R7
    414                  }
   \                     ??LCD_Printf_11:
   \   000084   6A91         CMP.B   @SP, R10
   \   000086   202C         JC      ??LCD_Printf_12
   \   000088   37901F00     CMP.W   #0x1f, R7
   \   00008C   E437         JGE     ??LCD_Printf_0
    415                  else
    416                  {
    417                    LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
   \   00008E   6741         MOV.B   @SP, R7
   \   000090   078A         SUB.W   R10, R7
   \   000092   2912         PUSH.W  @R9
   \   000094   ....1212.... PUSHX.W &POINT_COLOR
   \   00009A   0F47         MOV.W   R7, R15
   \   00009C   CE06         MOVA    R6, R14
   \   00009E   EE0A         ADDA    R10, R14
   \   0000A0   ........     CALLA   #?Subroutine7
    418                    for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \                     ??CrossCallReturnLabel_8:
   \   0000A4   570A         RLAM.W  #0x3, R7
   \   0000A6   8B570000     ADD.W   R7, 0(R11)
   \   0000AA   2152         ADD.W   #0x4, SP
   \   0000AC   093C         JMP     ??LCD_Printf_13
    419                    {
    420                       LCD_Show_Char8X16(x,y,' ',POINT_COLOR,BACK_COLOR);
   \                     ??LCD_Printf_1:
   \   0000AE   2912         PUSH.W  @R9
   \   0000B0   ........     CALLA   #?Subroutine11
    421                    }
   \                     ??CrossCallReturnLabel_11:
   \   0000B4   2C4B         MOV.W   @R11, R12
   \   0000B6   ........     CALLA   #LCD_Show_Char8X16
   \   0000BA   BB520000     ADD.W   #0x8, 0(R11)
   \   0000BE   2153         ADD.W   #0x2, SP
   \                     ??LCD_Printf_13:
   \   0000C0   BB90F0000000 CMP.W   #0xf0, 0(R11)
   \   0000C6   F32B         JNC     ??LCD_Printf_1
    422                    break;
    423                  }
    424                } 
    425                lastposition=position+1;
   \                     ??LCD_Printf_12:
   \   0000C8   6A41         MOV.B   @SP, R10
   \   0000CA   5A53         ADD.B   #0x1, R10
    426                //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
    427                x=0;
   \   0000CC   8B430000     MOV.W   #0x0, 0(R11)
    428                y+=16;
   \   0000D0   B85010000000 ADD.W   #0x10, 0(R8)
    429                if(y>=LCD_H)
   \   0000D6   B89040010000 CMP.W   #0x140, 0(R8)
   \   0000DC   0728         JNC     ??LCD_Printf_10
    430                {
    431                  y=0;
   \   0000DE   88430000     MOV.W   #0x0, 0(R8)
    432                  LCD_Display_Full(BACK_COLOR);
   \   0000E2   ....1C42.... MOVX.W  &BACK_COLOR, R12
   \   0000E8   ........     CALLA   #LCD_Display_Full
    433                }
    434              }
    435            }
   \                     ??LCD_Printf_10:
   \   0000EC   1F410200     MOV.W   0x2(SP), R15
   \   0000F0   1F53         ADD.W   #0x1, R15
   \   0000F2   814F0200     MOV.W   R15, 0x2(SP)
   \   0000F6   3F010400     MOVA    0x4(SP), R15
   \   0000FA   AF000100     ADDA    #0x1, R15
   \   0000FE   710F0400     MOVA    R15, 0x4(SP)
   \   000102   14910200     CMP.W   0x2(SP), R4
   \   000106   9937         JGE     ??LCD_Printf_2
    436            if(lastposition<length)
   \                     ??LCD_Printf_9:
   \   000108   4F4A         MOV.B   R10, R15
   \   00010A   0F94         CMP.W   R4, R15
   \   00010C   2934         JGE     ??LCD_Printf_14
    437            {
    438              LCD_Show_NChar8X16(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
   \   00010E   048F         SUB.W   R15, R4
   \   000110   ........     CALLA   #?Subroutine9
   \                     ??CrossCallReturnLabel_10:
   \   000114   2912         PUSH.W  @R9
   \   000116   ....1212.... PUSHX.W &POINT_COLOR
   \   00011C   0F44         MOV.W   R4, R15
   \   00011E   E60A         ADDA    R10, R6
   \   000120   CE06         MOVA    R6, R14
   \   000122   ........     CALLA   #?Subroutine7
    439              x+=(length-lastposition)*8;
   \                     ??CrossCallReturnLabel_7:
   \   000126   540A         RLAM.W  #0x3, R4
   \   000128   8B540000     ADD.W   R4, 0(R11)
   \   00012C   2152         ADD.W   #0x4, SP
   \   00012E   083C         JMP     ??LCD_Printf_6
    440              while(x>=LCD_W)
    441              {
    442                 y+=16;
   \                     ??LCD_Printf_3:
   \   000130   B85010000000 ADD.W   #0x10, 0(R8)
    443                 x-=LCD_W;
   \   000136   BB5010FF0000 ADD.W   #0xff10, 0(R11)
    444                 if(y>=LCD_H)
   \   00013C   ........     CALLA   #?Subroutine6
    445                 {
    446                   y=0;
    447                   LCD_Display_Full(BACK_COLOR);
    448                 }
    449              }
   \                     ??LCD_Printf_6:
   \   000140   BB90F0000000 CMP.W   #0xf0, 0(R11)
   \   000146   F42F         JC      ??LCD_Printf_3
    450              for(int i=x;i < LCD_W;i++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
   \   000148   2B4B         MOV.W   @R11, R11
    451              {
    452                LCD_Show_Char8X16(i,y,' ',POINT_COLOR,BACK_COLOR);
   \                     ??LCD_Printf_4:
   \   00014A   2912         PUSH.W  @R9
   \   00014C   ........     CALLA   #?Subroutine11
    453              }
   \                     ??CrossCallReturnLabel_12:
   \   000150   0C4B         MOV.W   R11, R12
   \   000152   ........     CALLA   #LCD_Show_Char8X16
   \   000156   1B53         ADD.W   #0x1, R11
   \   000158   2153         ADD.W   #0x2, SP
   \   00015A   3B90F000     CMP.W   #0xf0, R11
   \   00015E   F53B         JL      ??LCD_Printf_4
    454            }
    455            va_end(ap);
    456          }
   \                     ??LCD_Printf_14:
   \   000160                REQUIRE ?Subroutine0
   \   000160                // Fall through to label ?Subroutine0

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine11:
   \   000000   ....1F42.... MOVX.W  &POINT_COLOR, R15
   \   000006   7E402000     MOV.B   #0x20, R14
   \   00000A   2D48         MOV.W   @R8, R13
   \   00000C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine9:
   \   000000   ........     MOVA    #??x, R11
   \   000004   ........     MOVA    #??y, R8
   \   000008   ........     MOVA    #BACK_COLOR, R9
   \   00000C   1001         RETA

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine7:
   \   000000   2D48         MOV.W   @R8, R13
   \   000002   2C4B         MOV.W   @R11, R12
   \   000004   ........     BRA     #LCD_Show_NChar8X16

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine6:
   \   000000   B89040010000 CMP.W   #0x140, 0(R8)
   \   000006   0528         JNC     ??LCD_Printf_7
   \   000008   88430000     MOV.W   #0x0, 0(R8)
   \   00000C   2C49         MOV.W   @R9, R12
   \   00000E   ........     CALLA   #LCD_Display_Full
   \                     ??LCD_Printf_7:
   \   000012   1001         RETA

   \                                 In  segment DATA20_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??LCD_String_1:
   \   000000                DS8 256

   \                                 In  segment DATA20_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??x:
   \   000000                DS8 2

   \                                 In  segment DATA20_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \                     ??y:
   \   000000                DS8 2

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine1:
   \   000000   0F46         MOV.W   R6, R15
   \   000002   0E4C         MOV.W   R12, R14
   \   000004   0D46         MOV.W   R6, R13
   \   000006                REQUIRE ?Subroutine14
   \   000006                // Fall through to label ?Subroutine14

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine14:
   \   000000   ........     CALLA   #LCD_SetPos
   \   000004   0C4B         MOV.W   R11, R12
   \   000006   ........     BRA     #LCD_Write_DATA16

   \                                 In  segment DATA20_ID, align 2, align-sorted
   \                     `?<Initializer for POINT_COLOR>`:
   \   000000   00F8         DC16 63488

   \                                 In  segment DATA20_ID, align 2, align-sorted
   \                     `?<Initializer for BACK_COLOR>`:
   \   000000   FFFF         DC16 65535

   \                                 In  segment DATA20_C, align 2, align-sorted
   \                     `?<Constant {(4.90000009E-1F), (5.00000007E-2F)`:
   \   000000   48E1FA3ECDCC DC32 3EFAE148H, 3D4CCCCDH, 3BA3D70AH, 3A03126FH, 3851B717H, 36A7C5ACH
   \            4C3D0AD7A33B
   \            6F12033A17B7
   \            5138ACC5A736

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      20  LCD_Display_Full
            20 -> LCD_SetPos
            20 -> LCD_Write_DATA16
      46  LCD_Draw_Circle
            44 -> LCD_SetPos
            44 -> LCD_Write_DATA16
       8  LCD_Draw_Dot
             8 -> LCD_SetPos
             8 -> LCD_Write_DATA16
      44  LCD_Draw_Line
            44 -> LCD_SetPos
            44 -> LCD_Write_DATA16
      20  LCD_Draw_Part
            20 -> LCD_SetPos
            20 -> LCD_Write_DATA16
      36  LCD_Draw_Rectangle
            30 -> LCD_Draw_Line
            32 -> LCD_Draw_Line
            34 -> LCD_Draw_Line
            36 -> LCD_Draw_Line
      48  LCD_Printf
            44 -> LCD_Display_Full
            46 -> LCD_Show_Char8X16
            48 -> LCD_Show_NChar8X16
            48 -> strlen
            48 -> vsprintf
      46  LCD_Printf_8x16
            44 -> LCD_Show_Char8X16
            46 -> LCD_Show_NChar8X16
            42 -> __data20_free
            46 -> strlen
            46 -> vsprintf
      28  LCD_Show_Char8X16
            28 -> LCD_SetPos
            28 -> LCD_Write_DATA16
      82  LCD_Show_FloatNumber8X16
            82 -> LCD_Show_String8X16
            80 -> _Add32f
            80 -> _Cast32fto32s
            80 -> _Cast32fto32u
            80 -> _Cast32sto32f
            80 -> _Cast32uto32f
            80 -> _CmpGe32f
            80 -> _CmpLt32f
            80 -> _Div32f
            80 -> _Mul32f
            80 -> _Sub32f
      48  LCD_Show_IntNumber8X16
            48 -> LCD_Show_String8X16
      30  LCD_Show_NChar8X16
            30 -> LCD_Show_Char8X16
      28  LCD_Show_Picture
            28 -> LCD_SetPos
            28 -> LCD_Write_DATA16
      30  LCD_Show_String8X16
            30 -> LCD_Show_Char8X16


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant {(4.90000009E-1F), (5.00000007E-2F)
       2  ?<Initializer for BACK_COLOR>
       2  ?<Initializer for POINT_COLOR>
       8  ??Subroutine15_0
       6  ?Subroutine0
       6  ?Subroutine1
       4  ?Subroutine10
      14  ?Subroutine11
      14  ?Subroutine12
      26  ?Subroutine13
      10  ?Subroutine14
      18  ?Subroutine2
      18  ?Subroutine3
      18  ?Subroutine4
      20  ?Subroutine6
       8  ?Subroutine7
      14  ?Subroutine8
      14  ?Subroutine9
       2  BACK_COLOR
      46  LCD_Display_Full
     270  LCD_Draw_Circle
      22  LCD_Draw_Dot
     188  LCD_Draw_Line
      52  LCD_Draw_Part
      70  LCD_Draw_Rectangle
     352  LCD_Printf
     282  LCD_Printf_8x16
      96  LCD_Show_Char8X16
     326  LCD_Show_FloatNumber8X16
     148  LCD_Show_IntNumber8X16
      52  LCD_Show_NChar8X16
      60  LCD_Show_Picture
      48  LCD_Show_String8X16
     256  LCD_String
     256  LCD_String
       2  POINT_COLOR
    1140  asc2_1206
    1520  asc2_1608
    1520  asc2_1608c
     480  hanzi
     640  hanzi16x16
      41  hanzi_Idx
       2  x
       2  y

 
 2 210 bytes in segment CODE
 5 365 bytes in segment DATA20_C
     4 bytes in segment DATA20_I
     4 bytes in segment DATA20_ID
   516 bytes in segment DATA20_Z
 
 2 210 bytes of CODE  memory
 5 369 bytes of CONST memory
   520 bytes of DATA  memory

Errors: none
Warnings: none
