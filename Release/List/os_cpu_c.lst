###############################################################################
#                                                                             #
#                                                       06/Jun/2016  16:42:29 #
# IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430         #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  large                                                   #
#    Source file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\PORT\os_cpu_c.c                       #
#    Command line  =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\PORT\os_cpu_c.c -D NDEBUG -D          #
#                     RAM_VECTOR -lC C:\Users\615\Desktop\MSP430\MSP430F5529¿ #
#                     âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\List\ -lA                 #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\ -o C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Release\Obj\             #
#                     -D__MSP430F5529__ -e --double=32 --dlib_config          #
#                     "D:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.4 Evaluation\430\LIB\DLIB\dl430xlfn.h" -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\ -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Ê #
#                     ý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\ -I C:\Users\615\Desktop\MSP430\MSP4 #
#                     30F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Drivers\src\USB\ -I       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_config\ -I                   #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_User\ -I                     #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_HID_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Drivers\src\USB\USB_API\USB_MSC_API\ -I          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\KEY\ -I C:\Users\615\Desktop\MSP430\MSP #
#                     430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\LED\ -I         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\12864\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\HardWare\oled\ -I      #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\inc\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\mpu6050\src\ -I                         #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\inc\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\nokia5110\src\ -I                       #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                          #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\LCD_API\ -I                             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\2.2TFT\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\HardWare\delay\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\System\inc\ -I C:\Users\615\Desktop\MSP430\MSP43 #
#                     0F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\System\src\ -I             #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\User\ -I C:\Users\615\Desktop\MSP430\MSP430F5529 #
#                     ¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\User\USER\ -I                    #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\uCOSII\App\ -I C:\Users\615\Desktop\MSP430\M #
#                     SP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\CONFIHG\    #
#                     -I C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ #
#                     \¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                           #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\UCOSII\CORE\ -I                              #
#                     C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Lib\FatFs\ -I C:\Users\615\Desktop\MSP430\MSP430 #
#                     F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\FatFs\option\           #
#                     --core=430X --data_model=large -Oh --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\List\os_cpu_c.lst                        #
#    Object file   =  C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤ #
#                     ³ÌÄ£°å\Release\Obj\os_cpu_c.r43                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII\PORT\os_cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *
      6          *                              (c) Copyright 2002, Micrium, Inc., Weston, FL
      7          *                                           All Rights Reserved
      8          *
      9          *                                                TI MSP430
     10          *
     11          *
     12          * File         : OS_CPU_C.C
     13          * By           : Jian Chen (yenger@hotmail.com)
     14          *                Jean J. Labrosse
     15          * Compiler     : IAR System Embedded Workbench for TI MSP430 V1.26A
     16          *********************************************************************************************************
     17          */
     18          
     19          #define  OS_CPU_GLOBALS
     20          #include "ucos_ii.h"

  typedef unsigned char  BOOLEAN;
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",31  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned char  INT8U;                    /* Unsigned  8 bit quantity                           */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",32  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed   char  INT8S;                    /* Signed    8 bit quantity                           */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",33  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int   INT16U;                   /* Unsigned 16 bit quantity                           */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",34  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed   int   INT16S;                   /* Signed   16 bit quantity                           */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",35  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long  INT32U;                   /* Unsigned 32 bit quantity                           */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",36  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed   long  INT32S;                   /* Signed   32 bit quantity                           */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",37  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef float          FP32;                     /* Single precision floating point                    */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",38  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef double         FP64;                     /* Double precision floating point                    */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",39  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int   OS_STK;                   /* Each stack entry is 16-bit wide                    */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",41  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int   OS_CPU_SR;                /* Define size of CPU status register (SR = 16 bits)  */
                         ^
"C:\Users\615\Desktop\MSP430\MSP430F5529¿âº¯Êý2.5\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\os_cpu.h",42  Warning[Pe301]: 
          typedef name has already been declared (with same type)

   \                                 In  segment DATA20_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
   \   unsigned int *__data20 OSISRStkPtr
   \                     OSISRStkPtr:
   \   000000                DS8 4
     21          
     22          /*
     23          *********************************************************************************************************
     24          *                                       OS INITIALIZATION HOOK
     25          *                                            (BEGINNING)
     26          *
     27          * Description: This function is called by OSInit() at the beginning of OSInit().
     28          *
     29          * Arguments  : none
     30          *
     31          * Note(s)    : 1) Interrupts should be disabled during this call.
     32          *********************************************************************************************************
     33          */
     34          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In  segment CODE, align 2
     35          void  OSInitHookBegin (void)
   \                     OSInitHookBegin:
     36          {
     37          }
   \   000000   1001         RETA
     38          #endif
     39          
     40          /*
     41          *********************************************************************************************************
     42          *                                       OS INITIALIZATION HOOK
     43          *                                               (END)
     44          *
     45          * Description: This function is called by OSInit() at the end of OSInit().
     46          *
     47          * Arguments  : none
     48          *
     49          * Note(s)    : 1) Interrupts should be disabled during this call.
     50          *********************************************************************************************************
     51          */
     52          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In  segment CODE, align 2
     53          void  OSInitHookEnd (void)
   \                     OSInitHookEnd:
     54          {
     55          }
   \   000000   1001         RETA
     56          #endif
     57          
     58          /*$PAGE*/
     59          /*
     60          *********************************************************************************************************
     61          *                                          TASK CREATION HOOK
     62          *
     63          * Description: This function is called when a task is created.
     64          *
     65          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
     66          *
     67          * Note(s)    : 1) Interrupts are disabled during this call.
     68          *********************************************************************************************************
     69          */
     70          #if OS_CPU_HOOKS_EN > 0 

   \                                 In  segment CODE, align 2
     71          void  OSTaskCreateHook (OS_TCB *ptcb)
   \                     OSTaskCreateHook:
     72          {
     73              ptcb = ptcb;                       /* Prevent compiler warning                                     */
     74          }
   \   000000   1001         RETA
     75          #endif
     76          
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                           TASK DELETION HOOK
     81          *
     82          * Description: This function is called when a task is deleted.
     83          *
     84          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
     85          *
     86          * Note(s)    : 1) Interrupts are disabled during this call.
     87          *********************************************************************************************************
     88          */
     89          #if OS_CPU_HOOKS_EN > 0 

   \                                 In  segment CODE, align 2
     90          void  OSTaskDelHook (OS_TCB *ptcb)
   \                     OSTaskDelHook:
     91          {
     92              ptcb = ptcb;                       /* Prevent compiler warning                                     */
     93          }
   \   000000   1001         RETA
     94          #endif
     95          
     96          /*
     97          *********************************************************************************************************
     98          *                                             IDLE TASK HOOK
     99          *
    100          * Description: This function is called by the idle task.  This hook has been added to allow you to do  
    101          *              such things as STOP the CPU to conserve power.
    102          *
    103          * Arguments  : none
    104          *
    105          * Note(s)    : 1) Interrupts are enabled during this call.
    106          *********************************************************************************************************
    107          */
    108          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251

   \                                 In  segment CODE, align 2
    109          void  OSTaskIdleHook (void)
   \                     OSTaskIdleHook:
    110          {
    111          #if 0
    112              LPM0;                                         /* Enter low power mode                              */
    113          #endif    
    114          }
   \   000000   1001         RETA
    115          #endif
    116          
    117          /*
    118          *********************************************************************************************************
    119          *                                           STATISTIC TASK HOOK
    120          *
    121          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your 
    122          *              application to add functionality to the statistics task.
    123          *
    124          * Arguments  : none
    125          *********************************************************************************************************
    126          */
    127          
    128          #if OS_CPU_HOOKS_EN > 0 

   \                                 In  segment CODE, align 2
    129          void  OSTaskStatHook (void)
   \                     OSTaskStatHook:
    130          {
    131          }
   \   000000   1001         RETA
    132          #endif
    133          
    134          /*$PAGE*/
    135          /*
    136          *********************************************************************************************************
    137          *                                        INITIALIZE A TASK'S STACK
    138          *
    139          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
    140          *              stack frame of the task being created.  This function is highly processor specific.
    141          *
    142          * Arguments  : task          is a pointer to the task code
    143          *
    144          *              pdata         is a pointer to a user supplied data area that will be passed to the task
    145          *                            when the task first executes.
    146          *
    147          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
    148          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then 
    149          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
    150          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
    151          *                            of the stack.
    152          *
    153          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
    154          *                            (see uCOS_II.H for OS_TASK_OPT_???).
    155          *
    156          * Returns    : Always returns the location of the new top-of-stack' once the processor registers have
    157          *              been placed on the stack in the proper order.
    158          *
    159          * Note(s)    : The register passing convention for the IAR compiler is that the LEFTMOST two parameters
    160          *              are passed in registers:
    161          *              1st parameter:  R12 for a 16-bit value or,  R13:R12 for a 32-bit value
    162          *              2nd parameter:  R14 for a 16-bit value or,  R15:R14 for a 32-bit value
    163          *
    164          *              OSTaskStkInit() thus needs to place 'p_arg' in R12 since when the task is started, 'p_arg'
    165          *              is the FIRST argument of the task declaration:
    166          *
    167          *                 void  Task (void *p_arg)
    168          *                 {
    169          *                 }
    170          *********************************************************************************************************
    171          */
    172          

   \                                 In  segment CODE, align 2
    173          OS_STK  *OSTaskStkInit (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT16U opt)
   \                     OSTaskStkInit:
    174          {
   \   000000   1B14         PUSHM.A #0x2, R11
    175              INT16U  *top;
    176          
    177              opt    = opt;                 
    178              top    = (INT16U *)ptos;
    179              top--;  
   \   000002   8F0FFEFF     MOVA    #0xffffe, R15
   \   000006   EE0F         ADDA    R15, R14
    180              *top = (INT16U)(((INT32U)task)&0xffff);//*top = ((INT32U)task)&0xffff;
   \   000008   8E4C0000     MOV.W   R12, 0(R14)
    181              top--;
   \   00000C   EE0F         ADDA    R15, R14
    182              *top = (INT16U) ( ( ((INT32U)task) & 0x000f0000 ) >>4 );
    183              *top |=  (INT16U)0x0008;                        //ÈÎÎñ³õÊ¼ÅäÖÃÎªÔÊÐíÖÐ¶Ï
   \   00000E   0C14         PUSHM.A #0x1, R12
   \   000010   1A17         POPM.W  #0x2, R11
   \   000012   5B03         RRUM.W  #0x1, R11
   \   000014   0A10         RRC.W   R10
   \   000016   0B11         RRA.W   R11
   \   000018   0A10         RRC.W   R10
   \   00001A   0B11         RRA.W   R11
   \   00001C   0A10         RRC.W   R10
   \   00001E   0B11         RRA.W   R11
   \   000020   0A10         RRC.W   R10
   \   000022   3AF000F0     AND.W   #0xf000, R10
   \   000026   3AD2         BIS.W   #0x8, R10
   \   000028   8E4A0000     MOV.W   R10, 0(R14)
    184              top--;
   \   00002C   EE0F         ADDA    R15, R14
    185              //
    186              *top = (INT16U)0x0404;
   \   00002E   BE4004040000 MOV.W   #0x404, 0(R14)
    187              top--;
   \   000034   EE0F         ADDA    R15, R14
    188              *top = (INT16U)0x0505;
   \   000036   BE4005050000 MOV.W   #0x505, 0(R14)
    189              top--;
   \   00003C   EE0F         ADDA    R15, R14
    190              *top = (INT16U)0x0606;
   \   00003E   BE4006060000 MOV.W   #0x606, 0(R14)
    191              top--;
   \   000044   EE0F         ADDA    R15, R14
    192              *top = (INT16U)0x0707;
   \   000046   BE4007070000 MOV.W   #0x707, 0(R14)
    193              top--;
   \   00004C   EE0F         ADDA    R15, R14
    194              *top = (INT16U)0x0808;
   \   00004E   BE4008080000 MOV.W   #0x808, 0(R14)
    195              top--;
   \   000054   EE0F         ADDA    R15, R14
    196              *top = (INT16U)0x0909;
   \   000056   BE4009090000 MOV.W   #0x909, 0(R14)
    197              top--;
   \   00005C   EE0F         ADDA    R15, R14
    198              *top = (INT16U)0x1010;
   \   00005E   BE4010100000 MOV.W   #0x1010, 0(R14)
    199              top--;
   \   000064   EE0F         ADDA    R15, R14
    200              *top = (INT16U)0x1111;
   \   000066   BE4011110000 MOV.W   #0x1111, 0(R14)
    201              top--;
   \   00006C   EE0F         ADDA    R15, R14
    202              *top = (INT16U)p_arg;                          /* Pass 'p_arg' through register R12                 */
                            ^
Warning[Pe767]: conversion from pointer to smaller integer
   \   00006E   8E4D0000     MOV.W   R13, 0(R14)
    203              top--;
   \   000072   EE0F         ADDA    R15, R14
    204              *top = (INT16U)0x1313;
   \   000074   BE4013130000 MOV.W   #0x1313, 0(R14)
    205              top--;
   \   00007A   EE0F         ADDA    R15, R14
    206              *top = (INT16U)0x1414;                         
   \   00007C   BE4014140000 MOV.W   #0x1414, 0(R14)
    207              top--;
   \   000082   EE0F         ADDA    R15, R14
    208              *top = (INT16U)0x1515;
   \   000084   BE4015150000 MOV.W   #0x1515, 0(R14)
    209              return ((OS_STK *)top);    
   \   00008A   CC0E         MOVA    R14, R12
   \   00008C   1A16         POPM.A  #0x2, R11
   \   00008E   1001         RETA
    210          }
    211          
    212          /*$PAGE*/
    213          /*
    214          *********************************************************************************************************
    215          *                                           TASK SWITCH HOOK
    216          *
    217          * Description: This function is called when a task switch is performed.  This allows you to perform other
    218          *              operations during a context switch.
    219          *
    220          * Arguments  : none
    221          *
    222          * Note(s)    : 1) Interrupts are disabled during this call.
    223          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    224          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the 
    225          *                 task being switched out (i.e. the preempted task).
    226          *********************************************************************************************************
    227          */
    228          #if OS_CPU_HOOKS_EN > 0

   \                                 In  segment CODE, align 2
    229          void  OSTaskSwHook (void)
   \                     OSTaskSwHook:
    230          {
    231          }
   \   000000   1001         RETA
    232          #endif
    233          
    234          /*
    235          *********************************************************************************************************
    236          *                                           OSTCBInit() HOOK
    237          *
    238          * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
    239          *
    240          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
    241          *
    242          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    243          *********************************************************************************************************
    244          */
    245          #if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203

   \                                 In  segment CODE, align 2
    246          void  OSTCBInitHook (OS_TCB *ptcb)
   \                     OSTCBInitHook:
    247          {
    248              ptcb = ptcb;                                           /* Prevent Compiler warning                 */
    249          }
   \   000000   1001         RETA
    250          #endif
    251          
    252          
    253          /*
    254          *********************************************************************************************************
    255          *                                               TICK HOOK
    256          *
    257          * Description: This function is called every tick.
    258          *
    259          * Arguments  : none
    260          *
    261          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    262          *********************************************************************************************************
    263          */
    264          #if OS_CPU_HOOKS_EN > 0

   \                                 In  segment CODE, align 2
    265          void  OSTimeTickHook (void)
   \                     OSTimeTickHook:
    266          {
    267          }
   \   000000   1001         RETA
    268          #endif

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
       4  OSInitHookBegin
       4  OSInitHookEnd
       4  OSTCBInitHook
       4  OSTaskCreateHook
       4  OSTaskDelHook
       4  OSTaskIdleHook
       4  OSTaskStatHook
      12  OSTaskStkInit
       4  OSTaskSwHook
       4  OSTimeTickHook


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  OSISRStkPtr
       2  OSInitHookBegin
       2  OSInitHookEnd
       2  OSTCBInitHook
       2  OSTaskCreateHook
       2  OSTaskDelHook
       2  OSTaskIdleHook
       2  OSTaskStatHook
     144  OSTaskStkInit
       2  OSTaskSwHook
       2  OSTimeTickHook

 
 162 bytes in segment CODE
   4 bytes in segment DATA20_Z
 
 162 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: 12
