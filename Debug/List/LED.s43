///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      14/Dec/2016  10:52:41 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\LED.c                                               /
//    Command line  =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\LED.c -D DEBUG -D RAM_VECTOR -lA                    /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \ -o E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug /
//                     \Obj\ --no_cse --no_unroll --no_inline                 /
//                     --no_code_motion --no_tbaa --debug -D__MSP430F5529__   /
//                     -e --double=32 --dlib_config "D:\Program Files\IAR     /
//                     Systems\Embedded Workbench 6.4                         /
//                     Evaluation\430\LIB\DLIB\dl430xlff.h" -I                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\in /
//                     c\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Driv /
//                     ers\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\Drivers\src\USB\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I             /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\ /
//                     ¹¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_HID_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_MSC_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\  /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWar /
//                     e\delay\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\HardWare\18b20\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\KEY\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Har /
//                     dWare\12864\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\HardWare\oled\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6 /
//                     \C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc\ -I                 /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\m /
//                     pu6050\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³Ì /
//                     Ä£°å\HardWare\nokia5110\inc\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     okia5110\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤ /
//                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                         /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å /
//                     \HardWare\2.2TFT\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\ -I                       /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\    /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\ /
//                     inc\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Sy /
//                     stem\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£ /
//                     °å\User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\User\USER\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII /
//                     \App\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\L /
//                     ib\uCOSII\CONFIHG\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII /
//                     \CORE\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ /
//                     Lib\FatFs\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ /
//                     £°å\Lib\FatFs\option\ --core=430X --data_model=large   /
//                     -On --multiplier=32 --multiplier_location=4C0          /
//                     --hw_workaround=CPU40                                  /
//    List file     =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \LED.s43                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LED

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC LED_Init
        FUNCTION LED_Init,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC LED_Off
        FUNCTION LED_Off,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC LED_On
        FUNCTION LED_On,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC LED_PIN
        PUBLIC LED_SetStatus
        FUNCTION LED_SetStatus,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC LED_Turn
        FUNCTION LED_Turn,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC LED_Water_Lights
        FUNCTION LED_Water_Lights,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN GPIO_TurnBit
        FUNCTION GPIO_TurnBit,0202H
        EXTERN GPIO_WriteBit
        FUNCTION GPIO_WriteBit,0202H
        EXTERN GPIO_MultiBits_Init
        FUNCTION GPIO_MultiBits_Init,0202H

// E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\LED\LED.c
//    1 #include "LED.h"
//    2 #include "msp430f5529_gpio.h"
//    3 #include "msp430f5529_system.h"
//    4 //¶¨ÒåLEDÒý½Å

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//    5 const GPIO_PIN LED_PIN[LED_NUM]=
LED_PIN:
        DC8 0, 0, 3, 7
//    6 {
//    7   {LED1_PORT,LED1_PIN},
//    8   {LED2_PORT,LED2_PIN},
//    9 };//LEDÒý½Å
//   10 /*******************************************************************************
//   11 *  º¯ÊýÃû³Æ£ºLED_Init( LEDn led )
//   12 *  ¹¦ÄÜËµÃ÷£ºLEDµÆ³õÊ¼»¯
//   13 *  ²ÎÊýËµÃ÷£ºLEDn led :LED£¨LED0,LED1...£©
//   14 *  º¯Êý·µ»Ø£ºÎÞ
//   15 *  Ê¹ÓÃÊ¾Àý£ºLED_Init( LED0 );   //³õÊ¼»¯LED0
//   16 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   17 void LED_Init( LEDn led )
LED_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function LED_Init
//   18 {
        FUNCALL LED_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 8, STACK
        FUNCALL LED_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 8, STACK
        FUNCALL LED_Init, LED_Off
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   19   if(led == LED_ALL)
        CMP.B   #0x2, R10
        JNE     ??LED_Init_1
//   20   {
//   21     for(led = LED1;led < LED_NUM;led++)
        MOV.B   #0x0, R10
??LED_Init_0:
        CMP.B   #0x2, R10
        JC      ??LED_Init_2
//   22     {
//   23       GPIO_Init(LED_PIN[led].Port, LED_PIN[led].Pin, GPO);
        MOV.W   #0x2, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R15
        SUB.B   #0x1, R15
        JN      ??LED_Init_3
        RPT     R15
        RLAX.W  R13
??LED_Init_3:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_MultiBits_Init
//   24     }
        ADD.B   #0x1, R10
        JMP     ??LED_Init_0
//   25   }
//   26   else
//   27   {
//   28     GPIO_Init(LED_PIN[led].Port, LED_PIN[led].Pin, GPO);
??LED_Init_1:
        MOV.W   #0x2, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R15
        SUB.B   #0x1, R15
        JN      ??LED_Init_4
        RPT     R15
        RLAX.W  R13
??LED_Init_4:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_MultiBits_Init
//   29   }
//   30   LED_Off (led);
??LED_Init_2:
        MOV.B   R10, R12
        CALLA   #LED_Off
//   31 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   32 /*******************************************************************************
//   33 *  º¯ÊýÃû³Æ£ºLED_SetStatus(LEDn led,STATUS status)
//   34 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃLED×´Ì¬
//   35 *  ²ÎÊýËµÃ÷£ºLEDn led      :LED£¨LED1,LED2...£©
//   36              STATUS status :ÉèÖÃÊÇ·ñµãÁÁLED
//   37 *  º¯Êý·µ»Ø£ºÎÞ
//   38 *  Ê¹ÓÃÊ¾Àý£ºLED_SetStatus(LED1,SET);  //LED1ÁÁ
//   39 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   40 void LED_SetStatus(LEDn led,STATUS status)
LED_SetStatus:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function LED_SetStatus
//   41 {
        FUNCALL LED_SetStatus, GPIO_WriteBit
        LOCFRAME CSTACK, 12, STACK
        FUNCALL LED_SetStatus, GPIO_WriteBit
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.B   R12, R10
        MOV.B   R13, R11
//   42   status = (LED_ON == BIT_SET) ? status : (STATUS)!status;
//   43   
//   44   if(led == LED_ALL)
        CMP.B   #0x2, R10
        JNE     ??LED_SetStatus_1
//   45   {
//   46     for(led = LED1;led < LED_NUM;led++)
        MOV.B   #0x0, R10
??LED_SetStatus_0:
        CMP.B   #0x2, R10
        JC      ??LED_SetStatus_2
//   47     {
//   48       GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, status);
        MOV.B   R11, R14
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_WriteBit
//   49     }
        ADD.B   #0x1, R10
        JMP     ??LED_SetStatus_0
//   50   }
//   51   else
//   52   {
//   53     GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, status);
??LED_SetStatus_1:
        MOV.B   R11, R14
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_WriteBit
//   54   }
//   55 }
??LED_SetStatus_2:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   56 /*******************************************************************************
//   57 *  º¯ÊýÃû³Æ£ºLED_Off (LEDn led)
//   58 *  ¹¦ÄÜËµÃ÷£º¹Ø±ÕlED
//   59 *  ²ÎÊýËµÃ÷£ºLEDn led      :LED£¨LED1,LED2...£©
//   60 *  º¯Êý·µ»Ø£ºÎÞ
//   61 *  Ê¹ÓÃÊ¾Àý£ºLED_Off(LED1);  //LED1Ãð
//   62 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   63 void LED_Off (LEDn led)
LED_Off:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function LED_Off
//   64 {
        FUNCALL LED_Off, GPIO_WriteBit
        LOCFRAME CSTACK, 8, STACK
        FUNCALL LED_Off, GPIO_WriteBit
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   65   if(led == LED_ALL)
        CMP.B   #0x2, R10
        JNE     ??LED_Off_1
//   66   {
//   67     for(led = LED1;led < LED_NUM;led++)
        MOV.B   #0x0, R10
??LED_Off_0:
        CMP.B   #0x2, R10
        JC      ??LED_Off_2
//   68     {
//   69       GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_OFF);
        MOV.B   #0x0, R14
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_WriteBit
//   70     }
        ADD.B   #0x1, R10
        JMP     ??LED_Off_0
//   71   }
//   72   else
//   73   {
//   74     GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_OFF);
??LED_Off_1:
        MOV.B   #0x0, R14
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_WriteBit
//   75   }
//   76 }
??LED_Off_2:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   77 /*******************************************************************************
//   78 *  º¯ÊýÃû³Æ£ºLED_On  (LEDn led)
//   79 *  ¹¦ÄÜËµÃ÷£ºµÆÁÁ
//   80 *  ²ÎÊýËµÃ÷£ºLEDn led      :LED£¨LED1,LED2...£©
//   81 *  º¯Êý·µ»Ø£ºÎÞ
//   82 *  Ê¹ÓÃÊ¾Àý£ºLED_On(LED0);  //LED0ÁÁ
//   83 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   84 void LED_On  (LEDn led)
LED_On:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function LED_On
//   85 {
        FUNCALL LED_On, GPIO_WriteBit
        LOCFRAME CSTACK, 8, STACK
        FUNCALL LED_On, GPIO_WriteBit
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   86   if(led == LED_ALL)
        CMP.B   #0x2, R10
        JNE     ??LED_On_1
//   87   {
//   88     for(led = LED1;led < LED_NUM;led++)
        MOV.B   #0x0, R10
??LED_On_0:
        CMP.B   #0x2, R10
        JC      ??LED_On_2
//   89     {
//   90       GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_ON);
        MOV.B   #0x1, R14
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_WriteBit
//   91     }
        ADD.B   #0x1, R10
        JMP     ??LED_On_0
//   92   }
//   93   else
//   94   {
//   95     GPIO_WriteBit(LED_PIN[led].Port, LED_PIN[led].Pin, LED_ON);
??LED_On_1:
        MOV.B   #0x1, R14
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_WriteBit
//   96   }
//   97 }
??LED_On_2:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   98 /*******************************************************************************
//   99 *  º¯ÊýÃû³Æ£ºLED_Turn(LEDn led)
//  100 *  ¹¦ÄÜËµÃ÷£ºµÆ·­×ª
//  101 *  ²ÎÊýËµÃ÷£ºLEDn led      :LED£¨LED1,LED2...£©
//  102 *  º¯Êý·µ»Ø£ºÎÞ
//  103 *  Ê¹ÓÃÊ¾Àý£ºLED_Turn(LED0);  //LED0Êä³ö·­×ª
//  104 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  105 void LED_Turn(LEDn led)
LED_Turn:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function LED_Turn
//  106 {
        FUNCALL LED_Turn, GPIO_TurnBit
        LOCFRAME CSTACK, 8, STACK
        FUNCALL LED_Turn, GPIO_TurnBit
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//  107   if(led == LED_ALL)
        CMP.B   #0x2, R10
        JNE     ??LED_Turn_1
//  108   {
//  109     for(led = LED1;led < LED_NUM;led++)
        MOV.B   #0x0, R10
??LED_Turn_0:
        CMP.B   #0x2, R10
        JC      ??LED_Turn_2
//  110     {
//  111       GPIO_TurnBit(LED_PIN[led].Port, LED_PIN[led].Pin);
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_TurnBit
//  112     }
        ADD.B   #0x1, R10
        JMP     ??LED_Turn_0
//  113   }
//  114   else
//  115   {
//  116     GPIO_TurnBit(LED_PIN[led].Port, LED_PIN[led].Pin);
??LED_Turn_1:
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN + 1(R15), R13
        MOV.B   R10, R15
        ADDA    R15, R15
        MOVX.B  LED_PIN(R15), R12
        CALLA   #GPIO_TurnBit
//  117   }
//  118 }
??LED_Turn_2:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//  119 /*******************************************************************************
//  120 *  º¯ÊýÃû³Æ£ºwater_lights(void)
//  121 *  ¹¦ÄÜËµÃ÷£ºÁ÷Ë®µÆ
//  122 *  ²ÎÊýËµÃ÷£ºÎÞ
//  123 *  º¯Êý·µ»Ø£ºÎÞ
//  124 *  Ê¹ÓÃÊ¾Àý£ºwater_lights(); //Á÷Ë®µÆÁÁÒ»´Î
//  125 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  126 void LED_Water_Lights(void)
LED_Water_Lights:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function LED_Water_Lights
//  127 {
        FUNCALL LED_Water_Lights, LED_Turn
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  128   for(LEDn led = LED1;led < LED_NUM;led++)
        MOV.B   #0x0, R10
??LED_Water_Lights_0:
        CMP.B   #0x2, R10
        JC      ??LED_Water_Lights_1
//  129   {
//  130     LED_Turn(led);
        MOV.B   R10, R12
        CALLA   #LED_Turn
//  131     DELAY_MS(500);
        ////////////// Start of 12500000 cycles delay.
        MOV.W   #0xaf06, R15
        MOV.W   #0x2f, R14
??LED_Water_Lights_2:
        ADD.W   #0xffff, R15
        ADDC.W  #0xffff, R14
        JC      ??LED_Water_Lights_2
        ////////////// End of delay code.
//  132   }
        ADD.B   #0x1, R10
        JMP     ??LED_Water_Lights_0
//  133 }
??LED_Water_Lights_1:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 434 bytes in segment CODE
//   4 bytes in segment DATA20_C
// 
// 434 bytes of CODE  memory
//   4 bytes of CONST memory
//
//Errors: none
//Warnings: none
