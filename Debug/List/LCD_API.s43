///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      14/Dec/2016  10:52:41 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\LCD_API.c                                       /
//    Command line  =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\LCD_API.c -D DEBUG -D RAM_VECTOR -lA            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \ -o E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug /
//                     \Obj\ --no_cse --no_unroll --no_inline                 /
//                     --no_code_motion --no_tbaa --debug -D__MSP430F5529__   /
//                     -e --double=32 --dlib_config "D:\Program Files\IAR     /
//                     Systems\Embedded Workbench 6.4                         /
//                     Evaluation\430\LIB\DLIB\dl430xlff.h" -I                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\in /
//                     c\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Driv /
//                     ers\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\Drivers\src\USB\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I             /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\ /
//                     ¹¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_HID_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_MSC_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\  /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWar /
//                     e\delay\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\HardWare\18b20\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\KEY\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Har /
//                     dWare\12864\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\HardWare\oled\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6 /
//                     \C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc\ -I                 /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\m /
//                     pu6050\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³Ì /
//                     Ä£°å\HardWare\nokia5110\inc\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     okia5110\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤ /
//                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                         /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å /
//                     \HardWare\2.2TFT\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\ -I                       /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\    /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\ /
//                     inc\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Sy /
//                     stem\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£ /
//                     °å\User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\User\USER\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII /
//                     \App\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\L /
//                     ib\uCOSII\CONFIHG\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII /
//                     \CORE\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ /
//                     Lib\FatFs\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ /
//                     £°å\Lib\FatFs\option\ --core=430X --data_model=large   /
//                     -On --multiplier=32 --multiplier_location=4C0          /
//                     --hw_workaround=CPU40                                  /
//    List file     =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \LCD_API.s43                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME LCD_API

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__dlib_full_locale_support", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__iar_require _Printf", "unknown"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?CopyMemoryWords20
        EXTERN ?DivMod16u
        EXTERN ?cstart_init_copy20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC BACK_COLOR
        PUBLIC LCD_Clear
        FUNCTION LCD_Clear,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC LCD_DispChar
        FUNCTION LCD_DispChar,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC LCD_DispDecAt
        FUNCTION LCD_DispDecAt,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 48, STACK
        PUBLIC LCD_DispFolatAt
        FUNCTION LCD_DispFolatAt,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 82, STACK
        PUBLIC LCD_DispStringAt
        FUNCTION LCD_DispStringAt,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC LCD_DispStringLen
        FUNCTION LCD_DispStringLen,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC LCD_Draw_Circle
        FUNCTION LCD_Draw_Circle,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC LCD_Draw_Dot
        FUNCTION LCD_Draw_Dot,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC LCD_Draw_Line
        FUNCTION LCD_Draw_Line,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 44, STACK
        PUBLIC LCD_Draw_Rectangle
        FUNCTION LCD_Draw_Rectangle,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC LCD_FillPart
        FUNCTION LCD_FillPart,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC LCD_Printf
        FUNCTION LCD_Printf,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC LCD_Printf_8x16
        FUNCTION LCD_Printf_8x16,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 44, STACK
        PUBLIC LCD_Show_Picture
        FUNCTION LCD_Show_Picture,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC POINT_COLOR
        PUBLIC asc2_1206
        PUBLIC asc2_1608
        PUBLIC asc2_1608c
        PUBWEAK free
        FUNCTION free,031203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC hanzi
        PUBLIC hanzi16x16
        PUBLIC hanzi_Idx
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN LCD_SetPos
        FUNCTION LCD_SetPos,0202H
        EXTERN LCD_Write_DATA16
        FUNCTION LCD_Write_DATA16,0202H
        EXTERN vsprintf
        FUNCTION vsprintf,010202H
        EXTERN strlen
        FUNCTION strlen,010202H
        EXTERN __data20_free
        FUNCTION __data20_free,010202H
        EXTERN _CmpLt32f
        FUNCTION _CmpLt32f,0202H
        EXTERN _Add32f
        FUNCTION _Add32f,0202H
        EXTERN _CmpGe32f
        FUNCTION _CmpGe32f,0202H
        EXTERN _Mul32f
        FUNCTION _Mul32f,0202H
        EXTERN _Div32f
        FUNCTION _Div32f,0202H
        EXTERN _Cast32fto32s
        FUNCTION _Cast32fto32s,0202H
        EXTERN _Cast32sto32f
        FUNCTION _Cast32sto32f,0202H
        EXTERN _Cast32fto32u
        FUNCTION _Cast32fto32u,0202H
        EXTERN _Cast32uto32f
        FUNCTION _Cast32uto32f,0202H
        EXTERN _Sub32f
        FUNCTION _Sub32f,0202H


        RSEG DATA20_C:CONST:SORT:NOROOT(1)
`?<Constant {(4.90000009E-1F), (5.00000007E-2F)`:
        DC32 3EFAE148H, 3D4CCCCDH, 3BA3D70AH, 3A03126FH, 3851B717H, 36A7C5ACH
// E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\LCD_API\LCD_API.c
//    1 #include "LCD_API.h"
//    2 #include "LCD_FONT.h"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1206[95][12]
asc2_1206:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0
        DC8 0, 0, 20, 10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 20, 63, 20, 10
        DC8 63, 10, 10, 0, 0, 0, 4, 30, 21, 5, 6, 12, 20, 21, 15, 4, 0, 0, 0
        DC8 18, 21, 13, 10, 20, 44, 42, 18, 0, 0, 0, 0, 4, 10, 10, 30, 21, 21
        DC8 9, 54, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 16, 8, 8, 8
        DC8 8, 8, 8, 16, 32, 0, 0, 2, 4, 8, 8, 8, 8, 8, 8, 4, 2, 0, 0, 0, 0, 4
        DC8 21, 14, 14, 21, 4, 0, 0, 0, 0, 0, 4, 4, 4, 31, 4, 4, 4, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 16, 8, 8, 8, 4, 4, 2, 2
        DC8 2, 1, 0, 0, 0, 14, 17, 17, 17, 17, 17, 17, 14, 0, 0, 0, 0, 4, 6, 4
        DC8 4, 4, 4, 4, 14, 0, 0, 0, 0, 14, 17, 17, 8, 4, 2, 1, 31, 0, 0, 0, 0
        DC8 14, 17, 16, 12, 16, 16, 17, 14, 0, 0, 0, 0, 8, 12, 10, 10, 9, 30, 8
        DC8 24, 0, 0, 0, 0, 31, 1, 1, 15, 16, 16, 17, 14, 0, 0, 0, 0, 14, 9, 1
        DC8 15, 17, 17, 17, 14, 0, 0, 0, 0, 31, 9, 8, 4, 4, 4, 4, 4, 0, 0, 0, 0
        DC8 14, 17, 17, 14, 17, 17, 17, 14, 0, 0, 0, 0, 14, 17, 17, 17, 30, 16
        DC8 18, 14, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4
        DC8 0, 0, 0, 4, 4, 0, 0, 32, 16, 8, 4, 2, 4, 8, 16, 32, 0, 0, 0, 0, 0
        DC8 0, 31, 0, 0, 31, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 16, 8, 4, 2, 0, 0
        DC8 0, 0, 14, 17, 17, 8, 4, 4, 0, 4, 0, 0, 0, 0, 14, 17, 25, 21, 21, 29
        DC8 1, 30, 0, 0, 0, 0, 4, 4, 12, 10, 10, 30, 18, 51, 0, 0, 0, 0, 15, 18
        DC8 18, 14, 18, 18, 18, 15, 0, 0, 0, 0, 30, 17, 1, 1, 1, 1, 17, 14, 0
        DC8 0, 0, 0, 15, 18, 18, 18, 18, 18, 18, 15, 0, 0, 0, 0, 31, 18, 10, 14
        DC8 10, 2, 18, 31, 0, 0, 0, 0, 31, 18, 10, 14, 10, 2, 2, 7, 0, 0, 0, 0
        DC8 28, 18, 1, 1, 57, 17, 18, 12, 0, 0, 0, 0, 51, 18, 18, 30, 18, 18
        DC8 18, 51, 0, 0, 0, 0, 31, 4, 4, 4, 4, 4, 4, 31, 0, 0, 0, 0, 62, 8, 8
        DC8 8, 8, 8, 8, 9, 7, 0, 0, 0, 55, 18, 10, 6, 10, 10, 18, 55, 0, 0, 0
        DC8 0, 7, 2, 2, 2, 2, 2, 34, 63, 0, 0, 0, 0, 27, 27, 27, 27, 21, 21, 21
        DC8 21, 0, 0, 0, 0, 59, 18, 22, 22, 26, 26, 18, 23, 0, 0, 0, 0, 14, 17
        DC8 17, 17, 17, 17, 17, 14, 0, 0, 0, 0, 15, 18, 18, 14, 2, 2, 2, 7, 0
        DC8 0, 0, 0, 14, 17, 17, 17, 17, 23, 25, 14, 24, 0, 0, 0, 15, 18, 18
        DC8 14, 10, 18, 18, 55, 0, 0, 0, 0, 30, 17, 1, 6, 8, 16, 17, 15, 0, 0
        DC8 0, 0, 31, 21, 4, 4, 4, 4, 4, 14, 0, 0, 0, 0, 51, 18, 18, 18, 18, 18
        DC8 18, 12, 0, 0, 0, 0, 51, 18, 18, 10, 10, 12, 4, 4, 0, 0, 0, 0, 21
        DC8 21, 21, 14, 10, 10, 10, 10, 0, 0, 0, 0, 27, 10, 10, 4, 4, 10, 10
        DC8 27, 0, 0, 0, 0, 27, 10, 10, 4, 4, 4, 4, 14, 0, 0, 0, 0, 31, 9, 8, 4
        DC8 4, 2, 18, 31, 0, 0, 0, 28, 4, 4, 4, 4, 4, 4, 4, 4, 28, 0, 0, 2, 2
        DC8 2, 4, 4, 8, 8, 8, 16, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8, 8, 8, 14, 0, 0
        DC8 4, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 63, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 18, 28
        DC8 18, 60, 0, 0, 0, 0, 3, 2, 2, 14, 18, 18, 18, 14, 0, 0, 0, 0, 0, 0
        DC8 0, 28, 18, 2, 2, 28, 0, 0, 0, 0, 24, 16, 16, 28, 18, 18, 18, 60, 0
        DC8 0, 0, 0, 0, 0, 0, 12, 18, 30, 2, 28, 0, 0, 0, 0, 56, 4, 4, 30, 4, 4
        DC8 4, 30, 0, 0, 0, 0, 0, 0, 0, 60, 18, 12, 2, 30, 34, 28, 0, 0, 3, 2
        DC8 2, 14, 18, 18, 18, 55, 0, 0, 0, 0, 4, 0, 0, 6, 4, 4, 4, 14, 0, 0, 0
        DC8 0, 8, 0, 0, 12, 8, 8, 8, 8, 8, 7, 0, 0, 3, 2, 2, 58, 10, 14, 18, 55
        DC8 0, 0, 0, 0, 7, 4, 4, 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 15, 21
        DC8 21, 21, 21, 0, 0, 0, 0, 0, 0, 0, 15, 18, 18, 18, 55, 0, 0, 0, 0, 0
        DC8 0, 0, 12, 18, 18, 18, 12, 0, 0, 0, 0, 0, 0, 0, 15, 18, 18, 18, 14
        DC8 2, 7, 0, 0, 0, 0, 0, 28, 18, 18, 18, 28, 16, 56, 0, 0, 0, 0, 0, 27
        DC8 6, 2, 2, 7, 0, 0, 0, 0, 0, 0, 0, 30, 2, 12, 16, 30, 0, 0, 0, 0, 0
        DC8 4, 4, 14, 4, 4, 4, 24, 0, 0, 0, 0, 0, 0, 0, 27, 18, 18, 18, 60, 0
        DC8 0, 0, 0, 0, 0, 0, 55, 18, 10, 12, 4, 0, 0, 0, 0, 0, 0, 0, 21, 21
        DC8 14, 10, 10, 0, 0, 0, 0, 0, 0, 0, 27, 10, 4, 10, 27, 0, 0, 0, 0, 0
        DC8 0, 0, 55, 18, 10, 12, 4, 4, 3, 0, 0, 0, 0, 0, 30, 8, 4, 4, 30, 0, 0
        DC8 0, 24, 8, 8, 8, 4, 8, 8, 8, 8, 24, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
        DC8 8, 8, 0, 6, 4, 4, 4, 8, 4, 4, 4, 4, 6, 0, 2, 37, 24, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1608[95][16]
asc2_1608:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8
        DC8 8, 8, 8, 0, 0, 24, 24, 0, 0, 0, 72, 108, 36, 18, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 36, 36, 36, 127, 18, 18, 18, 127, 18, 18
        DC8 18, 0, 0, 0, 0, 8, 28, 42, 42, 10, 12, 24, 40, 40, 42, 42, 28, 8, 8
        DC8 0, 0, 0, 34, 37, 21, 21, 21, 42, 88, 84, 84, 84, 34, 0, 0, 0, 0, 0
        DC8 12, 18, 18, 18, 10, 118, 37, 41, 17, 145, 110, 0, 0, 0, 6, 6, 4, 3
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 32, 16, 16, 8, 8, 8, 8, 8
        DC8 8, 16, 16, 32, 64, 0, 0, 2, 4, 8, 8, 16, 16, 16, 16, 16, 16, 8, 8
        DC8 4, 2, 0, 0, 0, 0, 0, 8, 8, 107, 28, 28, 107, 8, 8, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 8, 8, 8, 8, 127, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 6, 6, 4, 3, 0, 0, 0, 0, 0, 0, 0, 0, 254, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 128, 64
        DC8 64, 32, 32, 16, 16, 8, 8, 4, 4, 2, 2, 0, 0, 0, 0, 24, 36, 66, 66
        DC8 66, 66, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 8, 14, 8, 8, 8, 8, 8, 8
        DC8 8, 8, 62, 0, 0, 0, 0, 0, 60, 66, 66, 66, 32, 32, 16, 8, 4, 66, 126
        DC8 0, 0, 0, 0, 0, 60, 66, 66, 32, 24, 32, 64, 64, 66, 34, 28, 0, 0, 0
        DC8 0, 0, 32, 48, 40, 36, 36, 34, 34, 126, 32, 32, 120, 0, 0, 0, 0, 0
        DC8 126, 2, 2, 2, 26, 38, 64, 64, 66, 34, 28, 0, 0, 0, 0, 0, 56, 36, 2
        DC8 2, 26, 38, 66, 66, 66, 36, 24, 0, 0, 0, 0, 0, 126, 34, 34, 16, 16
        DC8 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 60, 66, 66, 66, 36, 24, 36, 66, 66
        DC8 66, 60, 0, 0, 0, 0, 0, 24, 36, 66, 66, 66, 100, 88, 64, 64, 36, 28
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 24, 24, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 8, 8, 4, 0, 0, 0, 64, 32, 16, 8, 4, 2
        DC8 4, 8, 16, 32, 64, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 127, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 2, 4, 8, 16, 32, 64, 32, 16, 8, 4, 2, 0, 0, 0, 0
        DC8 0, 60, 66, 66, 70, 64, 32, 16, 16, 0, 24, 24, 0, 0, 0, 0, 0, 28, 34
        DC8 90, 85, 85, 85, 85, 45, 66, 34, 28, 0, 0, 0, 0, 0, 8, 8, 24, 20, 20
        DC8 36, 60, 34, 66, 66, 231, 0, 0, 0, 0, 0, 31, 34, 34, 34, 30, 34, 66
        DC8 66, 66, 34, 31, 0, 0, 0, 0, 0, 124, 66, 66, 1, 1, 1, 1, 1, 66, 34
        DC8 28, 0, 0, 0, 0, 0, 31, 34, 66, 66, 66, 66, 66, 66, 66, 34, 31, 0, 0
        DC8 0, 0, 0, 63, 66, 18, 18, 30, 18, 18, 2, 66, 66, 63, 0, 0, 0, 0, 0
        DC8 63, 66, 18, 18, 30, 18, 18, 2, 2, 2, 7, 0, 0, 0, 0, 0, 60, 34, 34
        DC8 1, 1, 1, 113, 33, 34, 34, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
        DC8 126, 66, 66, 66, 66, 231, 0, 0, 0, 0, 0, 62, 8, 8, 8, 8, 8, 8, 8, 8
        DC8 8, 62, 0, 0, 0, 0, 0, 124, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 17, 15, 0, 0, 0, 119, 34, 18, 10, 14, 10, 18, 18, 34, 34, 119, 0, 0
        DC8 0, 0, 0, 7, 2, 2, 2, 2, 2, 2, 2, 2, 66, 127, 0, 0, 0, 0, 0, 119, 54
        DC8 54, 54, 54, 42, 42, 42, 42, 42, 107, 0, 0, 0, 0, 0, 227, 70, 70, 74
        DC8 74, 82, 82, 82, 98, 98, 71, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65
        DC8 65, 65, 65, 34, 28, 0, 0, 0, 0, 0, 63, 66, 66, 66, 66, 62, 2, 2, 2
        DC8 2, 7, 0, 0, 0, 0, 0, 28, 34, 65, 65, 65, 65, 65, 77, 83, 50, 28, 96
        DC8 0, 0, 0, 0, 63, 66, 66, 66, 62, 18, 18, 34, 34, 66, 199, 0, 0, 0, 0
        DC8 0, 124, 66, 66, 2, 4, 24, 32, 64, 66, 66, 62, 0, 0, 0, 0, 0, 127
        DC8 73, 8, 8, 8, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0, 0, 231, 66, 66, 66, 66
        DC8 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0, 231, 66, 66, 34, 36, 36, 20
        DC8 20, 24, 8, 8, 0, 0, 0, 0, 0, 107, 73, 73, 73, 73, 85, 85, 54, 34
        DC8 34, 34, 0, 0, 0, 0, 0, 231, 66, 36, 36, 24, 24, 24, 36, 36, 66, 231
        DC8 0, 0, 0, 0, 0, 119, 34, 34, 20, 20, 8, 8, 8, 8, 8, 28, 0, 0, 0, 0
        DC8 0, 126, 33, 32, 16, 16, 8, 4, 4, 66, 66, 63, 0, 0, 0, 120, 8, 8, 8
        DC8 8, 8, 8, 8, 8, 8, 8, 8, 8, 120, 0, 0, 0, 2, 2, 4, 4, 8, 8, 8, 16
        DC8 16, 32, 32, 32, 64, 64, 0, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 16, 16, 16, 30, 0, 0, 56, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 6, 8, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 120, 68
        DC8 66, 66, 252, 0, 0, 0, 0, 0, 3, 2, 2, 2, 26, 38, 66, 66, 66, 38, 26
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 56, 68, 2, 2, 2, 68, 56, 0, 0, 0, 0, 0
        DC8 96, 64, 64, 64, 120, 68, 66, 66, 66, 100, 216, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 60, 66, 126, 2, 2, 66, 60, 0, 0, 0, 0, 0, 240, 136, 8, 8, 126
        DC8 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 34, 34, 28, 2
        DC8 60, 66, 66, 60, 0, 0, 0, 3, 2, 2, 2, 58, 70, 66, 66, 66, 66, 231, 0
        DC8 0, 0, 0, 0, 12, 12, 0, 0, 14, 8, 8, 8, 8, 8, 62, 0, 0, 0, 0, 0, 48
        DC8 48, 0, 0, 56, 32, 32, 32, 32, 32, 32, 34, 30, 0, 0, 0, 3, 2, 2, 2
        DC8 114, 18, 10, 22, 18, 34, 119, 0, 0, 0, 0, 0, 14, 8, 8, 8, 8, 8, 8
        DC8 8, 8, 8, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 146, 146, 146, 146
        DC8 146, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 70, 66, 66, 66, 66, 231, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 60, 66, 66, 66, 66, 66, 60, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 27, 38, 66, 66, 66, 34, 30, 2, 7, 0, 0, 0, 0, 0, 0, 0
        DC8 120, 68, 66, 66, 66, 68, 120, 64, 224, 0, 0, 0, 0, 0, 0, 0, 119, 76
        DC8 4, 4, 4, 4, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 66, 2, 60, 64, 66
        DC8 62, 0, 0, 0, 0, 0, 0, 0, 8, 8, 62, 8, 8, 8, 8, 8, 48, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 99, 66, 66, 66, 66, 98, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 231, 66, 36, 36, 20, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 235, 73, 73
        DC8 85, 85, 34, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 118, 36, 24, 24, 24, 36
        DC8 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 231, 66, 36, 36, 20, 24, 8, 8, 7, 0
        DC8 0, 0, 0, 0, 0, 0, 126, 34, 16, 8, 8, 68, 126, 0, 0, 0, 192, 32, 32
        DC8 32, 32, 32, 16, 32, 32, 32, 32, 32, 32, 192, 0, 16, 16, 16, 16, 16
        DC8 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 6, 8, 8, 8, 8, 8, 16
        DC8 8, 8, 8, 8, 8, 8, 6, 0, 12, 50, 194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const asc2_1608c[95][16]
asc2_1608c:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3
        DC8 3, 3, 3, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 27, 27, 27, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 152, 152, 255, 204, 102, 255, 51, 51, 0, 0
        DC8 0, 0, 0, 0, 0, 12, 126, 13, 13, 13, 127, 204, 204, 63, 12, 12, 0, 0
        DC8 0, 0, 0, 0, 103, 45, 55, 24, 24, 236, 182, 230, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 28, 54, 62, 206, 251, 113, 113, 223, 0, 0, 0, 0, 0, 0, 0, 6, 6
        DC8 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 14, 6, 3, 3, 3, 3, 3
        DC8 3, 6, 6, 12, 0, 0, 0, 0, 1, 3, 3, 6, 6, 6, 6, 6, 6, 3, 3, 1, 0, 0
        DC8 0, 0, 6, 63, 15, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12
        DC8 12, 63, 63, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 6, 7, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 48, 24, 24
        DC8 12, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 62, 98, 99, 99, 99, 99, 34
        DC8 62, 0, 0, 0, 0, 0, 0, 0, 0, 12, 15, 15, 12, 12, 12, 12, 63, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 62, 99, 96, 56, 30, 7, 3, 127, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 62, 99, 96, 48, 104, 96, 99, 62, 0, 0, 0, 0, 0, 0, 0, 0, 48, 56
        DC8 52, 50, 49, 255, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 63, 99
        DC8 96, 115, 30, 0, 0, 0, 0, 0, 0, 0, 0, 28, 14, 6, 63, 99, 99, 99, 62
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 96, 48, 24, 24, 12, 14, 6, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 63, 99, 99, 98, 127, 99, 99, 62, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 62, 115, 99, 99, 126, 48, 24, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6
        DC8 6, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 6, 7, 3
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 48, 24, 14, 28, 48, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 31, 31, 0, 0, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 28
        DC8 56, 28, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 49, 48, 28, 6, 0, 6, 6, 0
        DC8 0, 0, 0, 0, 0, 0, 252, 134, 51, 57, 77, 109, 249, 3, 134, 252, 0, 0
        DC8 0, 0, 0, 0, 0, 64, 96, 112, 216, 220, 254, 135, 131, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 31, 115, 99, 99, 127, 195, 227, 127, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 124, 102, 3, 3, 1, 1, 97, 62, 0, 0, 0, 0, 0, 0, 0, 0, 15, 59, 99
        DC8 195, 195, 195, 99, 63, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 127, 3, 3
        DC8 3, 126, 0, 0, 0, 0, 0, 0, 0, 0, 127, 3, 3, 127, 3, 3, 3, 3, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 60, 102, 3, 1, 249, 225, 113, 31, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 131, 131, 131, 255, 131, 131, 131, 131, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 63, 12, 12, 12, 12, 12, 12, 63, 0, 0, 0, 0, 0, 0, 0, 0, 254, 48
        DC8 48, 48, 48, 48, 51, 51, 28, 0, 0, 0, 0, 0, 0, 0, 195, 99, 59, 31
        DC8 15, 31, 115, 227, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 127
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 198, 198, 231, 239, 191, 189, 57, 25, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 131, 135, 143, 159, 187, 243, 227, 131, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 252, 135, 3, 1, 1, 1, 131, 124, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 15, 25, 25, 25, 15, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 252, 6, 3
        DC8 1, 1, 49, 247, 252, 0, 0, 0, 0, 0, 0, 0, 0, 31, 51, 99, 115, 31, 59
        DC8 99, 195, 0, 0, 0, 0, 0, 0, 0, 0, 124, 7, 3, 126, 192, 192, 225, 63
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 255, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 195, 195, 195, 195, 195, 99, 102, 60, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 195, 99, 102, 54, 52, 20, 28, 8, 0, 0, 0, 0, 0, 0, 0, 0, 97
        DC8 99, 115, 247, 222, 222, 140, 140, 0, 0, 0, 0, 0, 0, 0, 0, 129, 199
        DC8 110, 56, 60, 110, 199, 129, 0, 0, 0, 0, 0, 0, 0, 0, 193, 227, 102
        DC8 60, 56, 24, 28, 12, 0, 0, 0, 0, 0, 0, 0, 0, 255, 112, 56, 28, 14, 7
        DC8 3, 255, 0, 0, 0, 0, 0, 0, 0, 15, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 15
        DC8 0, 0, 0, 0, 0, 3, 3, 6, 12, 12, 24, 24, 48, 48, 0, 0, 0, 0, 0, 0, 7
        DC8 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0, 0, 0, 0, 24, 60, 102, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0
        DC8 0, 0, 0, 0, 1, 3, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 30, 51, 49, 49, 49, 63, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 31, 51, 51
        DC8 51, 51, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 3, 1, 1, 1, 31, 0, 0
        DC8 0, 0, 0, 0, 0, 48, 48, 48, 63, 49, 49, 49, 49, 63, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 62, 57, 7, 1, 3, 63, 0, 0, 0, 0, 0, 0, 0, 60, 6, 6, 63
        DC8 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 25, 25, 25, 29, 31
        DC8 24, 28, 15, 0, 0, 0, 0, 3, 3, 3, 63, 55, 51, 51, 51, 51, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0
        DC8 12, 12, 12, 12, 12, 12, 12, 13, 7, 0, 0, 0, 0, 1, 1, 1, 49, 29, 15
        DC8 31, 57, 49, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 253, 155, 153, 153, 153, 153, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 15, 27, 25, 25, 25, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 15, 25, 25, 25, 25, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 25, 25, 25
        DC8 25, 15, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 31, 27, 25, 25, 25, 31, 24
        DC8 24, 24, 0, 0, 0, 0, 0, 0, 0, 31, 27, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 31, 1, 7, 30, 24, 15, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 31
        DC8 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 25, 25, 25, 25, 31
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 59, 27, 15, 14, 6, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 153, 153, 221, 247, 119, 51, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 51, 59, 14, 14, 27, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 115
        DC8 55, 62, 28, 12, 12, 6, 6, 0, 0, 0, 0, 0, 0, 0, 63, 56, 28, 14, 7
        DC8 63, 0, 0, 0, 0, 0, 0, 0, 12, 14, 6, 3, 3, 3, 3, 3, 3, 6, 6, 12, 0
        DC8 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 1, 3, 3, 6
        DC8 6, 6, 6, 6, 6, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 103, 109, 57, 0, 0, 0
        DC8 0, 0, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const hanzi_Idx[41]
hanzi_Idx:
        DC8 "\261\261\276\251\301\372\307\361\307\360\326\307\304\334\277\306\274\274\314\324\261\246\265\352\322\272\276\247\265\245\306\254\273\372\326\307\304\334\263\265"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const hanzi[480]
hanzi:
        DC8 0, 0, 0, 0, 8, 128, 8, 128, 8, 140, 248, 240, 8, 128, 8, 128, 56
        DC8 132, 200, 132, 8, 248, 0, 0, 0, 0, 0, 0, 3, 0, 255, 252, 63, 240
        DC8 32, 16, 32, 16, 63, 240, 25, 96, 49, 24, 199, 12, 0, 0, 0, 0, 0, 0
        DC8 4, 96, 4, 48, 127, 252, 4, 136, 4, 144, 8, 224, 9, 132, 54, 132, 96
        DC8 248, 0, 0, 0, 0, 14, 0, 120, 248, 64, 136, 64, 144, 126, 160, 72
        DC8 144, 72, 136, 72, 136, 74, 240, 244, 128, 0, 128, 0, 0, 0, 0, 0
        DC8 120, 31, 128, 16, 0, 16, 0, 31, 248, 16, 64, 16, 64, 16, 64, 127
        DC8 252, 0, 0, 0, 0, 32, 0, 126, 248, 144, 136, 254, 136, 56, 248, 198
        DC8 0, 63, 240, 63, 240, 32, 16, 63, 240, 0, 0, 0, 0, 0, 0, 48, 140, 70
        DC8 244, 255, 132, 126, 248, 66, 132, 126, 152, 126, 228, 66, 132, 78
        DC8 252, 0, 0, 0, 0, 0, 0, 0, 16, 125, 144, 16, 208, 127, 16, 25, 144
        DC8 55, 252, 80, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 32, 64, 255, 252
        DC8 32, 64, 39, 248, 50, 8, 225, 16, 32, 224, 33, 224, 238, 28, 0, 0, 0
        DC8 0, 0, 0, 98, 0, 55, 248, 106, 8, 55, 232, 15, 248, 36, 168, 36, 168
        DC8 71, 232, 64, 120, 0, 0, 0, 0, 0, 0, 3, 0, 127, 248, 64, 8, 127, 248
        DC8 2, 0, 63, 240, 2, 96, 2, 16, 127, 248, 0, 0, 0, 0, 0, 0, 1, 128, 63
        DC8 248, 33, 0, 33, 248, 33, 0, 47, 240, 40, 16, 104, 16, 79, 240, 0, 0
        DC8 0, 0, 0, 0, 96, 192, 63, 252, 98, 64, 52, 248, 13, 72, 54, 176, 36
        DC8 96, 68, 224, 71, 28, 0, 0, 0, 0, 0, 0, 63, 240, 32, 16, 63, 240, 63
        DC8 240, 124, 248, 68, 136, 124, 248, 68, 136, 124, 248, 68, 136, 0, 0
        DC8 16, 32, 8, 192, 63, 240, 34, 16, 63, 240, 34, 16, 63, 240, 2, 0
        DC8 127, 248, 2, 0, 2, 0, 0, 0, 0, 0, 16, 64, 16, 64, 16, 64, 31, 252
        DC8 16, 0, 31, 224, 16, 32, 32, 32, 96, 32, 0, 0, 0, 0, 32, 0, 35, 224
        DC8 250, 32, 34, 32, 114, 32, 106, 32, 162, 32, 162, 36, 36, 36, 40, 56
        DC8 0, 0, 0, 0, 32, 0, 126, 248, 144, 136, 254, 136, 56, 248, 198, 0
        DC8 63, 240, 63, 240, 32, 16, 63, 240, 0, 0, 0, 0, 0, 0, 48, 140, 70
        DC8 244, 255, 132, 126, 248, 66, 132, 126, 152, 126, 228, 66, 132, 78
        DC8 252, 0, 0, 0, 0, 4, 0, 8, 0, 127, 248, 17, 0, 49, 0, 63, 240, 1, 0
        DC8 1, 0, 255, 252, 1, 0, 1, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
// unsigned char const hanzi16x16[640]
hanzi16x16:
        DC8 4, 64, 4, 64, 4, 64, 4, 68, 4, 72, 124, 80, 4, 96, 4, 64, 4, 64, 4
        DC8 64, 4, 64, 4, 66, 28, 66, 228, 66, 68, 62, 4, 0, 2, 0, 1, 0, 255
        DC8 254, 0, 0, 0, 0, 31, 240, 16, 16, 16, 16, 16, 16, 31, 240, 1, 0, 17
        DC8 16, 17, 8, 33, 4, 69, 4, 2, 0, 4, 32, 4, 16, 4, 16, 4, 0, 255, 254
        DC8 4, 128, 4, 136, 4, 136, 4, 144, 8, 160, 8, 192, 16, 130, 17, 130
        DC8 34, 130, 68, 126, 128, 0, 0, 0, 3, 62, 60, 34, 32, 36, 32, 36, 32
        DC8 40, 63, 164, 34, 36, 34, 34, 34, 34, 34, 34, 34, 52, 39, 168, 248
        DC8 32, 64, 32, 0, 32, 0, 16, 0, 120, 31, 128, 16, 0, 16, 0, 16, 0, 16
        DC8 0, 31, 252, 16, 64, 16, 64, 16, 64, 16, 64, 16, 64, 16, 64, 255
        DC8 254, 0, 0, 32, 0, 62, 124, 72, 68, 8, 68, 255, 68, 20, 68, 34, 124
        DC8 64, 0, 31, 240, 16, 16, 16, 16, 31, 240, 16, 16, 16, 16, 31, 240
        DC8 16, 16, 16, 64, 36, 68, 66, 72, 255, 112, 1, 64, 0, 66, 126, 66, 66
        DC8 62, 66, 0, 126, 68, 66, 72, 66, 112, 126, 64, 66, 66, 74, 66, 68
        DC8 62, 8, 16, 29, 16, 240, 144, 16, 144, 16, 16, 253, 16, 16, 144, 56
        DC8 144, 52, 16, 80, 30, 83, 240, 144, 16, 16, 16, 16, 16, 16, 16, 16
        DC8 16, 16, 32, 16, 32, 16, 32, 19, 254, 252, 32, 16, 32, 16, 32, 21
        DC8 252, 24, 132, 48, 136, 208, 72, 16, 80, 16, 32, 16, 80, 81, 136, 38
        DC8 6, 1, 0, 33, 0, 17, 252, 18, 4, 133, 4, 65, 228, 66, 132, 16, 132
        DC8 23, 244, 32, 132, 226, 164, 34, 164, 35, 228, 32, 4, 32, 40, 0, 16
        DC8 2, 0, 1, 0, 127, 254, 64, 2, 128, 4, 0, 0, 127, 252, 1, 0, 1, 0, 1
        DC8 0, 63, 248, 1, 0, 1, 32, 1, 16, 255, 254, 0, 0, 1, 0, 0, 128, 63
        DC8 254, 32, 128, 32, 128, 32, 128, 32, 252, 32, 128, 32, 128, 39, 248
        DC8 36, 8, 36, 8, 68, 8, 68, 8, 135, 248, 4, 8, 0, 128, 32, 64, 23, 254
        DC8 17, 32, 129, 32, 66, 60, 66, 68, 22, 100, 18, 148, 35, 72, 226, 72
        DC8 34, 48, 34, 32, 34, 80, 34, 136, 3, 6, 15, 224, 8, 32, 8, 32, 15
        DC8 224, 8, 32, 8, 32, 15, 224, 0, 0, 126, 252, 66, 132, 66, 132, 126
        DC8 252, 66, 132, 66, 132, 126, 252, 66, 132, 16, 16, 8, 32, 4, 64, 63
        DC8 248, 33, 8, 33, 8, 63, 248, 33, 8, 33, 8, 63, 248, 1, 0, 1, 0, 255
        DC8 254, 1, 0, 1, 0, 1, 0, 0, 64, 16, 64, 16, 64, 16, 64, 16, 64, 31
        DC8 252, 16, 0, 16, 0, 16, 0, 31, 224, 16, 32, 16, 32, 16, 32, 32, 32
        DC8 32, 32, 64, 32, 16, 0, 17, 240, 17, 16, 17, 16, 253, 16, 17, 16, 49
        DC8 16, 57, 16, 85, 16, 85, 16, 145, 16, 17, 18, 17, 18, 18, 18, 18, 14
        DC8 20, 0, 32, 0, 62, 124, 72, 68, 8, 68, 255, 68, 20, 68, 34, 124, 64
        DC8 0, 31, 240, 16, 16, 16, 16, 31, 240, 16, 16, 16, 16, 31, 240, 16
        DC8 16, 16, 64, 36, 68, 66, 72, 255, 112, 1, 64, 0, 66, 126, 66, 66, 62
        DC8 66, 0, 126, 68, 66, 72, 66, 112, 126, 64, 66, 66, 74, 66, 68, 62, 2
        DC8 0, 2, 0, 2, 0, 127, 252, 4, 0, 9, 0, 17, 0, 33, 0, 63, 248, 1, 0, 1
        DC8 0, 255, 254, 1, 0, 1, 0, 1, 0, 1, 0
//    3 #include <stdarg.h>
//    4 #include <string.h>
//    5 #include <stdio.h>
//    6 #include <stdlib.h>

        RSEG CODE:CODE:REORDER:NOROOT(1)
// __intrinsic __nounwind __cc_version2 void free(void *)
free:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function free
        FUNCALL free, __data20_free
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOVA    R12, R10
        MOVA    R10, R12
        CALLA   #__data20_free
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//    7 //±³¾°É«£¬»­±ÊÉ«

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
//    8 uint16_t POINT_COLOR=RED,BACK_COLOR=WHITE; 
POINT_COLOR:
        DS8 2
        REQUIRE `?<Initializer for POINT_COLOR>`

        RSEG DATA20_I:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_copy20
BACK_COLOR:
        DS8 2
        REQUIRE `?<Initializer for BACK_COLOR>`
//    9 /*************************************************************************
//   10 *  º¯ÊýÃû³Æ£º
//   11 *  ¹¦ÄÜËµÃ÷£º²¿·ÖÇøÓòÓÃÒ»ÖÖÑÕÉ«Ìî³ä
//   12 *  ²ÎÊýËµÃ÷£º
//   13 *  º¯Êý·µ»Ø£º
//   14 *  Ê¹ÓÃÊ¾Àý£º
//   15 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   16 void LCD_FillPart(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_FillPart:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function LCD_FillPart
//   17 {
        FUNCALL LCD_FillPart, LCD_SetPos
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_FillPart, LCD_Write_DATA16
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R7
        MOV.W   R13, R6
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOV.W   0x24(SP), R4
//   18   uint16_t i,j;
//   19   LCD_PTLON(xs,ys,xe,ye);
        MOV.W   R11, R15
        MOV.W   R10, R14
        MOV.W   R6, R13
        MOV.W   R7, R12
        CALLA   #LCD_SetPos
//   20   for(j=0;j<(ye-ys+1);j++)
        MOV.W   #0x0, R9
??LCD_FillPart_1:
        MOV.W   R11, R15
        SUB.W   R6, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R9
        JC      ??LCD_FillPart_2
//   21   {
//   22     for(i=0;i<(xe-xs+1);i++)
        MOV.W   #0x0, R8
??LCD_FillPart_0:
        MOV.W   R10, R15
        SUB.W   R7, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R8
        JC      ??LCD_FillPart_3
//   23     {
//   24       LCD_WR_WORD(color_dat);
        MOV.W   R4, R12
        CALLA   #LCD_Write_DATA16
//   25     }
        ADD.W   #0x1, R8
        JMP     ??LCD_FillPart_0
//   26   }  
??LCD_FillPart_3:
        ADD.W   #0x1, R9
        JMP     ??LCD_FillPart_1
//   27 }
??LCD_FillPart_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   28 /*************************************************************************
//   29 *  º¯ÊýÃû³Æ£º
//   30 *  ¹¦ÄÜËµÃ÷£ºÈ«ÆÁÓÃÒ»ÖÖÑÕÉ«Ìî³ä
//   31 *  ²ÎÊýËµÃ÷£º
//   32 *  º¯Êý·µ»Ø£º
//   33 *  Ê¹ÓÃÊ¾Àý£º
//   34 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   35 void LCD_Clear(uint16_t color)
LCD_Clear:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function LCD_Clear
//   36 {
        FUNCALL LCD_Clear, LCD_SetPos
        LOCFRAME CSTACK, 20, STACK
        FUNCALL LCD_Clear, LCD_Write_DATA16
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R10
//   37   unsigned int i,j;	
//   38   LCD_PTLON(0,0,LCD_W,LCD_H);
        MOV.W   #0x140, R15
        MOV.W   #0xf0, R14
        MOV.W   #0x0, R13
        MOV.W   #0x0, R12
        CALLA   #LCD_SetPos
//   39   for(i=0;i<=LCD_H;i++)
        MOV.W   #0x0, R11
??LCD_Clear_1:
        CMP.W   #0x141, R11
        JC      ??LCD_Clear_2
//   40   {
//   41     for(j=0;j<=LCD_W;j++)
        MOV.W   #0x0, R8
??LCD_Clear_0:
        CMP.W   #0xf1, R8
        JC      ??LCD_Clear_3
//   42     {
//   43        LCD_WR_WORD(color);
        MOV.W   R10, R12
        CALLA   #LCD_Write_DATA16
//   44     }
        ADD.W   #0x1, R8
        JMP     ??LCD_Clear_0
//   45   }
??LCD_Clear_3:
        ADD.W   #0x1, R11
        JMP     ??LCD_Clear_1
//   46 }
??LCD_Clear_2:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
//   47 /*************************************************************************
//   48 *  º¯ÊýÃû³Æ£º
//   49 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û
//   50 *  ²ÎÊýËµÃ÷£º
//   51 *  º¯Êý·µ»Ø£º
//   52 *  Ê¹ÓÃÊ¾Àý£º
//   53 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   54 void LCD_DispChar(uint16_t x, uint16_t y, char c_dat,uint16_t word_color,uint16_t back_color)
LCD_DispChar:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function LCD_DispChar
//   55 { 
        FUNCALL LCD_DispChar, LCD_SetPos
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_DispChar, LCD_Write_DATA16
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_DispChar, LCD_Write_DATA16
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R6
        MOV.W   R13, R11
        MOV.B   R14, R10
        MOV.W   R15, R5
        MOV.W   0x24(SP), R4
//   56   if(c_dat<' '||c_dat>'~')return;
        CMP.B   #0x20, R10
        JNC     ??LCD_DispChar_2
        CMP.B   #0x7f, R10
        JC      ??LCD_DispChar_2
//   57   uint16_t i,j;
//   58   char temp;
//   59   c_dat=c_dat-' ';
        ADD.B   #0xe0, R10
//   60   LCD_PTLON(x,y,x+7,y+15);			//¶¨Î»×Ö·ûÏÔÊ¾ÇøÓò
        MOV.W   R11, R15
        ADD.W   #0xf, R15
        MOV.W   R6, R14
        ADD.W   #0x7, R14
        MOV.W   R11, R13
        MOV.W   R6, R12
        CALLA   #LCD_SetPos
//   61   for(j=0; j<16; j++)
        MOV.W   #0x0, R9
??LCD_DispChar_1:
        CMP.W   #0x10, R9
        JC      ??LCD_DispChar_2
//   62   {
//   63     temp=asc2_1608[c_dat][j];
        MOV.B   R10, R15
        RLAM.A  #0x4, R15
        ADDA    R9, R15
        MOVX.B  asc2_1608(R15), R7
//   64     for(i=0; i<8; i++)
        MOV.W   #0x0, R8
??LCD_DispChar_0:
        CMP.W   #0x8, R8
        JC      ??LCD_DispChar_5
//   65     {
//   66       if((temp) & (0x01<<i))
        MOV.W   #0x1, R14
        SUB.B   #0x1, R8
        JN      ??LCD_DispChar_6
        RPT     R8
        RLAX.W  R14
??LCD_DispChar_6:
        ADD.B   #0x1, R8
        BIT.B   R14, R7
        JEQ     ??LCD_DispChar_7
//   67       { 
//   68         LCD_WR_WORD(word_color);
        MOV.W   R5, R12
        CALLA   #LCD_Write_DATA16
        JMP     ??LCD_DispChar_8
//   69       }
//   70       else
//   71       {
//   72         LCD_WR_WORD(back_color);
??LCD_DispChar_7:
        MOV.W   R4, R12
        CALLA   #LCD_Write_DATA16
//   73       }
//   74     }
??LCD_DispChar_8:
        ADD.W   #0x1, R8
        JMP     ??LCD_DispChar_0
//   75   }
??LCD_DispChar_5:
        ADD.W   #0x1, R9
        JMP     ??LCD_DispChar_1
//   76 }
??LCD_DispChar_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//   77 /*************************************************************************
//   78 *  º¯ÊýÃû³Æ£º
//   79 *  ¹¦ÄÜËµÃ÷£º
//   80 *  ²ÎÊýËµÃ÷£º
//   81 *  º¯Êý·µ»Ø£º
//   82 *  Ê¹ÓÃÊ¾Àý£º
//   83 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   84 void LCD_DispStringLen(uint16_t x, uint16_t y, char *s_dat,int num,uint16_t word_color,uint16_t back_color)
LCD_DispStringLen:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function LCD_DispStringLen
//   85 {
        FUNCALL LCD_DispStringLen, LCD_DispChar
        LOCFRAME CSTACK, 30, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R8
        MOV.W   R15, R9
        MOV.W   0x1c(SP), R7
        MOV.W   0x1e(SP), R6
//   86   while(num--)
??LCD_DispStringLen_0:
        MOV.W   R9, R15
        MOV.W   R15, R9
        ADD.W   #0xffff, R9
        CMP.W   #0x0, R15
        JEQ     ??LCD_DispStringLen_1
//   87   {
//   88     LCD_DispChar( x, y,*s_dat++, word_color, back_color);
        PUSH.W  R6
          CFI CFA SP+30
        MOV.W   R7, R15
        MOV.B   @R8, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_DispChar
        ADDA    #0x1, R8
//   89     x+=8;
        ADD.W   #0x8, R10
//   90     if(x>LCD_W-8)
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.W   #0xe9, R10
        JNC     ??LCD_DispStringLen_0
//   91     {
//   92        x=0;
        MOV.W   #0x0, R10
//   93        y+=16;
        ADD.W   #0x10, R11
        JMP     ??LCD_DispStringLen_0
//   94     }
//   95   }
//   96 }
??LCD_DispStringLen_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//   97 /*************************************************************************
//   98 *  º¯ÊýÃû³Æ£º
//   99 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö×Ö·û´®
//  100 *  ²ÎÊýËµÃ÷£º
//  101 *  º¯Êý·µ»Ø£º
//  102 *  Ê¹ÓÃÊ¾Àý£º
//  103 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  104 void LCD_DispStringAt(uint16_t x, uint16_t y, char *s_dat,uint16_t word_color,uint16_t back_color)
LCD_DispStringAt:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function LCD_DispStringAt
//  105 {
        FUNCALL LCD_DispStringAt, LCD_DispChar
        LOCFRAME CSTACK, 30, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R8
        MOV.W   R15, R6
        MOV.W   0x1c(SP), R9
//  106   while(*s_dat!='\0') 
??LCD_DispStringAt_0:
        CMP.B   #0x0, 0(R8)
        JEQ     ??LCD_DispStringAt_1
//  107   {
//  108     LCD_DispChar(x, y, *s_dat++,word_color,back_color);
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R6, R15
        MOV.B   @R8, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_DispChar
        ADDA    #0x1, R8
//  109     x+=8;
        ADD.W   #0x8, R10
//  110     if(x>LCD_W-8)
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.W   #0xe9, R10
        JNC     ??LCD_DispStringAt_0
//  111     {
//  112        x=0;
        MOV.W   #0x0, R10
//  113        y+=16;
        ADD.W   #0x10, R11
        JMP     ??LCD_DispStringAt_0
//  114     }
//  115   }
//  116 }
??LCD_DispStringAt_1:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5
//  117 /*************************************************************************
//  118 *  º¯ÊýÃû³Æ£º
//  119 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸öÕûÊý
//  120 *  ²ÎÊýËµÃ÷£º
//  121 *  º¯Êý·µ»Ø£º
//  122 *  Ê¹ÓÃÊ¾Àý£º
//  123 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  124 void LCD_DispDecAt(uint16_t x,uint16_t y,int number,uint16_t word_color,uint16_t back_color)
LCD_DispDecAt:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function LCD_DispDecAt
//  125 { 
        FUNCALL LCD_DispDecAt, LCD_DispStringAt
        LOCFRAME CSTACK, 48, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R12
          CFI CFA SP+38
        SUB.W   #0x8, SP
          CFI CFA SP+46
        MOV.W   R13, R5
        MOV.W   R14, R11
        MOV.W   R15, R4
        MOV.W   0x2e(SP), R7
//  126   char str[7],j,k=0,i;
        MOV.B   #0x0, R6
//  127   unsigned int c=10000;
        MOV.W   #0x2710, R9
//  128   if(number<0)
        CMP.W   #0x0, R11
        JGE     ??LCD_DispDecAt_1
//  129     {str[0]='-';number=-number;}
        MOV.B   #0x2d, 0(SP)
        XOR.W   #0xffff, R11
        ADD.W   #0x1, R11
        JMP     ??LCD_DispDecAt_2
//  130   else str[0]=' ';
??LCD_DispDecAt_1:
        MOV.B   #0x20, 0(SP)
//  131   for( i=1;i<=5;i++)
??LCD_DispDecAt_2:
        MOV.B   #0x1, R10
??LCD_DispDecAt_0:
        CMP.B   #0x6, R10
        JC      ??LCD_DispDecAt_3
//  132   {
//  133     j=number/c%10;
        MOV.W   R11, R12
        MOV.W   R9, R14
        CALLA   #?DivMod16u
        MOV.W   #0xa, R14
        CALLA   #?DivMod16u
        MOV.B   R14, R8
//  134     if(j==0&&k==0&&i<5)
        CMP.B   #0x0, R8
        JNE     ??LCD_DispDecAt_4
        CMP.B   #0x0, R6
        JNE     ??LCD_DispDecAt_4
        CMP.B   #0x5, R10
        JC      ??LCD_DispDecAt_4
//  135     {
//  136       str[i]=' ';
        MOV.B   R10, R15
        ADD.W   SP, R15
        MOV.B   #0x20, 0(R15)
        JMP     ??LCD_DispDecAt_5
//  137     }
//  138     else
//  139     {
//  140       k=1;
??LCD_DispDecAt_4:
        MOV.B   #0x1, R6
//  141       str[i]=j+'0';
        MOV.B   R8, R14
        ADD.B   #0x30, R14
        MOV.B   R10, R15
        ADD.W   SP, R15
        MOV.B   R14, 0(R15)
//  142     }
//  143     c/=10;
??LCD_DispDecAt_5:
        MOV.W   R9, R12
        MOV.W   #0xa, R14
        CALLA   #?DivMod16u
        MOV.W   R12, R9
//  144   }
        ADD.B   #0x1, R10
        JMP     ??LCD_DispDecAt_0
//  145   str[6]='\0';
??LCD_DispDecAt_3:
        MOV.B   #0x0, 0x6(SP)
//  146   LCD_DispStringAt(x,y,str,word_color,back_color);
        PUSH.W  R7
          CFI CFA SP+48
        MOV.W   R4, R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   R5, R13
        MOV.W   0xa(SP), R12
        CALLA   #LCD_DispStringAt
//  147 }
        ADD.W   #0xc, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock6
//  148 /*************************************************************************
//  149 *  º¯ÊýÃû³Æ£º
//  150 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃÏÔÊ¾Ò»¸ö¸¡µãÊý£¬×¢ÒâÈôÊÇÖ®Ç°ÏÔÊ¾µÄ¸¡µãÊýÎ»Êý¶àÓàµ±Ç°µÄ£¬Ôò¿ÉÄÜ»á±£ÁôÉÏÒ»´ÎµÄÏÔÊ¾
//  151 *  ²ÎÊýËµÃ÷£º
//  152 *  º¯Êý·µ»Ø£º
//  153 *  Ê¹ÓÃÊ¾Àý£º
//  154 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  155 void LCD_DispFolatAt(uint16_t x,uint16_t y,float number,int decimals,uint16_t word_color,uint16_t back_color)
LCD_DispFolatAt:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function LCD_DispFolatAt
//  156 {
        FUNCALL LCD_DispFolatAt, _CmpLt32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Add32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _CmpGe32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Mul32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Div32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Add32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Cast32fto32s
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Cast32sto32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Div32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Cast32fto32u
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Cast32uto32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Mul32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Sub32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, LCD_DispStringAt
        LOCFRAME CSTACK, 82, STACK
        FUNCALL LCD_DispFolatAt, _Mul32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Cast32fto32u
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Cast32uto32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, _Sub32f
        LOCFRAME CSTACK, 80, STACK
        FUNCALL LCD_DispFolatAt, LCD_DispStringAt
        LOCFRAME CSTACK, 82, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R12
          CFI CFA SP+38
        PUSH.W  R13
          CFI CFA SP+40
        SUB.W   #0x28, SP
          CFI CFA SP+80
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOV.W   0x50(SP), R9
//  157   const float _fround[6]={0.49,0.05,0.005,0.0005,0.00005,0.000005};
        MOV.W   SP, R15
        ADD.W   #0x10, R15
        MOV.W   R15, R12
        MOVA    #`?<Constant {(4.90000009E-1F), (5.00000007E-2F)`, R14
        MOVA    #0xc, R13
        CALLA   #?CopyMemoryWords20
//  158   char Str[15];
//  159   char * str=Str;
        MOV.W   SP, R8
        ADD.W   #0x0, R8
//  160   float scale;
//  161   unsigned char i,d;
//  162   if (number<0.0) {number=-number; *str++='-';};
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??LCD_DispFolatAt_3
        XOR.W   #0x8000, R11
        MOV.B   #0x2d, 0(R8)
        ADDA    #0x1, R8
//  163   if (decimals>5) decimals=5;
??LCD_DispFolatAt_3:
        CMP.W   #0x6, R9
        JL      ??LCD_DispFolatAt_4
        MOV.W   #0x5, R9
//  164   number=number+_fround[decimals];
??LCD_DispFolatAt_4:
        MOV.W   R9, R15
        RLAM.W  #0x2, R15
        ADD.W   SP, R15
        MOV.W   0x10(R15), R14
        MOV.W   0x12(R15), R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Add32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  165   i=0;
        MOV.B   #0x0, R4
//  166   scale=1.0;
        MOV.W   #0x0, R6
        MOV.W   #0x3f80, R7
//  167   while (number>=scale) {scale=scale*10.0; ++i;};
??LCD_DispFolatAt_0:
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??LCD_DispFolatAt_5
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        CALLA   #_Mul32f
        MOV.W   R12, R6
        MOV.W   R13, R7
        ADD.B   #0x1, R4
        JMP     ??LCD_DispFolatAt_0
//  168   if (i==0) *str++='0';
??LCD_DispFolatAt_5:
        CMP.B   #0x0, R4
        JNE     ??LCD_DispFolatAt_1
        MOV.B   #0x30, 0(R8)
        ADDA    #0x1, R8
        JMP     ??LCD_DispFolatAt_6
//  169   else
//  170     while (i--)
??LCD_DispFolatAt_1:
        MOV.B   R4, R14
        MOV.B   R14, R4
        ADD.B   #0xff, R4
        CMP.B   #0x0, R14
        JEQ     ??LCD_DispFolatAt_6
//  171     {
//  172       scale=(float)((int32_t)(0.5+scale/10.0));
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        CALLA   #_Div32f
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
        CALLA   #_Add32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R14, R12
        MOV.W   R15, R13
        CALLA   #_Cast32fto32s
        CALLA   #_Cast32sto32f
        MOV.W   R12, R6
        MOV.W   R13, R7
//  173       d=(unsigned char) (number/scale);
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Div32f
        CALLA   #_Cast32fto32u
        MOV.B   R12, R5
//  174       *str++=d+'0';
        MOV.B   R5, R14
        ADD.B   #0x30, R14
        MOV.B   R14, 0(R8)
        ADDA    #0x1, R8
//  175       number=number-scale*d;
        MOV.B   R5, R5
        MOV.W   R5, R12
        MOV.W   #0x0, R13
        CALLA   #_Cast32uto32f
        MOV.W   R6, R14
        MOV.W   R7, R15
        CALLA   #_Mul32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Sub32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        JMP     ??LCD_DispFolatAt_1
//  176      };
//  177   if (decimals==0) {*str=0; LCD_DispStringAt(x,y,Str,word_color,back_color);return;};
??LCD_DispFolatAt_6:
        CMP.W   #0x0, R9
        JNE     ??LCD_DispFolatAt_7
        MOV.B   #0x0, 0(R8)
        PUSH.W  0x56(SP)
          CFI CFA SP+82
        MOV.W   0x54(SP), R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   0x2a(SP), R13
        MOV.W   0x2c(SP), R12
        CALLA   #LCD_DispStringAt
        ADD.W   #0x2, SP
          CFI CFA SP+80
        JMP     ??LCD_DispFolatAt_8
//  178   *str++='.';
??LCD_DispFolatAt_7:
        MOV.B   #0x2e, 0(R8)
        ADDA    #0x1, R8
//  179   while (decimals--)
??LCD_DispFolatAt_2:
        MOV.W   R9, R15
        MOV.W   R15, R9
        ADD.W   #0xffff, R9
        CMP.W   #0x0, R15
        JEQ     ??LCD_DispFolatAt_9
//  180   {
//  181     number=number*10.0;
        MOV.W   #0x0, R14
        MOV.W   #0x4120, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Mul32f
        MOV.W   R12, R10
        MOV.W   R13, R11
//  182     d=(unsigned char)number;
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Cast32fto32u
        MOV.B   R12, R5
//  183     *str++=d+'0';
        MOV.B   R5, R14
        ADD.B   #0x30, R14
        MOV.B   R14, 0(R8)
        ADDA    #0x1, R8
//  184     number=number-d;
        MOV.B   R5, R5
        MOV.W   R5, R12
        MOV.W   #0x0, R13
        CALLA   #_Cast32uto32f
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Sub32f
        MOV.W   R12, R10
        MOV.W   R13, R11
        JMP     ??LCD_DispFolatAt_2
//  185   }
//  186   *str=0;
??LCD_DispFolatAt_9:
        MOV.B   #0x0, 0(R8)
//  187   LCD_DispStringAt(x,y,Str,word_color,back_color);
        PUSH.W  0x56(SP)
          CFI CFA SP+82
        MOV.W   0x54(SP), R15
        MOV.W   SP, R14
        ADD.W   #0x2, R14
        MOV.W   0x2a(SP), R13
        MOV.W   0x2c(SP), R12
        CALLA   #LCD_DispStringAt
//  188 }
        ADD.W   #0x2, SP
          CFI CFA SP+80
??LCD_DispFolatAt_8:
        ADD.W   #0x2c, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock7
//  189 /*************************************************************************
//  190 *  º¯ÊýÃû³Æ£º
//  191 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Á½¸öµãÁ¬Ïß
//  192 *  ²ÎÊýËµÃ÷£º
//  193 *  º¯Êý·µ»Ø£º
//  194 *  Ê¹ÓÃÊ¾Àý£º
//  195 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  196 void LCD_Draw_Line(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_Draw_Line:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function LCD_Draw_Line
//  197 {
        FUNCALL LCD_Draw_Line, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_Write_DATA16
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Draw_Line, LCD_SetPos
        LOCFRAME CSTACK, 44, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x8, SP
          CFI CFA SP+44
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R14, R4
        MOV.W   R15, R7
//  198   uint16_t i,ds;
//  199   int dx,dy,inc_x, inc_y;
//  200   int xerr = 0, yerr = 0;				//³õÊ¼»¯±äÁ¿
        MOV.W   #0x0, R6
        MOV.W   #0x0, R9
//  201 
//  202   if(xs==xe)	  						//Èç¹ûÊÇ»­´¹Ö±ÏßÔòÖ»Ðè¶ÔÊúÖ±×ø±ê¼ÆÊý
        CMP.W   R4, R10
        JNE     ??LCD_Draw_Line_3
//  203   {
//  204     LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
        MOV.W   R7, R15
        MOV.W   R4, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_SetPos
//  205     for(i=0;i<(ye-ys+1);i++)
        MOV.W   #0x0, R8
??LCD_Draw_Line_0:
        MOV.W   R7, R15
        SUB.W   R11, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R8
        JC      ??LCD_Draw_Line_4
//  206     {
//  207        LCD_WR_WORD(color_dat);
        MOV.W   0x2c(SP), R12
        CALLA   #LCD_Write_DATA16
//  208     }
        ADD.W   #0x1, R8
        JMP     ??LCD_Draw_Line_0
//  209   }
//  210   else if(ys==ye)						//Èç¹ûÊÇË®Æ½ÏßÔòÖ»ÐèÒª¶ÔË®Æ½×ø±ê¼ÆÊý
??LCD_Draw_Line_3:
        CMP.W   R7, R11
        JNE     ??LCD_Draw_Line_5
//  211   {
//  212     LCD_PTLON(xs,ys,xe,ye);//LCD_SetPos(xs,ys,xe,ye);
        MOV.W   R7, R15
        MOV.W   R4, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_SetPos
//  213     for(i=0;i<(xe-xs+1);i++)
        MOV.W   #0x0, R8
??LCD_Draw_Line_1:
        MOV.W   R4, R15
        SUB.W   R10, R15
        ADD.W   #0x1, R15
        CMP.W   R15, R8
        JC      ??LCD_Draw_Line_4
//  214     {
//  215        LCD_WR_WORD(color_dat);
        MOV.W   0x2c(SP), R12
        CALLA   #LCD_Write_DATA16
//  216     }
        ADD.W   #0x1, R8
        JMP     ??LCD_Draw_Line_1
//  217   } 
//  218   else											//Èç¹ûÊÇÐ±Ïß£¬ÔòÖØÐÂ¼ÆËã£¬Ê¹ÓÃ»­µãº¯Êý»­³öÖ±Ïß
//  219   {
//  220     dx = xe - xs;								//¼ÆËã×ø±êÔöÁ¿
??LCD_Draw_Line_5:
        MOV.W   R4, R15
        SUB.W   R10, R15
        MOV.W   R15, 0(SP)
//  221     dy = ye - ys;
        MOV.W   R7, R15
        SUB.W   R11, R15
        MOV.W   R15, R5
//  222 
//  223     if(dx > 0) inc_x = 1;						//ÉèÖÃµ¥²½·½Ïò
        CMP.W   #0x1, 0(SP)
        JL      ??LCD_Draw_Line_6
        MOV.W   #0x1, 0x6(SP)
        JMP     ??LCD_Draw_Line_7
//  224     else 
//  225     {
//  226       inc_x = -1; dx = -dx;
??LCD_Draw_Line_6:
        MOV.W   #0xffff, 0x6(SP)
        MOV.W   @SP, R15
        XOR.W   #0xffff, R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0(SP)
//  227     }
//  228     if(dy > 0) inc_y = 1;						//ÉèÖÃµ¥²½·½Ïò
??LCD_Draw_Line_7:
        CMP.W   #0x1, R5
        JL      ??LCD_Draw_Line_8
        MOV.W   #0x1, 0x4(SP)
        JMP     ??LCD_Draw_Line_9
//  229     else
//  230     {
//  231       inc_y = -1; dy = -dy;
??LCD_Draw_Line_8:
        MOV.W   #0xffff, 0x4(SP)
        XOR.W   #0xffff, R5
        ADD.W   #0x1, R5
//  232     }
//  233 
//  234     if(dx > dy) ds = dx;						//Ñ¡È¡»ù±¾ÔöÁ¿×ø±êÖá
??LCD_Draw_Line_9:
        CMP.W   @SP, R5
        JGE     ??LCD_Draw_Line_10
        MOV.W   @SP, 0x2(SP)
        JMP     ??LCD_Draw_Line_11
//  235     else		
//  236       ds = dy;
??LCD_Draw_Line_10:
        MOV.W   R5, 0x2(SP)
//  237     for(i = 0; i <= ds+1; i++)					//»­ÏßÊä³ö
??LCD_Draw_Line_11:
        MOV.W   #0x0, R8
??LCD_Draw_Line_2:
        MOV.W   0x2(SP), R15
        ADD.W   #0x1, R15
        CMP.W   R8, R15
        JNC     ??LCD_Draw_Line_4
//  238     {
//  239       LCD_PTLON(xs,ys,xe,ye);//LCD_draw_dot(xs, ys,color_dat);	//»­µã
        MOV.W   R7, R15
        MOV.W   R4, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_SetPos
//  240       xerr += dx;
        ADD.W   @SP, R6
//  241       yerr += dy;
        ADD.W   R5, R9
//  242       if(xerr > ds)
        CMP.W   R6, 0x2(SP)
        JC      ??LCD_Draw_Line_12
//  243       {
//  244         xerr -= ds;
        SUB.W   0x2(SP), R6
//  245         xs   += inc_x;
        ADD.W   0x6(SP), R10
//  246       }
//  247       if(yerr > ds)
??LCD_Draw_Line_12:
        CMP.W   R9, 0x2(SP)
        JC      ??LCD_Draw_Line_13
//  248       {
//  249         yerr -= ds;
        SUB.W   0x2(SP), R9
//  250         ys   += inc_y;
        ADD.W   0x4(SP), R11
//  251       }
//  252     }
??LCD_Draw_Line_13:
        ADD.W   #0x1, R8
        JMP     ??LCD_Draw_Line_2
//  253   }  
//  254 }
??LCD_Draw_Line_4:
        ADD.W   #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8
//  255 /*************************************************************************
//  256 *  º¯ÊýÃû³Æ£º
//  257 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸ö³¤·½ÐÎ
//  258 *  ²ÎÊýËµÃ÷£º
//  259 *  º¯Êý·µ»Ø£º
//  260 *  Ê¹ÓÃÊ¾Àý£º
//  261 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  262 void LCD_Draw_Rectangle(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t color_dat)
LCD_Draw_Rectangle:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function LCD_Draw_Rectangle
//  263 {
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 30, STACK
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 32, STACK
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 34, STACK
        FUNCALL LCD_Draw_Rectangle, LCD_Draw_Line
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R6
        MOV.W   R13, R10
        MOV.W   R14, R11
        MOV.W   R15, R8
        MOV.W   0x1c(SP), R9
//  264   LCD_Draw_Line(xs,ys,xs,ye,color_dat);	  //»­¾ØÐÎ×ó±ß
        PUSH.W  R9
          CFI CFA SP+30
        MOV.W   R8, R15
        MOV.W   R6, R14
        MOV.W   R10, R13
        MOV.W   R6, R12
        CALLA   #LCD_Draw_Line
//  265   LCD_Draw_Line(xe,ys,xe,ye,color_dat);	  //»­¾ØÐÎÓÒ±ß
        PUSH.W  R9
          CFI CFA SP+32
        MOV.W   R8, R15
        MOV.W   R11, R14
        MOV.W   R10, R13
        MOV.W   R11, R12
        CALLA   #LCD_Draw_Line
//  266   LCD_Draw_Line(xs,ys,xe,ys,color_dat);	  //»­¾ØÐÎÉÏ±ß
        PUSH.W  R9
          CFI CFA SP+34
        MOV.W   R10, R15
        MOV.W   R11, R14
        MOV.W   R10, R13
        MOV.W   R6, R12
        CALLA   #LCD_Draw_Line
//  267   LCD_Draw_Line(xs,ye,xe,ye,color_dat);	  //»­¾ØÐÎÏÂ±ß
        PUSH.W  R9
          CFI CFA SP+36
        MOV.W   R8, R15
        MOV.W   R11, R14
        MOV.W   R8, R13
        MOV.W   R6, R12
        CALLA   #LCD_Draw_Line
//  268 }
        ADD.W   #0x8, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock9
//  269 /*************************************************************************
//  270 *  º¯ÊýÃû³Æ£º
//  271 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸öÈ·¶¨°ë¾¶µÄÔ²
//  272 *  ²ÎÊýËµÃ÷£º
//  273 *  º¯Êý·µ»Ø£º
//  274 *  Ê¹ÓÃÊ¾Àý£º
//  275 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  276 void LCD_Draw_Circle(uint16_t x,uint16_t y,uint16_t r,uint16_t color_dat)
LCD_Draw_Circle:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function LCD_Draw_Circle
//  277 {
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        FUNCALL LCD_Draw_Circle, LCD_Draw_Dot
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.W   R12, R11
        MOV.W   R13, R8
        MOV.W   R14, R7
        MOV.W   R15, R10
//  278   unsigned char dx, dy = r; 
        PUSH.W  R9
          CFI CFA SP+30
        MOV.B   R7, 0(SP)
        POP.W   R9
          CFI CFA SP+28
//  279   if((x>=r) &&((128-x)>=r) && (y>=r) && ((160-y)>=r))		//È·¶¨Ëù»­Ô²ÔÚÆÁÄ»·¶Î§ÄÚ£¬Ã»ÓÐ³¬³ö×îÍâ±ß£¬(ÔÝ²»Ö§³ÖÓëÆÁÄ»±ßÏà½»)
        CMP.W   R7, R11
        JNC     ??LCD_Draw_Circle_2
        MOV.W   #0x80, R15
        SUB.W   R11, R15
        CMP.W   R7, R15
        JNC     ??LCD_Draw_Circle_2
        CMP.W   R7, R8
        JNC     ??LCD_Draw_Circle_2
        MOV.W   #0xa0, R15
        SUB.W   R8, R15
        CMP.W   R7, R15
        JNC     ??LCD_Draw_Circle_2
//  280   {
//  281     for(dx = 0; dx <= r; dx++)
        MOV.B   #0x0, R6
??LCD_Draw_Circle_1:
        MOV.B   R6, R6
        CMP.W   R6, R7
        JNC     ??LCD_Draw_Circle_2
//  282     {
//  283       while((r * r + 1 - dx * dx) < (dy * dy)) dy--;
??LCD_Draw_Circle_0:
        PUSH.W  SR
          CFI CFA SP+30
        DINT
        NOP
        MOV.W   R7, &0x4c0
        MOV.W   R7, &0x4c8
        MOV.W   &0x4ca, R15
        POP.W   SR
          CFI CFA SP+28
        ADD.W   #0x1, R15
        PUSH.W  SR
          CFI CFA SP+30
        DINT
        NOP
        MOV.B   R6, &0x4c0
        MOV.B   R6, &0x4c8
        MOV.W   &0x4ca, R14
        POP.W   SR
          CFI CFA SP+28
        SUB.W   R14, R15
        PUSH.W  SR
          CFI CFA SP+30
        DINT
        NOP
        MOV.B   R9, &0x4c0
        MOV.B   R9, &0x4c8
        MOV.W   &0x4ca, R14
        POP.W   SR
          CFI CFA SP+28
        CMP.W   R14, R15
        JC      ??LCD_Draw_Circle_3
        ADD.B   #0xff, R9
        JMP     ??LCD_Draw_Circle_0
//  284       LCD_Draw_Dot(x + dx, y - dy, color_dat);
??LCD_Draw_Circle_3:
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        SUB.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        ADD.W   R6, R12
        CALLA   #LCD_Draw_Dot
//  285       LCD_Draw_Dot(x - dx, y - dy, color_dat);
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        SUB.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        SUB.W   R6, R12
        CALLA   #LCD_Draw_Dot
//  286       LCD_Draw_Dot(x - dx, y + dy, color_dat);
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        ADD.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        SUB.W   R6, R12
        CALLA   #LCD_Draw_Dot
//  287       LCD_Draw_Dot(x + dx, y + dy, color_dat);
        MOV.W   R10, R14
        MOV.B   R9, R9
        MOV.W   R8, R13
        ADD.W   R9, R13
        MOV.B   R6, R6
        MOV.W   R11, R12
        ADD.W   R6, R12
        CALLA   #LCD_Draw_Dot
//  288       LCD_Draw_Dot(x + dy, y - dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        SUB.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        ADD.W   R9, R12
        CALLA   #LCD_Draw_Dot
//  289       LCD_Draw_Dot(x - dy, y - dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        SUB.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        SUB.W   R9, R12
        CALLA   #LCD_Draw_Dot
//  290       LCD_Draw_Dot(x - dy, y + dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        ADD.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        SUB.W   R9, R12
        CALLA   #LCD_Draw_Dot
//  291       LCD_Draw_Dot(x + dy, y + dx, color_dat);
        MOV.W   R10, R14
        MOV.B   R6, R6
        MOV.W   R8, R13
        ADD.W   R6, R13
        MOV.B   R9, R9
        MOV.W   R11, R12
        ADD.W   R9, R12
        CALLA   #LCD_Draw_Dot
//  292     }
        ADD.B   #0x1, R6
        JMP     ??LCD_Draw_Circle_1
//  293   }
//  294 }
??LCD_Draw_Circle_2:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock10
//  295 /*************************************************************************
//  296 *  º¯ÊýÃû³Æ£º
//  297 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨Î»ÖÃ»­Ò»¸öµã
//  298 *  ²ÎÊýËµÃ÷£º
//  299 *  º¯Êý·µ»Ø£º
//  300 *  Ê¹ÓÃÊ¾Àý£º
//  301 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  302 void LCD_Draw_Dot(uint16_t x,uint16_t y,uint16_t color_dat)
LCD_Draw_Dot:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function LCD_Draw_Dot
//  303 {
        FUNCALL LCD_Draw_Dot, LCD_SetPos
        LOCFRAME CSTACK, 20, STACK
        FUNCALL LCD_Draw_Dot, LCD_Write_DATA16
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOV.W   R14, R8
//  304   LCD_PTLON(x,y,x,y); 
        MOV.W   R11, R15
        MOV.W   R10, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_SetPos
//  305   LCD_WR_WORD(color_dat);
        MOV.W   R8, R12
        CALLA   #LCD_Write_DATA16
//  306 }
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock11
//  307 /*************************************************************************
//  308 *  º¯ÊýÃû³Æ£º
//  309 *  ¹¦ÄÜËµÃ÷£ºÖ¸¶¨ÇøÓòÏÔÊ¾Ò»¸±Í¼Ïñ
//  310 *  ²ÎÊýËµÃ÷£º
//  311 *  º¯Êý·µ»Ø£º
//  312 *  Ê¹ÓÃÊ¾Àý£º
//  313 *************************************************************************/ 

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  314 void LCD_Show_Picture(uint16_t xs,uint16_t ys,uint16_t xe,uint16_t ye,uint16_t pic[])
LCD_Show_Picture:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function LCD_Show_Picture
//  315 {
        FUNCALL LCD_Show_Picture, LCD_SetPos
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_Show_Picture, LCD_Write_DATA16
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.W   R12, R4
        MOV.W   R13, R7
        MOV.W   R14, R6
        MOV.W   R15, R11
        MOVA    0x24(SP), R5
//  316   unsigned int i,j,k=0;
        MOV.W   #0x0, R10
//  317 
//  318   LCD_PTLON(xs,ys,xe,ye);
        MOV.W   R11, R15
        MOV.W   R6, R14
        MOV.W   R7, R13
        MOV.W   R4, R12
        CALLA   #LCD_SetPos
//  319   for(i=0;i<ye-ys;i++)
        MOV.W   #0x0, R8
??LCD_Show_Picture_1:
        MOV.W   R11, R15
        SUB.W   R7, R15
        CMP.W   R15, R8
        JC      ??LCD_Show_Picture_2
//  320   { 
//  321     for(j=0;j<xe-xs;j++)
        MOV.W   #0x0, R9
??LCD_Show_Picture_0:
        MOV.W   R6, R15
        SUB.W   R4, R15
        CMP.W   R15, R9
        JC      ??LCD_Show_Picture_3
//  322     {
//  323       LCD_WR_WORD(pic[k++]);	
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R5, R15
        MOV.W   @R15, R12
        CALLA   #LCD_Write_DATA16
        ADD.W   #0x1, R10
//  324     }
        ADD.W   #0x1, R9
        JMP     ??LCD_Show_Picture_0
//  325   }
??LCD_Show_Picture_3:
        ADD.W   #0x1, R8
        JMP     ??LCD_Show_Picture_1
//  326 }
??LCD_Show_Picture_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock12
//  327 /*************************************************************************
//  328 *  º¯ÊýÃû³Æ£ºLCD_Printf_8x16
//  329 *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
//  330 *  ²ÎÊýËµÃ÷£º
//  331 *  º¯Êý·µ»Ø£ºÎÞ
//  332 *  Ê¹ÓÃÊ¾Àý£ºLCD_Printf_8x16("Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
//  333 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  334 void LCD_Printf_8x16(uint16_t x,uint16_t y,const char * fmt,...)
LCD_Printf_8x16:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function LCD_Printf_8x16
//  335 {
        FUNCALL LCD_Printf_8x16, vsprintf
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf_8x16, strlen
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf_8x16, LCD_DispStringLen
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf_8x16, LCD_DispStringLen
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf_8x16, LCD_DispChar
        LOCFRAME CSTACK, 42, STACK
        FUNCALL LCD_Printf_8x16, LCD_DispStringLen
        LOCFRAME CSTACK, 44, STACK
        FUNCALL LCD_Printf_8x16, free
        LOCFRAME CSTACK, 40, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x4, SP
          CFI CFA SP+40
        MOV.W   R12, R10
        MOV.W   R13, R11
        MOVA    R14, R5
//  336   static char LCD_String[256];
//  337   va_list ap;
//  338   va_start(ap,fmt);
        MOV.W   SP, R15
        ADD.W   #0x28, R15
        MOVA    R15, 0(SP)
//  339   vsprintf(LCD_String,fmt,ap);
        PUSH.W  0x4(SP)
          CFI CFA SP+42
        PUSH.W  0x4(SP)
          CFI CFA SP+44
        MOVA    R5, R13
        MOVA    #??LCD_String, R12
        CALLA   #vsprintf
//  340   uint8_t lastposition=0;
        MOV.B   #0x0, R8
//  341   int length=strlen(LCD_String);
        MOVA    #??LCD_String, R12
        CALLA   #strlen
        MOV.W   R12, R6
        MOV.W   R13, R7
//  342   int TEXT_SIZE=LCD_W/8;
        MOV.W   #0x1e, R4
//  343   for(int i=0;i <= length;i++)
        MOV.W   #0x0, R9
        ADD.W   #0x4, SP
          CFI CFA SP+40
??LCD_Printf_8x16_2:
        CMP.W   R9, R6
        JL      ??LCD_Printf_8x16_4
//  344   {
//  345     if(LCD_String[i] == '\n')
        MOV.W   R9, R15
        CMPX.B  #0xa, ??LCD_String(R15)
        JNE     ??LCD_Printf_8x16_5
//  346     {
//  347       uint8_t position=i;
        PUSH.W  R7
          CFI CFA SP+42
        MOV.B   R9, 0(SP)
        POP.W   R7
          CFI CFA SP+40
//  348       while(position>lastposition)
??LCD_Printf_8x16_0:
        CMP.B   R7, R8
        JC      ??LCD_Printf_8x16_3
//  349       {
//  350         if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
        MOV.B   R7, R15
        MOV.B   R8, R8
        SUB.W   R8, R15
        CMP.W   R15, R4
        JGE     ??LCD_Printf_8x16_6
//  351         {
//  352            LCD_DispStringLen(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        PUSHX.W &POINT_COLOR
          CFI CFA SP+44
        MOV.W   R4, R15
        MOV.B   R8, R14
        ADDA    #??LCD_String, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_DispStringLen
//  353            y+=16;//»»ÐÐ
        ADD.W   #0x10, R11
//  354            x=0;
        MOV.W   #0x0, R10
//  355            lastposition+=TEXT_SIZE;
        ADD.B   R4, R8
        ADD.W   #0x4, SP
          CFI CFA SP+40
        JMP     ??LCD_Printf_8x16_0
//  356         }
//  357         else
//  358         {
//  359           LCD_DispStringLen(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
??LCD_Printf_8x16_6:
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        PUSHX.W &POINT_COLOR
          CFI CFA SP+44
        MOV.B   R7, R15
        MOV.B   R8, R8
        SUB.W   R8, R15
        MOV.B   R8, R14
        ADDA    #??LCD_String, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_DispStringLen
//  360           for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
        MOV.B   R7, R15
        MOV.B   R8, R8
        SUB.W   R8, R15
        RLAM.W  #0x3, R15
        ADD.W   R15, R10
        ADD.W   #0x4, SP
          CFI CFA SP+40
??LCD_Printf_8x16_1:
        CMP.W   #0xf0, R10
        JC      ??LCD_Printf_8x16_3
//  361           {
//  362              LCD_DispChar(x,y,' ',POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_DispChar
//  363           }
        ADD.W   #0x8, R10
        ADD.W   #0x2, SP
          CFI CFA SP+40
        JMP     ??LCD_Printf_8x16_1
//  364           break;
//  365         }
//  366       } 
//  367       lastposition=position+1;
??LCD_Printf_8x16_3:
        MOV.B   R7, R14
        ADD.B   #0x1, R14
        MOV.B   R14, R8
//  368       //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
//  369       x=0;
        MOV.W   #0x0, R10
//  370       y+=16;
        ADD.W   #0x10, R11
//  371       if(y>=LCD_H)y=0;
        CMP.W   #0x140, R11
        JNC     ??LCD_Printf_8x16_5
        MOV.W   #0x0, R11
//  372     }
//  373   }
??LCD_Printf_8x16_5:
        ADD.W   #0x1, R9
        JMP     ??LCD_Printf_8x16_2
//  374   if(lastposition<length)
??LCD_Printf_8x16_4:
        MOV.B   R8, R8
        CMP.W   R6, R8
        JGE     ??LCD_Printf_8x16_7
//  375     LCD_DispStringLen(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+42
        PUSHX.W &POINT_COLOR
          CFI CFA SP+44
        MOV.B   R8, R8
        MOV.W   R6, R15
        SUB.W   R8, R15
        MOV.B   R8, R14
        ADDA    #??LCD_String, R14
        MOV.W   R11, R13
        MOV.W   R10, R12
        CALLA   #LCD_DispStringLen
        ADD.W   #0x4, SP
          CFI CFA SP+40
//  376   va_end(ap);
//  377   free(LCD_String);
??LCD_Printf_8x16_7:
        MOVA    #??LCD_String, R12
        CALLA   #free
//  378 }
        ADD.W   #0x4, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock13

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
??LCD_String:
        DS8 256
//  379 /*************************************************************************
//  380 *  º¯ÊýÃû³Æ£ºLCD_Printf
//  381 *  ¹¦ÄÜËµÃ÷£ºÏÔÊ¾×Ö·û´®
//  382 *  ²ÎÊýËµÃ÷£º
//  383 *  º¯Êý·µ»Ø£ºÎÞ
//  384 *  Ê¹ÓÃÊ¾Àý£ºLCD_Printf"Hello!:i=%d,J=%f",i,1.0);  //·¢ËÍÒ»¸ö×Ö·û´®
//  385 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  386 void LCD_Printf(const char * fmt,...)
LCD_Printf:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function LCD_Printf
//  387 {
        FUNCALL LCD_Printf, vsprintf
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_Printf, strlen
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_Printf, LCD_DispStringLen
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_Printf, LCD_Clear
        LOCFRAME CSTACK, 32, STACK
        FUNCALL LCD_Printf, LCD_DispStringLen
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_Printf, LCD_DispChar
        LOCFRAME CSTACK, 34, STACK
        FUNCALL LCD_Printf, LCD_Clear
        LOCFRAME CSTACK, 32, STACK
        FUNCALL LCD_Printf, LCD_DispStringLen
        LOCFRAME CSTACK, 36, STACK
        FUNCALL LCD_Printf, LCD_Clear
        LOCFRAME CSTACK, 32, STACK
        FUNCALL LCD_Printf, LCD_DispChar
        LOCFRAME CSTACK, 34, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        SUB.W   #0x4, SP
          CFI CFA SP+32
        MOVA    R12, R7
//  388   static char LCD_String[256];
//  389   static uint16_t x=0,y=0;
//  390   va_list ap;
//  391   va_start(ap,fmt);
        MOV.W   SP, R15
        ADD.W   #0x20, R15
        MOVA    R15, 0(SP)
//  392   vsprintf(LCD_String,fmt,ap);
        PUSH.W  0x4(SP)
          CFI CFA SP+34
        PUSH.W  0x4(SP)
          CFI CFA SP+36
        MOVA    R7, R13
        MOVA    #??LCD_String_1, R12
        CALLA   #vsprintf
//  393   uint8_t lastposition=0;
        MOV.B   #0x0, R10
//  394   int length=strlen(LCD_String);          
        MOVA    #??LCD_String_1, R12
        CALLA   #strlen
        MOV.W   R12, R6
//  395   int TEXT_SIZE=LCD_W/8;
        MOV.W   #0x1e, R9
//  396   for(int i=0;i<=length;i++)
        MOV.W   #0x0, R11
        ADD.W   #0x4, SP
          CFI CFA SP+32
??LCD_Printf_2:
        CMP.W   R11, R6
        JL      ??LCD_Printf_6
//  397   {
//  398     if(LCD_String[i]=='\n')     //Óöµ½»»ÐÐ·û
        MOV.W   R11, R15
        CMPX.B  #0xa, ??LCD_String_1(R15)
        JNE     ??LCD_Printf_7
//  399     {
//  400       uint8_t position=i;
        PUSH.W  R8
          CFI CFA SP+34
        MOV.B   R11, 0(SP)
        POP.W   R8
          CFI CFA SP+32
//  401       while(position>lastposition)  //ÈôÓÐÒ»¶Î×Ö·û´®Ã»ÓÐÏÔÊ¾£¬ÔòÏÔÊ¾ÍêÎªÖ¹
??LCD_Printf_0:
        CMP.B   R8, R10
        JC      ??LCD_Printf_5
//  402       {
//  403         if((position-lastposition)>TEXT_SIZE)//Èç¹ûÒ»ÐÐÒªÏÔÊ¾µÄ×Ö·û´®ÊýÁ¿´óÓÚ16£¬ÔòÐèÒª»»ÐÐ
        MOV.B   R8, R15
        MOV.B   R10, R10
        SUB.W   R10, R15
        CMP.W   R15, R9
        JGE     ??LCD_Printf_8
//  404         {
//  405            LCD_DispStringLen(x,y,&LCD_String[lastposition],TEXT_SIZE,POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        PUSHX.W &POINT_COLOR
          CFI CFA SP+36
        MOV.W   R9, R15
        MOV.B   R10, R14
        ADDA    #??LCD_String_1, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
        CALLA   #LCD_DispStringLen
//  406            y+=16;//»»ÐÐ
        ADDX.W  #0x10, &??y
//  407            if(y>=LCD_H)
        ADD.W   #0x4, SP
          CFI CFA SP+32
        CMPX.W  #0x140, &??y
        JNC     ??LCD_Printf_9
//  408            {
//  409              y=0;
        MOVX.W  #0x0, &??y
//  410              LCD_Clear(BACK_COLOR);
        MOVX.W  &BACK_COLOR, R12
        CALLA   #LCD_Clear
//  411            }
//  412            x=0;
??LCD_Printf_9:
        MOVX.W  #0x0, &??x
//  413            lastposition+=TEXT_SIZE;
        ADD.B   R9, R10
        JMP     ??LCD_Printf_0
//  414         }
//  415         else
//  416         {
//  417           LCD_DispStringLen(x,y,&LCD_String[lastposition],(position-lastposition),POINT_COLOR,BACK_COLOR);
??LCD_Printf_8:
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        PUSHX.W &POINT_COLOR
          CFI CFA SP+36
        MOV.B   R8, R15
        MOV.B   R10, R10
        SUB.W   R10, R15
        MOV.B   R10, R14
        ADDA    #??LCD_String_1, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
        CALLA   #LCD_DispStringLen
//  418           for(x+=(position-lastposition)*8;x < LCD_W;x+=8)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
        MOV.B   R8, R15
        MOV.B   R10, R10
        SUB.W   R10, R15
        RLAM.W  #0x3, R15
        ADDX.W  R15, &??x
        ADD.W   #0x4, SP
          CFI CFA SP+32
??LCD_Printf_1:
        CMPX.W  #0xf0, &??x
        JC      ??LCD_Printf_5
//  419           {
//  420              LCD_DispChar(x,y,' ',POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
        CALLA   #LCD_DispChar
//  421           }
        ADDX.W  #0x8, &??x
        ADD.W   #0x2, SP
          CFI CFA SP+32
        JMP     ??LCD_Printf_1
//  422           break;
//  423         }
//  424       } 
//  425       lastposition=position+1;
??LCD_Printf_5:
        MOV.B   R8, R14
        ADD.B   #0x1, R14
        MOV.B   R14, R10
//  426       //»»ÐÐºóX=0,yÏÂÒÆÒ»ÐÐ
//  427       x=0;
        MOVX.W  #0x0, &??x
//  428       y+=16;
        ADDX.W  #0x10, &??y
//  429       if(y>=LCD_H)
        CMPX.W  #0x140, &??y
        JNC     ??LCD_Printf_7
//  430       {
//  431         y=0;
        MOVX.W  #0x0, &??y
//  432         LCD_Clear(BACK_COLOR);
        MOVX.W  &BACK_COLOR, R12
        CALLA   #LCD_Clear
//  433       }
//  434     }
//  435   }
??LCD_Printf_7:
        ADD.W   #0x1, R11
        JMP     ??LCD_Printf_2
//  436   if(lastposition<length)
??LCD_Printf_6:
        MOV.B   R10, R10
        CMP.W   R6, R10
        JGE     ??LCD_Printf_10
//  437   {
//  438     LCD_DispStringLen(x,y,&LCD_String[lastposition],(length-lastposition),POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        PUSHX.W &POINT_COLOR
          CFI CFA SP+36
        MOV.B   R10, R10
        MOV.W   R6, R15
        SUB.W   R10, R15
        MOV.B   R10, R14
        ADDA    #??LCD_String_1, R14
        MOVX.W  &??y, R13
        MOVX.W  &??x, R12
        CALLA   #LCD_DispStringLen
//  439     x+=(length-lastposition)*8;
        MOV.B   R10, R10
        MOV.W   R6, R15
        SUB.W   R10, R15
        RLAM.W  #0x3, R15
        ADDX.W  R15, &??x
        ADD.W   #0x4, SP
          CFI CFA SP+32
//  440     while(x>=LCD_W)
??LCD_Printf_3:
        CMPX.W  #0xf0, &??x
        JNC     ??LCD_Printf_11
//  441     {
//  442        y+=16;
        ADDX.W  #0x10, &??y
//  443        x-=LCD_W;
        ADDX.W  #0xff10, &??x
//  444        if(y>=LCD_H)
        CMPX.W  #0x140, &??y
        JNC     ??LCD_Printf_3
//  445        {
//  446          y=0;
        MOVX.W  #0x0, &??y
//  447          LCD_Clear(BACK_COLOR);
        MOVX.W  &BACK_COLOR, R12
        CALLA   #LCD_Clear
        JMP     ??LCD_Printf_3
//  448        }
//  449     }
//  450     for(int i=x;i < LCD_W;i++)   //½«¸ÃÐÐÎ´ÏÔÊ¾µÄ²¿·ÖÇåÁã
??LCD_Printf_11:
        MOVX.W  &??x, R11
??LCD_Printf_4:
        CMP.W   #0xf0, R11
        JGE     ??LCD_Printf_10
//  451     {
//  452       LCD_DispChar(i,y,' ',POINT_COLOR,BACK_COLOR);
        PUSHX.W &BACK_COLOR
          CFI CFA SP+34
        MOVX.W  &POINT_COLOR, R15
        MOV.B   #0x20, R14
        MOVX.W  &??y, R13
        MOV.W   R11, R12
        CALLA   #LCD_DispChar
//  453     }
        ADD.W   #0x1, R11
        ADD.W   #0x2, SP
          CFI CFA SP+32
        JMP     ??LCD_Printf_4
//  454   }
//  455   va_end(ap);
//  456 }
??LCD_Printf_10:
        ADD.W   #0x4, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock14

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
??LCD_String_1:
        DS8 256

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??x:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
??y:
        DS8 2

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for POINT_COLOR>`:
        DC16 63488

        RSEG DATA20_ID:CONST:SORT:NOROOT(1)
`?<Initializer for BACK_COLOR>`:
        DC16 65535

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 2 484 bytes in segment CODE
// 5 365 bytes in segment DATA20_C
//     4 bytes in segment DATA20_I
//     4 bytes in segment DATA20_ID
//   516 bytes in segment DATA20_Z
// 
// 2 470 bytes of CODE  memory (+ 14 bytes shared)
// 5 369 bytes of CONST memory
//   520 bytes of DATA  memory
//
//Errors: none
//Warnings: none
