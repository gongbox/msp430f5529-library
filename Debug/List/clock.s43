///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      26/Nov/2016  11:15:12 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\clock.c                                              /
//    Command line  =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\clock.c -D DEBUG -D RAM_VECTOR -lA                   /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \ -o E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug /
//                     \Obj\ --no_cse --no_unroll --no_inline                 /
//                     --no_code_motion --no_tbaa --debug -D__MSP430F5529__   /
//                     -e --double=32 --dlib_config "D:\Program Files\IAR     /
//                     Systems\Embedded Workbench 6.4                         /
//                     Evaluation\430\LIB\DLIB\dl430xlff.h" -I                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\in /
//                     c\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Driv /
//                     ers\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\Drivers\src\USB\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I             /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\ /
//                     ¹¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_HID_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_MSC_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\  /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWar /
//                     e\delay\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\HardWare\18b20\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\KEY\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Har /
//                     dWare\12864\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\HardWare\oled\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6 /
//                     \C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc\ -I                 /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\m /
//                     pu6050\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³Ì /
//                     Ä£°å\HardWare\nokia5110\inc\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     okia5110\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤ /
//                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                         /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å /
//                     \HardWare\2.2TFT\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\ -I                       /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\    /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\ /
//                     inc\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Sy /
//                     stem\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£ /
//                     °å\User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\User\USER\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII /
//                     \App\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\L /
//                     ib\uCOSII\CONFIHG\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII /
//                     \CORE\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ /
//                     Lib\FatFs\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ /
//                     £°å\Lib\FatFs\option\ --core=430X --data_model=large   /
//                     -On --multiplier=32 --multiplier_location=4C0          /
//                     --hw_workaround=CPU40                                  /
//    List file     =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \clock.s43                                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME clock

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?ShiftRight32u
        EXTERN ?DivMod32u
        EXTERN ?DivMod16u
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC CLOCK_ACLK_Config
        FUNCTION CLOCK_ACLK_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC CLOCK_DCO_PLLConfig
        FUNCTION CLOCK_DCO_PLLConfig,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC CLOCK_MCLK_Config
        FUNCTION CLOCK_MCLK_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC CLOCK_SMCLK_Config
        FUNCTION CLOCK_SMCLK_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        FUNCTION SetVcoreUp,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC UCS
        FUNCTION XT1_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        FUNCTION XT2_Config,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBWEAK _A_PMMCTL0_L
        PUBWEAK _A_PMMIFG_L
        PUBWEAK _A_SFRIFG1_L
        PUBWEAK _A_SVSMHCTL_L
        PUBWEAK _A_SVSMLCTL_L
        PUBLIC g_sClock
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN GPIO_MultiBits_Init
        FUNCTION GPIO_MultiBits_Init,0202H
        EXTERN _Cast32uto32f
        FUNCTION _Cast32uto32f,0202H
        EXTERN _Div32f
        FUNCTION _Div32f,0202H
        EXTERN _CmpLt32f
        FUNCTION _CmpLt32f,0202H
        EXTERN _Add32f
        FUNCTION _Add32f,0202H
        EXTERN _Cast32fto32u
        FUNCTION _Cast32fto32u,0202H
        EXTERN assert_failed
        FUNCTION assert_failed,0202H

// E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\src\clock.c
//    1 #include "clock.h"

        ASEGN DATA16_AN:DATA:NOROOT,0120H
// union <unnamed> __data16 _A_PMMCTL0_L
_A_PMMCTL0_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0124H
// union <unnamed> __data16 _A_SVSMHCTL_L
_A_SVSMHCTL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0126H
// union <unnamed> __data16 _A_SVSMLCTL_L
_A_SVSMLCTL_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,012cH
// union <unnamed> __data16 _A_PMMIFG_L
_A_PMMIFG_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0102H
// union <unnamed> __data16 _A_SFRIFG1_L
_A_SFRIFG1_L:
        DS8 2

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "E:\\\\MSP430\\\\MSP430F5529...">`:
        DC8 45H, 3AH, 5CH, 4DH, 53H, 50H, 34H, 33H
        DC8 30H, 5CH, 4DH, 53H, 50H, 34H, 33H, 30H
        DC8 46H, 35H, 35H, 32H, 39H, 0BFH, 0E2H, 0BAH
        DC8 0AFH, 0CAH, 0FDH, 32H, 2EH, 36H, 5CH, 43H
        DC8 0B0H, 0E6H, 5CH, 0B9H, 0A4H, 0B3H, 0CCH, 0C4H
        DC8 0A3H, 0B0H, 0E5H, 5CH, 44H, 72H, 69H, 76H
        DC8 65H, 72H, 73H, 5CH, 73H, 72H, 63H, 5CH
        DC8 63H, 6CH, 6FH, 63H, 6BH, 2EH, 63H, 0

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "CLOCK_DCO_PLLConfig">`:
        DC8 "CLOCK_DCO_PLLConfig"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "FLLN_VALUE\\262\\273\\324\\312\\320\\355`:
        DC8 46H, 4CH, 4CH, 4EH, 5FH, 56H, 41H, 4CH
        DC8 55H, 45H, 0B2H, 0BBH, 0D4H, 0CAH, 0D0H, 0EDH
        DC8 0B3H, 0ACH, 0B9H, 0FDH, 31H, 30H, 32H, 33H
        DC8 0A3H, 0ACH, 0C7H, 0EBH, 0BDH, 0ABH, 44H, 43H
        DC8 4FH, 0C6H, 0B5H, 0C2H, 0CAH, 0C9H, 0E8H, 0B5H
        DC8 0CDH, 0BBH, 0F2H, 0D5H, 0DFH, 0B8H, 0FCH, 0BBH
        DC8 0BBH, 0CEH, 0AAH, 0B8H, 0FCH, 0B8H, 0DFH, 0C6H
        DC8 0B5H, 0C2H, 0CAH, 0B5H, 0C4H, 0B2H, 0CEH, 0BFH
        DC8 0BCH, 0CAH, 0B1H, 0D6H, 0D3H, 0D4H, 0B4H, 0A3H
        DC8 0A1H, 0
//    2 #include "msp430f5529.h"
//    3 #include "msp430f5529MemMap.h"
//    4 
//    5 #ifndef EXTAL_IN_XT1_HZ
//    6 #error Ã»ÓÐºê¶¨Òå"XT1_nHZ",ÇëÔÚclock.hÀïºê¶¨Òå£¬Èç#define EXTAL_IN_XT1_HZ  32768HZ
//    7 #endif  
//    8 #ifndef EXTAL_IN_XT2_HZ
//    9 #error Ã»ÓÐºê¶¨Òå"XT2_nHZ",ÇëÔÚclock.hÀïºê¶¨Òå£¬Èç#define EXTAL_IN_XT2_HZ  4000000HZ
//   10 #endif
//   11 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//   12 const UCS_MemMapPtr UCS = UCS_BASE_PTR;
UCS:
        DC32 160H

        RSEG DATA20_N:DATA:SORT:NOROOT(1)
//   13 __no_init CLOCK g_sClock;                                        //È«¾Ö±äÁ¿£¬Ê±ÖÓÆµÂÊ
g_sClock:
        DS8 40
//   14 static void SetVcoreUp (uint8_t level);                          //ÉèÖÃÄÚºËµçÑ¹
//   15 /*******************************************************************************
//   16 *  º¯ÊýÃû³Æ£ºXT1_Config(STATUS status)
//   17 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÊÇ·ñÊ¹ÄÜXT1
//   18 *  ²ÎÊýËµÃ÷£ºSTATUS status£ºÊÇ·ñÊ¹ÄÜXT1
//   19 *  º¯Êý·µ»Ø£ºÎÞ
//   20 *  Ê¹ÓÃÊ¾Àý£ºXT1_Config(ENABLE);   //Ê¹ÄÜXT1
//   21 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   22 static inline void XT1_Config(STATUS status)
XT1_Config:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function XT1_Config
//   23 {
        FUNCALL XT1_Config, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   24   if(status != DISABLE)
        CMP.B   #0x0, R10
        JEQ     ??XT1_Config_1
//   25   {
//   26     if(UCS->XT1_OFF == BIT_SET)
        MOVA    &UCS, R15
        BIT.B   #0x1, 0xc(R15)
        JNC     ??XT1_Config_2
//   27     {
//   28       GPIO_MultiBits_Init(P5,(GPIO_Pin_4|GPIO_Pin_5),GPI|SEL);   //Ñ¡ÓÃ XT1 µÚ¶þ¹¦ÄÜ
        MOV.W   #0x101, R14
        MOV.W   #0x30, R13
        MOV.B   #0x4, R12
        CALLA   #GPIO_MultiBits_Init
//   29       UCS->XT1_OFF = RESET ;                          // ¿ªÆô XT1                       
        MOVA    &UCS, R15
        BIC.B   #0x1, 0xc(R15)
//   30       do
//   31       {
//   32         UCS->XT1_LFOFFG = RESET;                     // Çå³ýXT1,CLOCK_DCO Ê§Ð§±êÖ¾                     
??XT1_Config_0:
        MOVA    &UCS, R15
        BIC.B   #0x2, 0xe(R15)
//   33         SFRIFG1 &= ~OFIFG;                           // 
        BIC.W   #0x2, &0x102
//   34       }while (UCS->XT1_LFOFFG == BIT_SET);               //
        MOVA    &UCS, R15
        MOV.B   0xe(R15), R14
        RRUX.B  R14
        BIT.B   #0x1, R14
        JNE     ??XT1_Config_0
        JMP     ??XT1_Config_2
//   35     }
//   36   }
//   37   else
//   38   {
//   39     UCS->XT1_OFF = BIT_SET ;                          // ¹Ø±Õ XT1                       
??XT1_Config_1:
        MOVA    &UCS, R15
        BIS.B   #0x1, 0xc(R15)
//   40   }
//   41 }
??XT1_Config_2:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_SFRIFG1_L
//   42 /*******************************************************************************
//   43 *  º¯ÊýÃû³Æ£ºXT2_Config(STATUS status)
//   44 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÊÇ·ñÊ¹ÄÜXT2
//   45 *  ²ÎÊýËµÃ÷£ºSTATUS status£ºÊÇ·ñÊ¹ÄÜXT2
//   46 *  º¯Êý·µ»Ø£ºÎÞ
//   47 *  Ê¹ÓÃÊ¾Àý£ºXT2_Config(TRUE);   //Ê¹ÄÜXT2
//   48 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   49 static inline void XT2_Config(STATUS status)
XT2_Config:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function XT2_Config
//   50 {
        FUNCALL XT2_Config, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   51   if(status != DISABLE)
        CMP.B   #0x0, R10
        JEQ     ??XT2_Config_1
//   52   {
//   53     if(UCS->XT2_OFF == BIT_SET)
        MOVA    &UCS, R15
        BIT.B   #0x1, 0xd(R15)
        JNC     ??XT2_Config_2
//   54     {
//   55       GPIO_MultiBits_Init(P5,(GPIO_Pin_2|GPIO_Pin_3),GPI|SEL);      //Ñ¡ÓÃ CLOCK_XT2 µÚ¶þ¹¦ÄÜ
        MOV.W   #0x101, R14
        MOV.W   #0xc, R13
        MOV.B   #0x4, R12
        CALLA   #GPIO_MultiBits_Init
//   56       UCS->XT2_OFF = RESET;                         //¿ªÆô CLOCK_XT2                      
        MOVA    &UCS, R15
        BIC.B   #0x1, 0xd(R15)
//   57       do
//   58       {
//   59         UCS->XT2_OFFG = RESET;
??XT2_Config_0:
        MOVA    &UCS, R15
        BIC.B   #0x8, 0xe(R15)
//   60         SFRIFG1 &= ~OFIFG;                       
        BIC.W   #0x2, &0x102
//   61       }while (UCS->XT2_OFFG == BIT_SET);
        MOVA    &UCS, R15
        MOV.B   0xe(R15), R14
        RPT     #0x3
        RRUX.B  R14
        BIT.B   #0x1, R14
        JNE     ??XT2_Config_0
        JMP     ??XT2_Config_2
//   62     }
//   63   }
//   64   else
//   65   {
//   66     UCS->XT2_OFF = BIT_SET ;                          // ¹Ø±ÕXT2                       
??XT2_Config_1:
        MOVA    &UCS, R15
        BIS.B   #0x1, 0xd(R15)
//   67   }
//   68 }
??XT2_Config_2:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
        REQUIRE _A_SFRIFG1_L
//   69 /*******************************************************************************
//   70 *  º¯ÊýÃû³Æ£ºCLOCK_DCO_PLLConfig     (FLLREF_Source refsource, FLLREF_DIVx refdiv, uint32_t DCO_FLL_Fre)
//   71 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃDCOÆµÂÊ£¬µ¥Î»£¨HZ£©
//   72 *  ²ÎÊýËµÃ÷£ºFLLREF_Source refsource :²Î¿¼Ê±ÖÓÔ´
//   73              FLLREF_DIVx refdiv      :²Î¿¼Ê±ÖÓÔ´·ÖÆµÏµÊý
//   74              uint32_t DCO_FLL_Fre      :DCOÉèÖÃÆµÂÊ
//   75 *  º¯Êý·µ»Ø£ºÎÞ
//   76 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_DCO_PLLConfig     (FLLREF_REFO, FLLREF_DIV_1, 16MHZ);  //ÉèÖÃDCO±¶Æµ»·ÒÔREFOµÄÒ»·ÖÆµ×÷Îª²Î¿¼Ê±ÖÓÔ´£¬±¶Æµµ½16MHZ
//   77 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   78 void CLOCK_DCO_PLLConfig     (FLLREF_Source refsource, FLLREF_DIVx refdiv, uint32_t DCO_FLL_Fre)
CLOCK_DCO_PLLConfig:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function CLOCK_DCO_PLLConfig
//   79 {
        FUNCALL CLOCK_DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _CmpLt32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, SetVcoreUp
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _CmpLt32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _CmpLt32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, XT2_Config
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, XT1_Config
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32uto32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Div32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Add32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Add32f
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, _Cast32fto32u
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, assert_failed
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, CLOCK_MCLK_Config
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, CLOCK_SMCLK_Config
        LOCFRAME CSTACK, 36, STACK
        FUNCALL CLOCK_DCO_PLLConfig, CLOCK_ACLK_Config
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOV.B   R12, R4
        MOV.B   R13, R5
        MOV.W   R14, R10
        MOV.W   R15, R11
//   80   static const uint16_t ref_div_value[6]={1,2,4,8,12,16};
//   81   /*¸ù¾ÝÆµÂÊÌá¸ßÄÚºËµçÑ¹*/
//   82   //SetVcoreUp ( (DCO_FLL_Fre < 12MHz) ? 0 : ((DCO_FLL_Fre < 16MHz) ? 1 : ((DCO_FLL_Fre < 20MHz) ? 2 :3))); //ÉèÖÃÄÚºËµçÑ¹
//   83   if(DCO_FLL_Fre < 12MHz)
        CMP.W   #0xb7, R11
        JNC     ??CLOCK_DCO_PLLConfig_1
        JNE     ??CLOCK_DCO_PLLConfig_2
        CMP.W   #0x1b00, R10
        JC      ??CLOCK_DCO_PLLConfig_2
//   84     SetVcoreUp (0x00);                      //ÉèÖÃÄÚºËµçÑ¹
??CLOCK_DCO_PLLConfig_1:
        MOV.B   #0x0, R12
        CALLA   #SetVcoreUp
        JMP     ??CLOCK_DCO_PLLConfig_3
//   85   else if(DCO_FLL_Fre < 16MHz)
??CLOCK_DCO_PLLConfig_2:
        CMP.W   #0xf4, R11
        JNC     ??CLOCK_DCO_PLLConfig_4
        JNE     ??CLOCK_DCO_PLLConfig_5
        CMP.W   #0x2400, R10
        JC      ??CLOCK_DCO_PLLConfig_5
//   86     SetVcoreUp (0x01);       
??CLOCK_DCO_PLLConfig_4:
        MOV.B   #0x1, R12
        CALLA   #SetVcoreUp
        JMP     ??CLOCK_DCO_PLLConfig_3
//   87   else if(DCO_FLL_Fre < 20MHz)
??CLOCK_DCO_PLLConfig_5:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Cast32uto32f
        MOV.W   #0x9680, R14
        MOV.W   #0x4b98, R15
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??CLOCK_DCO_PLLConfig_6
//   88     SetVcoreUp (0x02);       
        MOV.B   #0x2, R12
        CALLA   #SetVcoreUp
        JMP     ??CLOCK_DCO_PLLConfig_3
//   89   else
//   90     SetVcoreUp (0x03);       
??CLOCK_DCO_PLLConfig_6:
        MOV.B   #0x3, R12
        CALLA   #SetVcoreUp
//   91   
//   92   __bis_SR_register(SCG0);                                              // ½ûÖ¹±¶Æµ»·FLL,
??CLOCK_DCO_PLLConfig_3:
        BIS.W   #0x40, SR
//   93   UCS->CTL0 = 0x0000;                                                   // ÇåÁã DCOx, MODx
        MOVA    &UCS, R15
        MOV.W   #0x0, 0(R15)
//   94   
//   95   if (DCO_FLL_Fre < 0.63MHz)         //           fsystem < 0.63MHz
        CMP.W   #0x9, R11
        JNC     ??CLOCK_DCO_PLLConfig_7
        JNE     ??CLOCK_DCO_PLLConfig_8
        CMP.W   #0x9cf0, R10
        JC      ??CLOCK_DCO_PLLConfig_8
//   96 	UCS->DCORSEL = 0;
??CLOCK_DCO_PLLConfig_7:
        MOVA    &UCS, R15
        AND.B   #0x8f, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//   97   else if (DCO_FLL_Fre < 1.25MHz)    // 0.63MHz < fsystem < 1.25MHz
??CLOCK_DCO_PLLConfig_8:
        CMP.W   #0x13, R11
        JNC     ??CLOCK_DCO_PLLConfig_10
        JNE     ??CLOCK_DCO_PLLConfig_11
        CMP.W   #0x12d0, R10
        JC      ??CLOCK_DCO_PLLConfig_11
//   98 	UCS->DCORSEL = 1;
??CLOCK_DCO_PLLConfig_10:
        MOVA    &UCS, R15
        MOV.B   0x2(R15), R14
        AND.B   #0x8f, R14
        BIS.B   #0x10, R14
        MOVA    &UCS, R15
        MOV.B   R14, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//   99   else if (DCO_FLL_Fre < 2.5MHz)     // 1.25MHz < fsystem <  2.5MHz
??CLOCK_DCO_PLLConfig_11:
        CMP.W   #0x26, R11
        JNC     ??CLOCK_DCO_PLLConfig_12
        JNE     ??CLOCK_DCO_PLLConfig_13
        CMP.W   #0x25a0, R10
        JC      ??CLOCK_DCO_PLLConfig_13
//  100 	UCS->DCORSEL = 2;
??CLOCK_DCO_PLLConfig_12:
        MOVA    &UCS, R15
        MOV.B   0x2(R15), R14
        AND.B   #0x8f, R14
        BIS.B   #0x20, R14
        MOVA    &UCS, R15
        MOV.B   R14, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//  101   else if (DCO_FLL_Fre <   5MHz)     // 2.5MHz  < fsystem <    5MHz
??CLOCK_DCO_PLLConfig_13:
        CMP.W   #0x4c, R11
        JNC     ??CLOCK_DCO_PLLConfig_14
        JNE     ??CLOCK_DCO_PLLConfig_15
        CMP.W   #0x4b40, R10
        JC      ??CLOCK_DCO_PLLConfig_15
//  102 	UCS->DCORSEL = 3;
??CLOCK_DCO_PLLConfig_14:
        MOVA    &UCS, R15
        MOV.B   0x2(R15), R14
        AND.B   #0x8f, R14
        BIS.B   #0x30, R14
        MOVA    &UCS, R15
        MOV.B   R14, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//  103   else if (DCO_FLL_Fre <  10MHz)     // 5MHz    < fsystem <   10MHz
??CLOCK_DCO_PLLConfig_15:
        CMP.W   #0x98, R11
        JNC     ??CLOCK_DCO_PLLConfig_16
        JNE     ??CLOCK_DCO_PLLConfig_17
        CMP.W   #0x9680, R10
        JC      ??CLOCK_DCO_PLLConfig_17
//  104 	UCS->DCORSEL = 4;
??CLOCK_DCO_PLLConfig_16:
        MOVA    &UCS, R15
        MOV.B   0x2(R15), R14
        AND.B   #0x8f, R14
        BIS.B   #0x40, R14
        MOVA    &UCS, R15
        MOV.B   R14, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//  105   else if (DCO_FLL_Fre <  20MHz)     // 10MHz   < fsystem <   20MHz
??CLOCK_DCO_PLLConfig_17:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Cast32uto32f
        MOV.W   #0x9680, R14
        MOV.W   #0x4b98, R15
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??CLOCK_DCO_PLLConfig_18
//  106 	UCS->DCORSEL = 5;
        MOVA    &UCS, R15
        MOV.B   0x2(R15), R14
        AND.B   #0x8f, R14
        BIS.B   #0x50, R14
        MOVA    &UCS, R15
        MOV.B   R14, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//  107   else if (DCO_FLL_Fre <  40MHz)     // 20MHz   < fsystem <   40MHz
??CLOCK_DCO_PLLConfig_18:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Cast32uto32f
        MOV.W   #0x9680, R14
        MOV.W   #0x4c18, R15
        CALLA   #_CmpLt32f
        CMP.W   #0x0, R12
        JEQ     ??CLOCK_DCO_PLLConfig_19
//  108 	UCS->DCORSEL = 6;
        MOVA    &UCS, R15
        MOV.B   0x2(R15), R14
        AND.B   #0x8f, R14
        BIS.B   #0x60, R14
        MOVA    &UCS, R15
        MOV.B   R14, 0x2(R15)
        JMP     ??CLOCK_DCO_PLLConfig_9
//  109   else
//  110 	UCS->DCORSEL = 7;
??CLOCK_DCO_PLLConfig_19:
        MOVA    &UCS, R15
        BIS.B   #0x70, 0x2(R15)
//  111   
//  112   UCS->FLLREFDIV = refdiv;
??CLOCK_DCO_PLLConfig_9:
        MOV.B   R5, R14
        AND.B   #0x7, R14
        MOVA    &UCS, R15
        MOV.B   0x6(R15), R15
        AND.B   #0xf8, R15
        BIS.B   R14, R15
        MOVA    &UCS, R7
        MOV.B   R15, 0x6(R7)
//  113   UCS->SELREF = refsource;
        MOV.B   R4, R14
        RPT     #0x4
        RLAX.B  R14
        AND.B   #0x70, R14
        MOVA    &UCS, R15
        MOV.B   0x6(R15), R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOVA    &UCS, R7
        MOV.B   R15, 0x6(R7)
//  114   
//  115   float Fref_value;
//  116   if(refsource == FLLREF_XT2)
        CMP.B   #0x5, R4
        JNE     ??CLOCK_DCO_PLLConfig_20
//  117   {
//  118     XT2_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT2_Config
//  119     Fref_value = (float)((uint32_t)EXTAL_IN_XT2_HZ/ref_div_value[refdiv]);  
        MOV.W   #0x900, R12
        MOV.W   #0x3d, R13
        MOV.B   R5, R15
        ADDA    R15, R15
        MOVX.W  ??ref_div_value(R15), R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        CALLA   #_Cast32uto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        JMP     ??CLOCK_DCO_PLLConfig_21
//  120   }
//  121   else if(refsource == FLLREF_XT1)
??CLOCK_DCO_PLLConfig_20:
        CMP.B   #0x0, R4
        JNE     ??CLOCK_DCO_PLLConfig_22
//  122   {
//  123     XT1_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT1_Config
//  124     Fref_value = (float)(EXTAL_IN_XT1_HZ/ref_div_value[refdiv]);
        MOV.W   #0x8000, R12
        MOV.B   R5, R15
        ADDA    R15, R15
        MOVX.W  ??ref_div_value(R15), R14
        CALLA   #?DivMod16u
        MOV.W   #0x0, R13
        CALLA   #_Cast32uto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
        JMP     ??CLOCK_DCO_PLLConfig_21
//  125   }
//  126   else if(refsource == FLLREF_REFO)
??CLOCK_DCO_PLLConfig_22:
        CMP.B   #0x2, R4
        JNE     ??CLOCK_DCO_PLLConfig_21
//  127   {
//  128     Fref_value = (float)(REFOCLK_FREQUENCY/ref_div_value[refdiv]);
        MOV.W   #0x8000, R12
        MOV.B   R5, R15
        ADDA    R15, R15
        MOVX.W  ??ref_div_value(R15), R14
        CALLA   #?DivMod16u
        MOV.W   #0x0, R13
        CALLA   #_Cast32uto32f
        MOV.W   R12, R8
        MOV.W   R13, R9
//  129   }
//  130   uint16_t FLLN_VALUE = (uint16_t)((DCO_FLL_Fre/Fref_value+0.5f)-1u);
??CLOCK_DCO_PLLConfig_21:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #_Cast32uto32f
        MOV.W   R8, R14
        MOV.W   R9, R15
        CALLA   #_Div32f
        MOV.W   #0x0, R14
        MOV.W   #0x3f00, R15
        CALLA   #_Add32f
        MOV.W   #0x0, R14
        MOV.W   #0xbf80, R15
        CALLA   #_Add32f
        CALLA   #_Cast32fto32u
        MOV.W   R12, R6
        MOV.W   R13, R7
//  131   ASSERT(FLLN_VALUE < 1024,"CLOCK_DCO_PLLConfig","FLLN_VALUE²»ÔÊÐí³¬¹ý1023£¬Çë½«DCOÆµÂÊÉèµÍ»òÕß¸ü»»Îª¸ü¸ßÆµÂÊµÄ²Î¿¼Ê±ÖÓÔ´£¡");         //²»ÔÊÐí³¬¹ý1023£¬Çë½«DCOÆµÂÊÉèµÍ»òÕß¸ü»»Îª¸ü¸ßÆµÂÊµÄ²Î¿¼Ê±ÖÓÔ´
        CMP.W   #0x400, R6
        JNC     ??CLOCK_DCO_PLLConfig_23
        MOVA    #`?<Constant "FLLN_VALUE\\262\\273\\324\\312\\320\\355`, R15
        MOVA    #`?<Constant "CLOCK_DCO_PLLConfig">`, R14
        MOV.W   #0x83, R13
        MOVA    #`?<Constant "E:\\\\MSP430\\\\MSP430F5529...">`, R12
        CALLA   #assert_failed
//  132   
//  133   g_sClock.DCO_FLL_Frequency = DCO_FLL_Fre;
??CLOCK_DCO_PLLConfig_23:
        MOVX.W  R10, &g_sClock + 36
        MOVX.W  R11, &g_sClock + 38
//  134   
//  135   UCS->FLLN = FLLN_VALUE;        //
        MOV.W   R6, R15
        AND.W   #0x3ff, R15
        MOVA    &UCS, R7
        MOV.W   0x4(R7), R7
        AND.W   #0xfc00, R7
        BIS.W   R15, R7
        MOVA    &UCS, R15
        MOV.W   R7, 0x4(R15)
//  136   UCS->FLLD = 0;     //ÉèÖÃDCO·ÖÆµ  
        MOVA    &UCS, R15
        AND.W   #0x8fff, 0x4(R15)
//  137   
//  138   __bic_SR_register(SCG0);                  // Ê¹ÄÜFLL
        BIC.W   #0x40, SR
//  139   do
//  140   {
//  141     UCS->DCO_FFG = RESET; // Çå³ý,CLOCK_DCO Ê§Ð§±êÖ¾                                        
??CLOCK_DCO_PLLConfig_0:
        MOVA    &UCS, R15
        BIC.B   #0x1, 0xe(R15)
//  142     SFRIFG1 &= ~OFIFG;                                             // Çå³ýÊ±ÖÓÊ§Ð§±êÖ¾
        BIC.W   #0x2, &0x102
//  143   }while (UCS->DCO_FFG == BIT_SET);                                           // ¼ì²éDCOÊ§Ð§±êÖ¾
        MOVA    &UCS, R15
        BIT.B   #0x1, 0xe(R15)
        JC      ??CLOCK_DCO_PLLConfig_0
//  144  
//  145   //½«Ê¹ÓÃDCO×÷ÎªÊ±ÖÓÔ´µÄÊ±ÖÓÆµÂÊÖµÐÞ¸Ä
//  146   if(UCS->SELM == CLOCK_DCO || UCS->SELM == CLOCK_DCO_DIV) 
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R14
        AND.B   #0x7, R14
        CMP.B   #0x3, R14
        JEQ     ??CLOCK_DCO_PLLConfig_24
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R14
        AND.B   #0x7, R14
        CMP.B   #0x4, R14
        JNE     ??CLOCK_DCO_PLLConfig_25
//  147   {
//  148     CLOCK_DIVx div = (CLOCK_DIVx)UCS->DIVM;
??CLOCK_DCO_PLLConfig_24:
        MOVA    &UCS, R15
        MOV.B   0xa(R15), R7
        AND.B   #0x7, R7
//  149     CLOCK_MCLK_Config ((CLOCK_Source)UCS->SELM, div);
        MOV.B   R7, R13
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R12
        AND.B   #0x7, R12
        CALLA   #CLOCK_MCLK_Config
//  150   }
//  151   
//  152   if(UCS->SELS == CLOCK_DCO || UCS->SELS == CLOCK_DCO_DIV)
??CLOCK_DCO_PLLConfig_25:
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R14
        RPT     #0x4
        RRUX.B  R14
        AND.B   #0x7, R14
        CMP.B   #0x3, R14
        JEQ     ??CLOCK_DCO_PLLConfig_26
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R14
        RPT     #0x4
        RRUX.B  R14
        AND.B   #0x7, R14
        CMP.B   #0x4, R14
        JNE     ??CLOCK_DCO_PLLConfig_27
//  153   {
//  154     CLOCK_DIVx div = (CLOCK_DIVx)UCS->DIVS;
??CLOCK_DCO_PLLConfig_26:
        MOVA    &UCS, R15
        MOV.B   0xa(R15), R7
        RPT     #0x4
        RRUX.B  R7
        AND.B   #0x7, R7
//  155     CLOCK_SMCLK_Config((CLOCK_Source)UCS->SELS, div);
        MOV.B   R7, R13
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R12
        RPT     #0x4
        RRUX.B  R12
        AND.B   #0x7, R12
        CALLA   #CLOCK_SMCLK_Config
//  156   }
//  157   
//  158   if(UCS->SELA == CLOCK_DCO || UCS->SELA == CLOCK_DCO_DIV)
??CLOCK_DCO_PLLConfig_27:
        MOVA    &UCS, R15
        MOV.B   0x9(R15), R14
        AND.B   #0x7, R14
        CMP.B   #0x3, R14
        JEQ     ??CLOCK_DCO_PLLConfig_28
        MOVA    &UCS, R15
        MOV.B   0x9(R15), R14
        AND.B   #0x7, R14
        CMP.B   #0x4, R14
        JNE     ??CLOCK_DCO_PLLConfig_29
//  159   {
//  160     CLOCK_DIVx div = (CLOCK_DIVx)UCS->DIVA;
??CLOCK_DCO_PLLConfig_28:
        MOVA    &UCS, R15
        MOV.B   0xb(R15), R7
        AND.B   #0x7, R7
//  161     CLOCK_ACLK_Config ((CLOCK_Source)UCS->SELS, div);
        MOV.B   R7, R13
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R12
        RPT     #0x4
        RRUX.B  R12
        AND.B   #0x7, R12
        CALLA   #CLOCK_ACLK_Config
//  162   }
//  163 }
??CLOCK_DCO_PLLConfig_29:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
        REQUIRE _A_SFRIFG1_L

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
??ref_div_value:
        DC16 1, 2, 4, 8, 12, 16
//  164 /*************************************************************************
//  165 *  º¯ÊýÃû³Æ£ºCLOCK_MCLK_Config  (CLOCK_Source mclk , CLOCK_DIVx mclk_div)
//  166 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÖ÷Ê±ÖÓÔ´¼°·ÖÆµ
//  167 *  ²ÎÊýËµÃ÷£ºCLOCK_Source mclk   :Ö÷Ê±ÖÓÊ±ÖÓÔ´
//  168              CLOCK_DIVx mclk_div :Ö÷Ê±ÖÓ·ÖÆµÏµÊý
//  169 *  º¯Êý·µ»Ø£ºÎÞ
//  170 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_MCLK_Config  (CLOCK_DCO , DIV_1);   //Ö÷Ê±ÖÓÊ¹ÓÃDCO×÷ÎªÊ±ÖÓÔ´£¬·ÖÆµÏµÊýÎª1£¨²»·ÖÆµ£©
//  171 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  172 void CLOCK_MCLK_Config  (CLOCK_Source mclk , CLOCK_DIVx mclk_div)
CLOCK_MCLK_Config:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function CLOCK_MCLK_Config
//  173 {
        FUNCALL CLOCK_MCLK_Config, XT2_Config
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_MCLK_Config, XT1_Config
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_MCLK_Config, _Cast32uto32f
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_MCLK_Config, _Div32f
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.B   R12, R10
        MOV.B   R13, R11
//  174   if(mclk == CLOCK_XT2)
        CMP.B   #0x5, R10
        JNE     ??CLOCK_MCLK_Config_2
//  175   {
//  176     XT2_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT2_Config
        JMP     ??CLOCK_MCLK_Config_3
//  177   }
//  178   else if(mclk == CLOCK_XT1)
??CLOCK_MCLK_Config_2:
        CMP.B   #0x0, R10
        JNE     ??CLOCK_MCLK_Config_3
//  179   {
//  180     XT1_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT1_Config
//  181   }
//  182   
//  183   UCS->SELM = mclk;                         //Ñ¡ÔñDCO×÷ÎªÊ±ÖÓÔ´
??CLOCK_MCLK_Config_3:
        MOV.B   R10, R14
        AND.B   #0x7, R14
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R15
        AND.B   #0xf8, R15
        BIS.B   R14, R15
        MOVA    &UCS, R14
        MOV.B   R15, 0x8(R14)
//  184   UCS->DIVM = mclk_div;
        MOV.B   R11, R14
        AND.B   #0x7, R14
        MOVA    &UCS, R15
        MOV.B   0xa(R15), R15
        AND.B   #0xf8, R15
        BIS.B   R14, R15
        MOVA    &UCS, R14
        MOV.B   R15, 0xa(R14)
//  185   
//  186   switch(mclk)
        MOV.B   R10, R14
        SUB.B   #0x0, R14
        JEQ     ??CLOCK_MCLK_Config_4
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_MCLK_Config_5
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_MCLK_Config_6
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_MCLK_Config_7
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_MCLK_Config_8
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_MCLK_Config_9
        JMP     ??CLOCK_MCLK_Config_1
//  187   {
//  188   case CLOCK_XT1    :g_sClock.MCLK.nHZ = EXTAL_IN_XT1_HZ;break;
??CLOCK_MCLK_Config_4:
        MOVX.W  #0x8000, &g_sClock
        MOVX.W  #0x0, &g_sClock + 2
        JMP     ??CLOCK_MCLK_Config_10
//  189   case CLOCK_VLO    :g_sClock.MCLK.nHZ = VLOCLK_FREQUENCY;break;
??CLOCK_MCLK_Config_5:
        MOVX.W  #0x2710, &g_sClock
        MOVX.W  #0x0, &g_sClock + 2
        JMP     ??CLOCK_MCLK_Config_10
//  190   case CLOCK_REFO   :g_sClock.MCLK.nHZ = REFOCLK_FREQUENCY;break;       
??CLOCK_MCLK_Config_6:
        MOVX.W  #0x8000, &g_sClock
        MOVX.W  #0x0, &g_sClock + 2
        JMP     ??CLOCK_MCLK_Config_10
//  191   case CLOCK_DCO    :g_sClock.MCLK.nHZ = g_sClock.DCO_FLL_Frequency;break;    
??CLOCK_MCLK_Config_7:
        MOVX.W  &g_sClock + 36, &g_sClock
        MOVX.W  &g_sClock + 38, &g_sClock + 2
        JMP     ??CLOCK_MCLK_Config_10
//  192   case CLOCK_DCO_DIV:g_sClock.MCLK.nHZ = g_sClock.DCO_FLL_Frequency;break;
??CLOCK_MCLK_Config_8:
        MOVX.W  &g_sClock + 36, &g_sClock
        MOVX.W  &g_sClock + 38, &g_sClock + 2
        JMP     ??CLOCK_MCLK_Config_10
//  193   case CLOCK_XT2    :g_sClock.MCLK.nHZ = EXTAL_IN_XT2_HZ;break;
??CLOCK_MCLK_Config_9:
        MOVX.W  #0x900, &g_sClock
        MOVX.W  #0x3d, &g_sClock + 2
//  194   default :return;
//  195   }
//  196   g_sClock.MCLK.nHZ  >>= mclk_div;
??CLOCK_MCLK_Config_10:
        MOVX.W  &g_sClock, R12
        MOVX.W  &g_sClock + 2, R13
        MOV.B   R11, R14
        CALLA   #?ShiftRight32u
        MOVX.W  R12, &g_sClock
        MOVX.W  R13, &g_sClock + 2
//  197   g_sClock.MCLK.nKHZ = g_sClock.MCLK.nHZ/1000u;
        MOVX.W  &g_sClock, R12
        MOVX.W  &g_sClock + 2, R13
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOVX.W  R12, &g_sClock + 4
        MOVX.W  R13, &g_sClock + 6
//  198   g_sClock.MCLK.fMHZ = g_sClock.MCLK.nHZ/1000000.0;
        MOVX.W  &g_sClock, R12
        MOVX.W  &g_sClock + 2, R13
        CALLA   #_Cast32uto32f
        MOV.W   #0x2400, R14
        MOV.W   #0x4974, R15
        CALLA   #_Div32f
        MOVX.W  R12, &g_sClock + 8
        MOVX.W  R13, &g_sClock + 10
//  199 }
??CLOCK_MCLK_Config_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//  200 /*************************************************************************
//  201 *  º¯ÊýÃû³Æ£ºCLOCK_SMCLK_Config (CLOCK_Source smclk, CLOCK_DIVx smclk_div)
//  202 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃÏµÍ³Ê±ÖÓÔ´¼°·ÖÆµ
//  203 *  ²ÎÊýËµÃ÷£ºCLOCK_Source smclk   :ÏµÍ³Ê±ÖÓÊ±ÖÓÔ´
//  204              CLOCK_DIVx smclk_div :ÏµÍ³Ê±ÖÓ·ÖÆµÏµÊý
//  205 *  º¯Êý·µ»Ø£ºÎÞ
//  206 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_SMCLK_Config  (CLOCK_DCO , DIV_2);   //ÏµÍ³Ê±ÖÓÊ¹ÓÃDCO×÷ÎªÊ±ÖÓÔ´£¬·ÖÆµÏµÊýÎª2£¨¶þ·ÖÆµ£©
//  207 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  208 void CLOCK_SMCLK_Config (CLOCK_Source smclk, CLOCK_DIVx smclk_div)
CLOCK_SMCLK_Config:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function CLOCK_SMCLK_Config
//  209 {
        FUNCALL CLOCK_SMCLK_Config, XT2_Config
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_SMCLK_Config, XT1_Config
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_SMCLK_Config, _Cast32uto32f
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_SMCLK_Config, _Div32f
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.B   R12, R10
        MOV.B   R13, R11
//  210   if(smclk == CLOCK_XT2)
        CMP.B   #0x5, R10
        JNE     ??CLOCK_SMCLK_Config_2
//  211   {
//  212     XT2_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT2_Config
        JMP     ??CLOCK_SMCLK_Config_3
//  213   }
//  214   else if(smclk == CLOCK_XT1)
??CLOCK_SMCLK_Config_2:
        CMP.B   #0x0, R10
        JNE     ??CLOCK_SMCLK_Config_3
//  215   {
//  216     XT1_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT1_Config
//  217   }
//  218   
//  219   UCS->SELS = smclk;//Ñ¡ÔñsmclkÊ±ÖÓÔ´
??CLOCK_SMCLK_Config_3:
        MOV.B   R10, R14
        RPT     #0x4
        RLAX.B  R14
        AND.B   #0x70, R14
        MOVA    &UCS, R15
        MOV.B   0x8(R15), R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOVA    &UCS, R14
        MOV.B   R15, 0x8(R14)
//  220   UCS->DIVS = smclk_div;
        MOV.B   R11, R14
        RPT     #0x4
        RLAX.B  R14
        AND.B   #0x70, R14
        MOVA    &UCS, R15
        MOV.B   0xa(R15), R15
        AND.B   #0x8f, R15
        BIS.B   R14, R15
        MOVA    &UCS, R14
        MOV.B   R15, 0xa(R14)
//  221   
//  222   switch(smclk)
        MOV.B   R10, R14
        SUB.B   #0x0, R14
        JEQ     ??CLOCK_SMCLK_Config_4
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_SMCLK_Config_5
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_SMCLK_Config_6
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_SMCLK_Config_7
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_SMCLK_Config_8
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_SMCLK_Config_9
        JMP     ??CLOCK_SMCLK_Config_1
//  223   {
//  224   case CLOCK_XT1    :g_sClock.SMCLK.nHZ = EXTAL_IN_XT1_HZ;break;
??CLOCK_SMCLK_Config_4:
        MOVX.W  #0x8000, &g_sClock + 12
        MOVX.W  #0x0, &g_sClock + 14
        JMP     ??CLOCK_SMCLK_Config_10
//  225   case CLOCK_VLO    :g_sClock.SMCLK.nHZ = VLOCLK_FREQUENCY;break;
??CLOCK_SMCLK_Config_5:
        MOVX.W  #0x2710, &g_sClock + 12
        MOVX.W  #0x0, &g_sClock + 14
        JMP     ??CLOCK_SMCLK_Config_10
//  226   case CLOCK_REFO   :g_sClock.SMCLK.nHZ = REFOCLK_FREQUENCY;break;       
??CLOCK_SMCLK_Config_6:
        MOVX.W  #0x8000, &g_sClock + 12
        MOVX.W  #0x0, &g_sClock + 14
        JMP     ??CLOCK_SMCLK_Config_10
//  227   case CLOCK_DCO    :g_sClock.SMCLK.nHZ = g_sClock.DCO_FLL_Frequency;break; 
??CLOCK_SMCLK_Config_7:
        MOVX.W  &g_sClock + 36, &g_sClock + 12
        MOVX.W  &g_sClock + 38, &g_sClock + 14
        JMP     ??CLOCK_SMCLK_Config_10
//  228   case CLOCK_DCO_DIV:g_sClock.SMCLK.nHZ = g_sClock.DCO_FLL_Frequency;break;
??CLOCK_SMCLK_Config_8:
        MOVX.W  &g_sClock + 36, &g_sClock + 12
        MOVX.W  &g_sClock + 38, &g_sClock + 14
        JMP     ??CLOCK_SMCLK_Config_10
//  229   case CLOCK_XT2    :g_sClock.SMCLK.nHZ = EXTAL_IN_XT2_HZ;break;
??CLOCK_SMCLK_Config_9:
        MOVX.W  #0x900, &g_sClock + 12
        MOVX.W  #0x3d, &g_sClock + 14
//  230   default :return;
//  231   }
//  232   g_sClock.SMCLK.nHZ >>= smclk_div;
??CLOCK_SMCLK_Config_10:
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        MOV.B   R11, R14
        CALLA   #?ShiftRight32u
        MOVX.W  R12, &g_sClock + 12
        MOVX.W  R13, &g_sClock + 14
//  233   g_sClock.SMCLK.nKHZ = g_sClock.SMCLK.nHZ/1000u;;
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOVX.W  R12, &g_sClock + 16
        MOVX.W  R13, &g_sClock + 18
//  234   g_sClock.SMCLK.fMHZ = g_sClock.SMCLK.nHZ/1000000.0;
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        CALLA   #_Cast32uto32f
        MOV.W   #0x2400, R14
        MOV.W   #0x4974, R15
        CALLA   #_Div32f
        MOVX.W  R12, &g_sClock + 20
        MOVX.W  R13, &g_sClock + 22
//  235 }
??CLOCK_SMCLK_Config_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//  236 /*************************************************************************
//  237 *  º¯ÊýÃû³Æ£ºCLOCK_ACLK_Config  (CLOCK_Source aclk , CLOCK_DIVx aclk_div)
//  238 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃ¸¨ÖúÊ±ÖÓÔ´¼°·ÖÆµ
//  239 *  ²ÎÊýËµÃ÷£ºCLOCK_Source aclk   :¸¨ÖúÊ±ÖÓÊ±ÖÓÔ´
//  240              CLOCK_DIVx aclk_div :¸¨ÖúÊ±ÖÓ·ÖÆµÏµÊý
//  241 *  º¯Êý·µ»Ø£ºÎÞ
//  242 *  Ê¹ÓÃÊ¾Àý£ºCLOCK_ACLK_Config  (XT! , DIV_4);   //¸¨ÖúÊ±ÖÓÊ¹ÓÃXT1×÷ÎªÊ±ÖÓÔ´£¬·ÖÆµÏµÊýÎª4£¨ËÄ·ÖÆµ£©
//  243 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  244 void CLOCK_ACLK_Config  (CLOCK_Source aclk , CLOCK_DIVx aclk_div)
CLOCK_ACLK_Config:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function CLOCK_ACLK_Config
//  245 {
        FUNCALL CLOCK_ACLK_Config, XT2_Config
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_ACLK_Config, XT1_Config
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_ACLK_Config, _Cast32uto32f
        LOCFRAME CSTACK, 12, STACK
        FUNCALL CLOCK_ACLK_Config, _Div32f
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.B   R12, R10
        MOV.B   R13, R11
//  246    if(aclk == CLOCK_XT2)
        CMP.B   #0x5, R10
        JNE     ??CLOCK_ACLK_Config_2
//  247   {
//  248     XT2_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT2_Config
        JMP     ??CLOCK_ACLK_Config_3
//  249   }
//  250   else if(aclk == CLOCK_XT1)
??CLOCK_ACLK_Config_2:
        CMP.B   #0x0, R10
        JNE     ??CLOCK_ACLK_Config_3
//  251   {
//  252     XT1_Config(TRUE);
        MOV.B   #0x1, R12
        CALLA   #XT1_Config
//  253   }
//  254   
//  255   UCS->SELA = aclk;//Ñ¡ÔñÊ±ÖÓÔ´                   
??CLOCK_ACLK_Config_3:
        MOV.B   R10, R14
        AND.B   #0x7, R14
        MOVA    &UCS, R15
        MOV.B   0x9(R15), R15
        AND.B   #0xf8, R15
        BIS.B   R14, R15
        MOVA    &UCS, R14
        MOV.B   R15, 0x9(R14)
//  256   UCS->DIVA = aclk_div; //ÉèÖÃ·ÖÆµÏµÊýÎª0
        MOV.B   R11, R14
        AND.B   #0x7, R14
        MOVA    &UCS, R15
        MOV.B   0xb(R15), R15
        AND.B   #0xf8, R15
        BIS.B   R14, R15
        MOVA    &UCS, R14
        MOV.B   R15, 0xb(R14)
//  257   
//  258   switch(aclk)
        MOV.B   R10, R14
        SUB.B   #0x0, R14
        JEQ     ??CLOCK_ACLK_Config_4
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_ACLK_Config_5
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_ACLK_Config_6
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_ACLK_Config_7
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_ACLK_Config_8
        SUB.B   #0x1, R14
        JEQ     ??CLOCK_ACLK_Config_9
        JMP     ??CLOCK_ACLK_Config_1
//  259   {
//  260   case CLOCK_XT1    :g_sClock.ACLK.nHZ = EXTAL_IN_XT1_HZ;break;
??CLOCK_ACLK_Config_4:
        MOVX.W  #0x8000, &g_sClock + 24
        MOVX.W  #0x0, &g_sClock + 26
        JMP     ??CLOCK_ACLK_Config_10
//  261   case CLOCK_VLO    :g_sClock.ACLK.nHZ = VLOCLK_FREQUENCY;break;
??CLOCK_ACLK_Config_5:
        MOVX.W  #0x2710, &g_sClock + 24
        MOVX.W  #0x0, &g_sClock + 26
        JMP     ??CLOCK_ACLK_Config_10
//  262   case CLOCK_REFO   :g_sClock.ACLK.nHZ = REFOCLK_FREQUENCY;break;       
??CLOCK_ACLK_Config_6:
        MOVX.W  #0x8000, &g_sClock + 24
        MOVX.W  #0x0, &g_sClock + 26
        JMP     ??CLOCK_ACLK_Config_10
//  263   case CLOCK_DCO    :g_sClock.ACLK.nHZ = g_sClock.DCO_FLL_Frequency;break;   
??CLOCK_ACLK_Config_7:
        MOVX.W  &g_sClock + 36, &g_sClock + 24
        MOVX.W  &g_sClock + 38, &g_sClock + 26
        JMP     ??CLOCK_ACLK_Config_10
//  264   case CLOCK_DCO_DIV:g_sClock.ACLK.nHZ = g_sClock.DCO_FLL_Frequency;break;
??CLOCK_ACLK_Config_8:
        MOVX.W  &g_sClock + 36, &g_sClock + 24
        MOVX.W  &g_sClock + 38, &g_sClock + 26
        JMP     ??CLOCK_ACLK_Config_10
//  265   case CLOCK_XT2    :g_sClock.ACLK.nHZ = EXTAL_IN_XT2_HZ;break;
??CLOCK_ACLK_Config_9:
        MOVX.W  #0x900, &g_sClock + 24
        MOVX.W  #0x3d, &g_sClock + 26
//  266   default :return;
//  267   }
//  268   g_sClock.ACLK.nHZ >>= aclk_div;
??CLOCK_ACLK_Config_10:
        MOVX.W  &g_sClock + 24, R12
        MOVX.W  &g_sClock + 26, R13
        MOV.B   R11, R14
        CALLA   #?ShiftRight32u
        MOVX.W  R12, &g_sClock + 24
        MOVX.W  R13, &g_sClock + 26
//  269   g_sClock.ACLK.nKHZ = g_sClock.ACLK.nHZ/1000u;;
        MOVX.W  &g_sClock + 24, R12
        MOVX.W  &g_sClock + 26, R13
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOVX.W  R12, &g_sClock + 28
        MOVX.W  R13, &g_sClock + 30
//  270   g_sClock.ACLK.fMHZ = g_sClock.ACLK.nHZ/1000000.0;
        MOVX.W  &g_sClock + 24, R12
        MOVX.W  &g_sClock + 26, R13
        CALLA   #_Cast32uto32f
        MOV.W   #0x2400, R14
        MOV.W   #0x4974, R15
        CALLA   #_Div32f
        MOVX.W  R12, &g_sClock + 32
        MOVX.W  R13, &g_sClock + 34
//  271 }
??CLOCK_ACLK_Config_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5
//  272 /*******************************************************************************
//  273 º¯Êý¹¦ÄÜ£ºÉèÖÃÄÚºËµçÑ¹Öµ£¨ÓëÆµÂÊÉèÖÃÓÐ¹Ø£©
//  274 º¯Êý²ÎÊý£ºu8 level £ºµçÑ¹½×ÌÝ Ð¡ÓÚ3
//  275 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  276 void SetVcoreUp (uint8_t level)
SetVcoreUp:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SetVcoreUp
//  277 {
//  278 #if 1  //·ÂÕæÊ±ÐÞ¸ÄÎª0£¬·ñÔò»á¿¨ÔÚËÀÑ­»·Àï
//  279   // Open PMM registers for write
//  280   PMMCTL0_H = PMMPW_H;              
        MOV.B   #0xa5, &0x121
//  281   // Set SVS/SVM high side new level
//  282   SVSMHCTL = SVSHE + SVSHRVL0 * level + SVMHE + SVSMHRRL0 * level;
        MOV.B   R12, R15
        AND.W   #0xff, R15
        SWPB    R15
        MOV.B   R12, R12
        ADD.W   R12, R15
        ADD.W   #0x4400, R15
        MOV.W   R15, &0x124
//  283   // Set SVM low side to new level
//  284   SVSMLCTL = SVSLE + SVMLE + SVSMLRRL0 * level;
        MOV.B   R12, R15
        ADD.W   #0x4400, R15
        MOV.W   R15, &0x126
//  285   // Wait till SVM is settled
//  286   uint16_t i=50000; 
        MOV.W   #0xc350, R14
//  287   while (((PMMIFG & SVSMLDLYIFG) == 0)&&((i--)>0));
??SetVcoreUp_0:
        BIT.W   #0x1, &0x12c
        JC      ??SetVcoreUp_2
        MOV.W   R14, R15
        MOV.W   R15, R14
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JNE     ??SetVcoreUp_0
//  288   // Clear already set flags
//  289   PMMIFG &= ~(SVMLVLRIFG + SVMLIFG);
??SetVcoreUp_2:
        AND.W   #0xfff9, &0x12c
//  290   // Set VCore to new level
//  291   PMMCTL0_L = PMMCOREV0 * level;
        MOV.B   R12, &0x120
//  292   // Wait till new level reached
//  293   i =50000;
        MOV.W   #0xc350, R14
//  294   if ((PMMIFG & SVMLIFG))
        BIT.W   #0x2, &0x12c
        JNC     ??SetVcoreUp_3
//  295     while(((PMMIFG & SVMLVLRIFG) == 0)&&((i--)>0));
??SetVcoreUp_1:
        BIT.W   #0x4, &0x12c
        JC      ??SetVcoreUp_3
        MOV.W   R14, R15
        MOV.W   R15, R14
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JNE     ??SetVcoreUp_1
//  296   /*
//  297   if ((PMMIFG & SVMLIFG))
//  298     while ((PMMIFG & SVMLVLRIFG) == 0);
//  299   */
//  300   // Set SVS/SVM low side to new level
//  301   SVSMLCTL = SVSLE + SVSLRVL0 * level + SVMLE + SVSMLRRL0 * level;
??SetVcoreUp_3:
        MOV.B   R12, R15
        AND.W   #0xff, R15
        SWPB    R15
        MOV.B   R12, R12
        ADD.W   R12, R15
        ADD.W   #0x4400, R15
        MOV.W   R15, &0x126
//  302   // Lock PMM registers for write access
//  303   PMMCTL0_H = 0x00;
        MOV.B   #0x0, &0x121
//  304 #endif
//  305 }
        RETA
          CFI EndBlock cfiBlock6
        REQUIRE _A_PMMCTL0_L
        REQUIRE _A_SVSMHCTL_L
        REQUIRE _A_SVSMLCTL_L
        REQUIRE _A_PMMIFG_L

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 2 198 bytes in segment CODE
//    10 bytes in segment DATA16_AN
//   174 bytes in segment DATA20_C
//    40 bytes in segment DATA20_N
// 
// 2 198 bytes of CODE  memory
//   174 bytes of CONST memory
//    40 bytes of DATA  memory (+ 10 bytes shared)
//
//Errors: none
//Warnings: none
