///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      14/Dec/2016  10:52:44 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     rf24l01\nrf2401.c                                      /
//    Command line  =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     rf24l01\nrf2401.c -D DEBUG -D RAM_VECTOR -lA           /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \ -o E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug /
//                     \Obj\ --no_cse --no_unroll --no_inline                 /
//                     --no_code_motion --no_tbaa --debug -D__MSP430F5529__   /
//                     -e --double=32 --dlib_config "D:\Program Files\IAR     /
//                     Systems\Embedded Workbench 6.4                         /
//                     Evaluation\430\LIB\DLIB\dl430xlff.h" -I                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\in /
//                     c\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Driv /
//                     ers\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\Drivers\src\USB\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I             /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\ /
//                     ¹¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_HID_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_MSC_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\  /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWar /
//                     e\delay\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\HardWare\18b20\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\KEY\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Har /
//                     dWare\12864\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\HardWare\oled\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6 /
//                     \C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc\ -I                 /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\m /
//                     pu6050\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³Ì /
//                     Ä£°å\HardWare\nokia5110\inc\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     okia5110\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤ /
//                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                         /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å /
//                     \HardWare\2.2TFT\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\ -I                       /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\    /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\ /
//                     inc\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Sy /
//                     stem\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£ /
//                     °å\User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\User\USER\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII /
//                     \App\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\L /
//                     ib\uCOSII\CONFIHG\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII /
//                     \CORE\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ /
//                     Lib\FatFs\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ /
//                     £°å\Lib\FatFs\option\ --core=430X --data_model=large   /
//                     -On --multiplier=32 --multiplier_location=4C0          /
//                     --hw_workaround=CPU40                                  /
//    List file     =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \nrf2401.s43                                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME nrf2401

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?CopyMemoryBytes20
        EXTERN ?CopyMemoryWords20
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC NRF2401_IRQ_Handler
        FUNCTION NRF2401_IRQ_Handler,061203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC NRF2401_Init
        FUNCTION NRF2401_Init,061203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        FUNCTION NRF2401_ReadBuffer,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        FUNCTION NRF2401_ReadWriteByte,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        FUNCTION NRF2401_ReadWriteReg,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC NRF2401_RecData
        FUNCTION NRF2401_RecData,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC NRF2401_SendData
        FUNCTION NRF2401_SendData,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC NRF2401_SetRXMode
        FUNCTION NRF2401_SetRXMode,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC NRF2401_SetTXMode
        FUNCTION NRF2401_SetTXMode,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        FUNCTION NRF2401_WriteBuffer,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        FUNCTION NRF24L01_Check,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 10, STACK
        PUBLIC RX_ADDRESS
        PUBLIC TX_ADDRESS
        PUBWEAK _A_PBOUT_L
        PUBWEAK _A_PDOUT_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN SPI_SendReadByte
        FUNCTION SPI_SendReadByte,0202H
        EXTERN GPIO_MultiBits_Init
        FUNCTION GPIO_MultiBits_Init,0202H
        EXTERN SPI_Master_Init
        FUNCTION SPI_Master_Init,0202H

// E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\nrf2401.c
//    1 #include "nrf2401.H"

        ASEGN DATA16_AN:DATA:NOROOT,0222H
// union <unnamed> __data16 _A_PBOUT_L
_A_PBOUT_L:
        DS8 2

        ASEGN DATA16_AN:DATA:NOROOT,0262H
// union <unnamed> __data16 _A_PDOUT_L
_A_PDOUT_L:
        DS8 2

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant {165, 165, 165, 165, 165}>`:
        DC8 165, 165, 165, 165, 165
//    2 //********************************************************************************************************************// 
//    3 // SPI(nRF24L01) Ö¸Áî
//    4 #define READ_REG    0x00   // ¶ÁÅäÖÃ¼Ä´æÆ÷
//    5 #define WRITE_REG   0x20   // Ð´ÅäÖÃ¼Ä´æÆ÷
//    6 #define RD_RX_PLOAD 0x61   // ¶ÁÈ¡RX FIFOÖÐµÄÊý¾Ý
//    7 #define WR_TX_PLOAD 0xA0   // ÏòTX FIFOÖÐÐ´ÈëÊý¾Ý
//    8 #define FLUSH_TX    0xE1   // Çå³ýTX FIFOÖÐµÄÊý¾Ý Ó¦ÓÃÓÚ·¢ÉäÄ£Ê½ÏÂ
//    9 #define FLUSH_RX    0xE2   // Çå³ýRX FIFOÖÐµÄÊý¾Ý Ó¦ÓÃÓÚ½ÓÊÕÄ£Ê½ÏÂ
//   10 #define REUSE_TX_PL 0xE3   // ÖØÐÂÊ¹ÓÃÉÏÒ»°üÓÐÐ§Êý¾Ý
//   11 #define NOP         0xFF   // ±£Áô
//   12 //********************************************************************************************************************// 
//   13 // SPI(nRF24L01) ¼Ä´æÆ÷(µØÖ·)
//   14 #define CONFIG      0x00  //ÅäÖÃ·¢ËÍ×´Ì¬£¬CRCÐ£ÑéÄ£Ê½ÒÔ¼°·¢ÊÕ·¢×´Ì¬ÏìÓ¦·½Ê½
//   15 
//   16 #define MASK_RX_DR  BIT6  //¿ÉÆÁ±ÎÖÐ¶Ï-½ÓÊÕÖÐ¶Ï 1£ºÆÁ±ÎÖÐ¶Ï
//   17 #define MASK_TX_DS  BIT5  //¿ÉÆÁ±ÎÖÐ¶Ï-·¢ËÍÍê³ÉÖÐ¶Ï
//   18 #define MASK_MAX_RT BIT4  //¿ÉÆÁ±ÎÖÐ¶Ï-´ïµ½×î´óÖØ·¢´ÎÊýÖÐ¶Ï
//   19 #define EN_CRC      BIT3  //Ê¹ÄÜCRC
//   20 #define CRCO        BIT2  //0£ºCRC8Î»: 1£º16Î»
//   21 #define PWR_UP      BIT1  //1£ºÉÏµç 0£ºµôµç
//   22 #define PRIM_RX     BIT0  //1£º½ÓÊÕÄ£Ê½ 0£º·¢ÉäÄ£Ê½
//   23 
//   24 #define EN_AA       0x01  //×Ô¶¯Ó¦´ð¹¦ÄÜÉèÖÃ
//   25 #define EN_RXADDR   0x02  //¿ÉÓÃÐÅµÀÉèÖÃ
//   26 #define SETUP_AW    0x03  //ÊÕ·¢µØÖ·¿í¶ÈÉèÖÃ
//   27 #define SETUP_RETR  0x04  //×Ô¶¯ÖØ·¢¹¦ÄÜÉèÉèÖÃ
//   28 #define RF_CH       0x05  //¹¤×÷ÆµÂÊÉè¶¨
//   29 #define RF_SETUP    0x06  //
//   30 #define STATUS      0x07  //
//   31 #define OBSERVE_TX  0x08  //
//   32 #define CD          0x09  //
//   33 #define RX_ADDR_P0  0x0A
//   34 #define RX_ADDR_P1  0x0B
//   35 #define RX_ADDR_P2  0x0C
//   36 #define RX_ADDR_P3  0x0D
//   37 #define RX_ADDR_P4  0x0E
//   38 #define RX_ADDR_P5  0x0F
//   39 #define TX_ADDR     0x10
//   40 #define RX_PW_P0    0x11
//   41 #define RX_PW_P1    0x12
//   42 #define RX_PW_P2    0x13
//   43 #define RX_PW_P3    0x14
//   44 #define RX_PW_P4    0x15
//   45 #define RX_PW_P5    0x16
//   46 #define FIFO_STATUS 0x17
//   47 
//   48 //¼¸¸öÖØÒªµÄ×´Ì¬±ê¼Ç
//   49 #define STATUS_TX_FULL     0x01        //TX FIFO ¼Ä´æÆ÷Âú±êÖ¾¡£ 1 Îª Âú£¬0Îª ²»Âú
//   50 #define STATUS_MAX_RT      0x10        //´ïµ½×î´óÖØ·¢´ÎÊýÖÐ¶Ï±êÖ¾Î»
//   51 #define STATUS_TX_DS       0x20        //·¢ËÍÍê³ÉÖÐ¶Ï±êÖ¾Î»
//   52 #define STATUS_RX_DR       0x40        //½ÓÊÕµ½Êý¾ÝÖÐ¶Ï±êÖ¾Î»
//   53 

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//   54 const uint8_t TX_ADDRESS[TX_ADR_WIDTH]={0xE1,0xE2,0xE3,0xE4,0xE5}; //·¢ËÍµØÖ·
TX_ADDRESS:
        DC8 225, 226, 227, 228, 229

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//   55 const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0xE1,0xE2,0xE3,0xE4,0xE5}; //½ÓÊÕµØÖ·
RX_ADDRESS:
        DC8 225, 226, 227, 228, 229
//   56 

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
//   57 static s_NRF24L01 s_nrf24l01;
s_nrf24l01:
        DS8 24
//   58 /***********************************************************************************************
//   59  ¹¦ÄÜ£ºNRF24L01 ¶ÁÐ´Ò»¸ö×Ö½Ú
//   60  ÐÎ²Î£º·¢ËÍµÄÊý¾Ý
//   61  ·µ»Ø£º¶Áµ½µÄÊý¾Ý
//   62  Ïê½â£ºµ÷ÓÃSPIÄ£¿é
//   63 ************************************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   64 static uint8_t NRF2401_ReadWriteByte(uint8_t data)
NRF2401_ReadWriteByte:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function NRF2401_ReadWriteByte
//   65 {
        FUNCALL NRF2401_ReadWriteByte, SPI_SendReadByte
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R10
//   66 #if NRF24L01HardWareSPI
//   67   return NRF2401HardWareSPI_SendByte(data);   //·¢ËÍ²¢¶ÁÈ¡Ò»×Ö½ÚÊý¾Ý
        MOV.B   R10, R13
        MOV.B   #0x3, R12
        CALLA   #SPI_SendReadByte
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   68 #else
//   69   for(uint8_t i=0;i < 8;i++)          // Ñ­»·8´Î
//   70   {
//   71     NRF2401_SIMO = (data&0x80) ? 1 : 0;//ÉÏÉýÑØ·¢ËÍÊý¾Ý// byte×î¸ßÎ»Êä³öµ½MOSI
//   72     data <<= 1;             // µÍÒ»Î»ÒÆÎ»µ½×î¸ßÎ»
//   73     NRF2401_SCL = 1; 
//   74     if(NRF2401_SOMI)            // À­¸ßSCK£¬nRF24L01´ÓMOSI¶ÁÈë1Î»Êý¾Ý£¬Í¬Ê±´ÓMISOÊä³ö1Î»Êý¾Ý
//   75       data |= 0x01;       	// ¶ÁMISOµ½byte×îµÍÎ»
//   76     NRF2401_SCL = 0;            	// SCKÖÃµÍ
//   77   }
//   78   return(data);           	// ·µ»Ø¶Á³öµÄÒ»×Ö½Ú
//   79 #endif
//   80 }
//   81 /***********************************************************************************************
//   82  ¹¦ÄÜ£ºNRF24L01 Ð´¼Ä´æÆ÷
//   83  ÐÎ²Î£ºreg: ¼Ä´æÆ÷
//   84        value:Ð´ÈëµÄÖµ
//   85  ·µ»Ø£º¶Áµ½µÄÊý¾Ý
//   86  Ïê½â£ºÎÞ
//   87 ************************************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   88 static uint8_t NRF2401_ReadWriteReg(uint8_t reg,uint8_t value)
NRF2401_ReadWriteReg:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function NRF2401_ReadWriteReg
//   89 {
        FUNCALL NRF2401_ReadWriteReg, NRF2401_ReadWriteByte
        LOCFRAME CSTACK, 20, STACK
        FUNCALL NRF2401_ReadWriteReg, NRF2401_ReadWriteByte
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.B   R12, R11
        MOV.B   R13, R10
//   90 	NRF2401_CSN = 0;                   // CSN low, init SPI transaction
        BIC.B   #0x4, &0x263
//   91 	uint8_t status = NRF2401_ReadWriteByte(reg);      // select register
        MOV.B   R11, R12
        CALLA   #NRF2401_ReadWriteByte
        MOV.B   R12, R8
//   92 	NRF2401_ReadWriteByte(value);             // ..and write value to it..
        MOV.B   R10, R12
        CALLA   #NRF2401_ReadWriteByte
//   93 	NRF2401_CSN = 1;                   // CSN high again
        BIS.B   #0x4, &0x263
//   94 	return(status);            // return nRF24L01 status byte
        MOV.B   R8, R12
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
        REQUIRE _A_PDOUT_L
//   95 }
//   96 /***********************************************************************************************
//   97  ¹¦ÄÜ£ºNRF24L01 Ð´¼Ä´æÆ÷
//   98  ÐÎ²Î£ºreg: ¼Ä´æÆ÷
//   99        value:Ð´ÈëµÄÖµ
//  100  ·µ»Ø£º¶Áµ½µÄÊý¾Ý
//  101  Ïê½â£ºÎÞ
//  102 ************************************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  103 static uint8_t NRF2401_WriteBuffer(uint8_t reg,uint8_t *pBuf,uint8_t bytes)
NRF2401_WriteBuffer:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function NRF2401_WriteBuffer
//  104 {
        FUNCALL NRF2401_WriteBuffer, NRF2401_ReadWriteByte
        LOCFRAME CSTACK, 28, STACK
        FUNCALL NRF2401_WriteBuffer, NRF2401_ReadWriteByte
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.B   R12, R11
        MOVA    R13, R8
        MOV.B   R14, R10
//  105 	NRF2401_CSN = 0; 
        BIC.B   #0x4, &0x263
//  106 	uint8_t status = NRF2401_ReadWriteByte(reg);    // Select register to write to and read status byte
        MOV.B   R11, R12
        CALLA   #NRF2401_ReadWriteByte
        MOV.B   R12, R9
//  107 	for(uint8_t i=0; i<bytes; i++) // then write all byte in buffer(*pBuf)
        MOV.B   #0x0, R6
??NRF2401_WriteBuffer_0:
        CMP.B   R10, R6
        JC      ??NRF2401_WriteBuffer_1
//  108 	{
//  109 		NRF2401_ReadWriteByte(*pBuf++);
        MOV.B   @R8, R12
        CALLA   #NRF2401_ReadWriteByte
        ADDA    #0x1, R8
//  110 	}
        ADD.B   #0x1, R6
        JMP     ??NRF2401_WriteBuffer_0
//  111 	NRF2401_CSN = 1;                 // Set CSN high again
??NRF2401_WriteBuffer_1:
        BIS.B   #0x4, &0x263
//  112 	return(status);          // return nRF24L01 status byte
        MOV.B   R9, R12
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
        REQUIRE _A_PDOUT_L
//  113 }
//  114 /***********************************************************************************************
//  115  ¹¦ÄÜ£ºNRF24L01 ¶ÁBuffer
//  116  ÐÎ²Î£ºreg: ¼Ä´æÆ÷
//  117        pBuf:Êý¾ÝÖ¸Õë
//  118 		 	 bytes: Ð´ÈëµÄ×Ö½ÚÊý
//  119  ·µ»Ø£º¶Á×´Ì¬
//  120  Ïê½â£ºÎÞ
//  121 ************************************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  122 static uint8_t NRF2401_ReadBuffer(uint8_t reg,uint8_t *pBuf,uint8_t bytes)
NRF2401_ReadBuffer:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function NRF2401_ReadBuffer
//  123 {
        FUNCALL NRF2401_ReadBuffer, NRF2401_ReadWriteByte
        LOCFRAME CSTACK, 28, STACK
        FUNCALL NRF2401_ReadBuffer, NRF2401_ReadWriteByte
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOV.B   R12, R11
        MOVA    R13, R8
        MOV.B   R14, R10
//  124 	NRF2401_CSN = 0;                    		// Set CSN low, init SPI tranaction
        BIC.B   #0x4, &0x263
//  125 	uint8_t status = NRF2401_ReadWriteByte(reg);       		// Select register to write to and read status byte
        MOV.B   R11, R12
        CALLA   #NRF2401_ReadWriteByte
        MOV.B   R12, R9
//  126 	for(uint8_t i=0;i<bytes;i++)
        MOV.B   #0x0, R6
??NRF2401_ReadBuffer_0:
        CMP.B   R10, R6
        JC      ??NRF2401_ReadBuffer_1
//  127 	{
//  128 		pBuf[i] = NRF2401_ReadWriteByte(0);    // Perform SPI_RW to read byte from nRF24L01
        MOV.B   #0x0, R12
        CALLA   #NRF2401_ReadWriteByte
        MOV.B   R6, R15
        ADDA    R8, R15
        MOV.B   R12, 0(R15)
//  129 	}
        ADD.B   #0x1, R6
        JMP     ??NRF2401_ReadBuffer_0
//  130 	NRF2401_CSN = 1;                           // Set CSN high again
??NRF2401_ReadBuffer_1:
        BIS.B   #0x4, &0x263
//  131 	return(status);                    // return nRF24L01 status byte
        MOV.B   R9, R12
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
        REQUIRE _A_PDOUT_L
//  132 }
//  133 
//  134 /***********************************************************************************************
//  135  ¹¦ÄÜ£º¼ì²âNRF24L01 ÊÇ·ñ´æÔÚ
//  136  ÐÎ²Î£º
//  137  ·µ»Ø£ºNRF_OK : ³É¹¦   NRF_ERR:Ê§°Ü
//  138  Ïê½â£ºÎÞ
//  139 ************************************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  140 static uint8_t NRF24L01_Check(void)
NRF24L01_Check:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function NRF24L01_Check
//  141 {
        FUNCALL NRF24L01_Check, NRF2401_WriteBuffer
        LOCFRAME CSTACK, 10, STACK
        FUNCALL NRF24L01_Check, NRF2401_ReadBuffer
        LOCFRAME CSTACK, 10, STACK
        SUB.W   #0x6, SP
          CFI CFA SP+10
//  142 	uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
        MOV.W   SP, R15
        ADD.W   #0x0, R15
        MOV.W   R15, R12
        MOVA    #`?<Constant {165, 165, 165, 165, 165}>`, R14
        MOVA    #0x5, R13
        CALLA   #?CopyMemoryBytes20
//  143 	NRF2401_WriteBuffer(WRITE_REG+TX_ADDR,buf,5);//Ð´Èë5¸ö×Ö½ÚµÄµØÖ·.	
        MOV.B   #0x5, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.B   #0x30, R12
        CALLA   #NRF2401_WriteBuffer
//  144 	NRF2401_ReadBuffer(TX_ADDR,buf,5); //¶Á³öÐ´ÈëµÄµØÖ·  
        MOV.B   #0x5, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.B   #0x10, R12
        CALLA   #NRF2401_ReadBuffer
//  145 	for(uint8_t i=0;i < 5;i++)
        MOV.B   #0x0, R14
??NRF24L01_Check_0:
        CMP.B   #0x5, R14
        JC      ??NRF24L01_Check_1
//  146 	{
//  147 		if(buf[i] != 0xA5) return NRF_ERR;
        MOV.B   R14, R15
        ADD.W   SP, R15
        CMP.B   #0xa5, 0(R15)
        JEQ     ??NRF24L01_Check_2
        MOV.B   #0x1, R12
        JMP     ??NRF24L01_Check_3
//  148 	}
??NRF24L01_Check_2:
        ADD.B   #0x1, R14
        JMP     ??NRF24L01_Check_0
//  149 	return NRF_OK;
??NRF24L01_Check_1:
        MOV.B   #0x0, R12
??NRF24L01_Check_3:
        ADD.W   #0x6, SP
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//  150 /*******************************************************************************
//  151 *  º¯ÊýÃû³Æ£º
//  152 *  ¹¦ÄÜËµÃ÷£ºNRF24L01³õÊ¼»¯
//  153 *  ²ÎÊýËµÃ÷£º
//  154 *  º¯Êý·µ»Ø£º
//  155 *  Ê¹ÓÃÊ¾Àý£º
//  156 ********************************************************************************/}

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  157 uint8_t NRF2401_Init(s_NRF24L01 nrf24l01)
NRF2401_Init:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function NRF2401_Init
//  158 {
        FUNCALL NRF2401_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, SPI_Master_Init
        LOCFRAME CSTACK, 12, STACK
        FUNCALL NRF2401_Init, NRF24L01_Check
        LOCFRAME CSTACK, 12, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_WriteBuffer
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_WriteBuffer
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_Init, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  159         s_nrf24l01 = nrf24l01;
        MOVA    #s_nrf24l01, R12
        MOV.W   SP, R15
        ADD.W   #0x8, R15
        MOV.W   R15, R14
        MOVA    #0xc, R13
        CALLA   #?CopyMemoryWords20
//  160         
//  161         GPIO_Init(NRF2401_CE_PORT,NRF2401_CE_PIN,GPO);
        MOV.W   #0x2, R14
        MOV.W   #0x80, R13
        MOV.B   #0x2, R12
        CALLA   #GPIO_MultiBits_Init
//  162         GPIO_Init(NRF2401_CSN_PORT,NRF2401_CSN_PIN,GPO);
        MOV.W   #0x2, R14
        MOV.W   #0x4, R13
        MOV.B   #0x7, R12
        CALLA   #GPIO_MultiBits_Init
//  163         //GPIO_Init(NRF2401_IRQ_PORT,NRF2401_IRQ_PIN,GPI);
//  164         
//  165         nrf24l01.CallBack_IRQ_Init();
        MOVA    0xc(SP), R15
        CALLA   R15
//  166 #if NRF24L01HardWareSPI
//  167         NRF2401HardWareSPI_Init();
        PUSH.B  #0x2
          CFI CFA SP+10
        PUSH.B  #0x0
          CFI CFA SP+12
        MOV.B   #0x1, R13
        MOV.W   #0x4b40, R14
        MOV.W   #0x4c, R15
        MOV.B   #0x3, R12
        CALLA   #SPI_Master_Init
//  168 #else
//  169         GPIO_Init(NRF2401_SCL_PORT,NRF2401_SCL_PIN,GPO);
//  170         GPIO_Init(NRF2401_SIMO_PORT,NRF2401_SIMO_PIN,GPO);
//  171         GPIO_Init(NRF2401_SOMI_PORT,NRF2401_SOMI_PIN,GPI);
//  172 #endif
//  173         
//  174 	NRF2401_CSN = 1;			// Spi disable	
        BIS.B   #0x4, &0x263
//  175         NRF2401_CE = 0;			        // chip enable
        BIC.B   #0x80, &0x222
//  176         //¼ì²âNRF2401 ÊÇ·ñ´æÔÚ
//  177         uint8_t checkStatus = NRF24L01_Check();
        CALLA   #NRF24L01_Check
        MOV.B   R12, R10
//  178         if(checkStatus == NRF_OK)
        ADD.W   #0x4, SP
          CFI CFA SP+8
        CMP.B   #0x0, R10
        JNE     ??NRF2401_Init_0
//  179         {
//  180           NRF2401_CE=0;
        BIC.B   #0x80, &0x222
//  181           
//  182           NRF2401_ReadWriteReg(WRITE_REG+SETUP_AW, ADR_WIDTH - 2);          //ÉèÖÃµØÖ·³¤¶ÈÎª TX_ADR_WIDTH   	    
        MOV.B   #0x3, R13
        MOV.B   #0x23, R12
        CALLA   #NRF2401_ReadWriteReg
//  183           NRF2401_WriteBuffer(WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//Ð´TX½ÚµãµØÖ· 
        MOV.B   #0x5, R14
        MOVA    #TX_ADDRESS, R13
        MOV.B   #0x30, R12
        CALLA   #NRF2401_WriteBuffer
//  184           NRF2401_WriteBuffer(WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //ÉèÖÃTX½ÚµãµØÖ·,Ö÷ÒªÎªÁËÊ¹ÄÜACK	  
        MOV.B   #0x5, R14
        MOVA    #RX_ADDRESS, R13
        MOV.B   #0x2a, R12
        CALLA   #NRF2401_WriteBuffer
//  185           NRF2401_ReadWriteReg(WRITE_REG+EN_AA,0x01);     //Ê¹ÄÜÍ¨µÀ0µÄ×Ô¶¯Ó¦´ð    
        MOV.B   #0x1, R13
        MOV.B   #0x21, R12
        CALLA   #NRF2401_ReadWriteReg
//  186           NRF2401_ReadWriteReg(WRITE_REG+EN_RXADDR,0x01); //Ê¹ÄÜÍ¨µÀ0µÄ½ÓÊÕµØÖ·  
        MOV.B   #0x1, R13
        MOV.B   #0x22, R12
        CALLA   #NRF2401_ReadWriteReg
//  187           NRF2401_ReadWriteReg(WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//Ñ¡ÔñÍ¨µÀ0µÄÓÐÐ§Êý¾Ý¿í¶È
        MOV.B   #0x20, R13
        MOV.B   #0x31, R12
        CALLA   #NRF2401_ReadWriteReg
//  188           NRF2401_ReadWriteReg(WRITE_REG+SETUP_RETR,0x1a);//ÉèÖÃ×Ô¶¯ÖØ·¢¼ä¸ôÊ±¼ä:500us + 86us;×î´ó×Ô¶¯ÖØ·¢´ÎÊý:10´Î
        MOV.B   #0x1a, R13
        MOV.B   #0x24, R12
        CALLA   #NRF2401_ReadWriteReg
//  189           NRF2401_ReadWriteReg(WRITE_REG+RF_CH,40);       //ÉèÖÃRFÍ¨µÀÎª40
        MOV.B   #0x28, R13
        MOV.B   #0x25, R12
        CALLA   #NRF2401_ReadWriteReg
//  190           NRF2401_ReadWriteReg(WRITE_REG+RF_SETUP,0x0f);  //ÉèÖÃTX·¢Éä²ÎÊý,0dbÔöÒæ,2Mbps,µÍÔëÉùÔöÒæ¿ªÆô
        MOV.B   #0xf, R13
        MOV.B   #0x26, R12
        CALLA   #NRF2401_ReadWriteReg
//  191           NRF2401_ReadWriteReg(WRITE_REG+CONFIG,0x0e);     //ÅäÖÃ»ù±¾¹¤×÷Ä£Ê½µÄ²ÎÊý;PWR_UP,EN_CRC,16BIT_CRC,½ÓÊÕÄ£Ê½,¿ªÆôËùÓÐÖÐ¶Ï
        MOV.B   #0xe, R13
        MOV.B   #0x20, R12
        CALLA   #NRF2401_ReadWriteReg
//  192 
//  193           NRF2401_CE=1;//CEÎª¸ß,10usºóÆô¶¯·¢ËÍ
        BIS.B   #0x80, &0x222
//  194         }
//  195 	return checkStatus;
??NRF2401_Init_0:
        MOV.B   R10, R12
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5
        REQUIRE _A_PDOUT_L
        REQUIRE _A_PBOUT_L
//  196 }
//  197 /*******************************************************************************
//  198 *  º¯ÊýÃû³Æ£º
//  199 *  ¹¦ÄÜËµÃ÷£º¸Ãº¯Êý³õÊ¼»¯NRF24L01µ½RXÄ£Ê½
//  200              ÉèÖÃRXµØÖ·,Ð´RXÊý¾Ý¿í¶È,Ñ¡ÔñRFÆµµÀ,²¨ÌØÂÊºÍLNA HCURR
//  201              µ±CE±ä¸ßºó,¼´½øÈëRXÄ£Ê½,²¢¿ÉÒÔ½ÓÊÕÊý¾ÝÁË
//  202 *  ²ÎÊýËµÃ÷£º
//  203 *  º¯Êý·µ»Ø£º
//  204 *  Ê¹ÓÃÊ¾Àý£º
//  205 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  206 void NRF2401_SetRXMode(void)
NRF2401_SetRXMode:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function NRF2401_SetRXMode
//  207 {
//  208 	NRF2401_CE=0;
        FUNCALL NRF2401_SetRXMode, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 4, STACK
        BIC.B   #0x80, &0x222
//  209    
//  210 	NRF2401_ReadWriteReg(WRITE_REG+CONFIG, 0x0f);//ÅäÖÃ»ù±¾¹¤×÷Ä£Ê½µÄ²ÎÊý;PWR_UP,EN_CRC,16BIT_CRC,½ÓÊÕÄ£Ê½
        MOV.B   #0xf, R13
        MOV.B   #0x20, R12
        CALLA   #NRF2401_ReadWriteReg
//  211         
//  212 	NRF2401_CE = 1; //CEÎª¸ß,½øÈë½ÓÊÕÄ£Ê½
        BIS.B   #0x80, &0x222
//  213 }	
        RETA
          CFI EndBlock cfiBlock6
        REQUIRE _A_PBOUT_L
//  214 /*******************************************************************************
//  215 *  º¯ÊýÃû³Æ£º
//  216 *  ¹¦ÄÜËµÃ÷£º¸Ãº¯Êý³õÊ¼»¯NRF24L01µ½TXÄ£Ê½
//  217              ÉèÖÃTXµØÖ·,Ð´TXÊý¾Ý¿í¶È,ÉèÖÃRX×Ô¶¯Ó¦´ðµÄµØÖ·,Ìî³äTX·¢ËÍÊý¾Ý,Ñ¡ÔñRFÆµµÀ,²¨ÌØÂÊºÍLNA HCURR
//  218              PWR_UP,CRCÊ¹ÄÜ
//  219              µ±CE±ä¸ßºó,¼´½øÈëRXÄ£Ê½,²¢¿ÉÒÔ½ÓÊÕÊý¾ÝÁË		   
//  220              CEÎª¸ß´óÓÚ10us,ÔòÆô¶¯·¢ËÍ.	
//  221 *  ²ÎÊýËµÃ÷£º
//  222 *  º¯Êý·µ»Ø£º
//  223 *  Ê¹ÓÃÊ¾Àý£º
//  224 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  225 void NRF2401_SetTXMode(void)
NRF2401_SetTXMode:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function NRF2401_SetTXMode
//  226 {				
//  227 	NRF2401_CE=0;
        FUNCALL NRF2401_SetTXMode, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 4, STACK
        BIC.B   #0x80, &0x222
//  228  
//  229 	NRF2401_ReadWriteReg(WRITE_REG+CONFIG,0x0e);    //ÅäÖÃ»ù±¾¹¤×÷Ä£Ê½µÄ²ÎÊý;PWR_UP,EN_CRC,16BIT_CRC,½ÓÊÕÄ£Ê½,¿ªÆôËùÓÐÖÐ¶Ï
        MOV.B   #0xe, R13
        MOV.B   #0x20, R12
        CALLA   #NRF2401_ReadWriteReg
//  230 	
//  231         NRF2401_CE=1;//CEÎª¸ß,10usºóÆô¶¯·¢ËÍ
        BIS.B   #0x80, &0x222
//  232 }
        RETA
          CFI EndBlock cfiBlock7
        REQUIRE _A_PBOUT_L
//  233 /*******************************************************************************
//  234 *  º¯ÊýÃû³Æ£º
//  235 *  ¹¦ÄÜËµÃ÷£ºÆô¶¯NRF24L01·¢ËÍÒ»´ÎÊý¾Ý
//  236 *  ²ÎÊýËµÃ÷£ºtxbuf:´ý·¢ËÍÊý¾ÝÊ×µØÖ·
//  237 *  º¯Êý·µ»Ø£º·µ»ØÖµ:·¢ËÍÍê³É×´¿ö
//  238 *  Ê¹ÓÃÊ¾Àý£º
//  239 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  240 void NRF2401_SendData(uint8_t *txbuf)
NRF2401_SendData:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function NRF2401_SendData
//  241 {
        FUNCALL NRF2401_SendData, NRF2401_WriteBuffer
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_SendData, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOVA    R12, R10
//  242 	/*uint8_t sta;
//  243 	NRF2401_CE=0;
//  244 	NRF2401_WriteBuffer(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//Ð´Êý¾Ýµ½TX BUF  32¸ö×Ö½Ú
//  245  	NRF2401_CE=1;//Æô¶¯·¢ËÍ	  
//  246 	while(NRF2401_IRQ!=0);//µÈ´ý·¢ËÍÍê³É
//  247 	sta = NRF2401_ReadWriteReg(STATUS,0xFF);  //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷µÄÖµ	
//  248 	NRF2401_ReadWriteReg(WRITE_REG+STATUS,sta); //Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
//  249 	
//  250 	if(sta & MAX_TX)//´ïµ½×î´óÖØ·¢´ÎÊý
//  251 	{
//  252 		NRF2401_ReadWriteReg(FLUSH_TX,0xff);//Çå³ýTX FIFO¼Ä´æÆ÷ 
//  253 		return MAX_TX; 
//  254 	}
//  255 	if(sta & TX_OK)//·¢ËÍÍê³É
//  256 	{
//  257 		return TX_OK;
//  258 	}
//  259 	return 0xff;//ÆäËûÔ­Òò·¢ËÍÊ§°Ü
//  260         */
//  261         NRF2401_CE = 0;			//StandBy IÄ£Ê½	
        BIC.B   #0x80, &0x222
//  262         
//  263 	NRF2401_WriteBuffer(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); 			 // ×°ÔØÊý¾Ý	
        MOV.B   #0x20, R14
        MOVA    R10, R13
        MOV.B   #0xa0, R12
        CALLA   #NRF2401_WriteBuffer
//  264         NRF2401_ReadWriteReg(WRITE_REG+STATUS,STATUS_TX_DS|STATUS_MAX_RT); //Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
        MOV.B   #0x30, R13
        MOV.B   #0x27, R12
        CALLA   #NRF2401_ReadWriteReg
//  265         
//  266         NRF2401_CE = 1;		 //ÖÃ¸ßCE£¬¼¤·¢Êý¾Ý·¢ËÍ
        BIS.B   #0x80, &0x222
//  267 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8
        REQUIRE _A_PBOUT_L
//  268 /*******************************************************************************
//  269 *  º¯ÊýÃû³Æ£º
//  270 *  ¹¦ÄÜËµÃ÷£ºÆô¶¯NRF24L01·¢ËÍÒ»´ÎÊý¾Ý
//  271 *  ²ÎÊýËµÃ÷£ºtxbuf:´ý·¢ËÍÊý¾ÝÊ×µØÖ·
//  272 *  º¯Êý·µ»Ø£º·µ»ØÖµ:0£¬½ÓÊÕÍê³É£»ÆäËû£¬´íÎó´úÂë
//  273 *  Ê¹ÓÃÊ¾Àý£º
//  274 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  275 uint8_t NRF2401_RecData(uint8_t *rxbuf)
NRF2401_RecData:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function NRF2401_RecData
//  276 {
        FUNCALL NRF2401_RecData, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 12, STACK
        FUNCALL NRF2401_RecData, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 12, STACK
        FUNCALL NRF2401_RecData, NRF2401_ReadBuffer
        LOCFRAME CSTACK, 12, STACK
        FUNCALL NRF2401_RecData, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
//  277 	uint8_t status = NRF2401_ReadWriteReg(STATUS,0xFF);  //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷µÄÖµ    	 
        MOV.B   #0xff, R13
        MOV.B   #0x7, R12
        CALLA   #NRF2401_ReadWriteReg
        MOV.B   R12, R11
//  278 	NRF2401_ReadWriteReg(WRITE_REG+STATUS,status); //Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
        MOV.B   R11, R13
        MOV.B   #0x27, R12
        CALLA   #NRF2401_ReadWriteReg
//  279         if(status & RX_OK)//½ÓÊÕµ½Êý¾Ý
        BIT.B   #0x40, R11
        JNC     ??NRF2401_RecData_0
//  280 	{
//  281 		NRF2401_ReadBuffer(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//¶ÁÈ¡Êý¾Ý
        MOV.B   #0x20, R14
        MOVA    R10, R13
        MOV.B   #0x61, R12
        CALLA   #NRF2401_ReadBuffer
//  282 		NRF2401_ReadWriteReg(FLUSH_RX,0xff);//Çå³ýRX FIFO¼Ä´æÆ÷ 
        MOV.B   #0xff, R13
        MOV.B   #0xe2, R12
        CALLA   #NRF2401_ReadWriteReg
//  283 		return RX_OK; 
        MOV.B   #0x40, R12
        JMP     ??NRF2401_RecData_1
//  284 	}   
//  285 	return 0xff;//Ã»ÊÕµ½ÈÎºÎÊý¾Ý
??NRF2401_RecData_0:
        MOV.B   #0xff, R12
??NRF2401_RecData_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock9
//  286 }
//  287 /*******************************************************************************
//  288 *  º¯ÊýÃû³Æ£º
//  289 *  ¹¦ÄÜËµÃ÷£ºNRF24L01ÖÐ¶Ï´¦Àíº¯Êý£¬ÇëÔÚÖÐ¶ÏÖÐÌí¼Ó¸Ãº¯Êý
//  290 *  ²ÎÊýËµÃ÷£º
//  291 *  º¯Êý·µ»Ø£º
//  292 *  Ê¹ÓÃÊ¾Àý£º
//  293 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  294 void  NRF2401_IRQ_Handler()
NRF2401_IRQ_Handler:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function NRF2401_IRQ_Handler
//  295 {
        FUNCALL NRF2401_IRQ_Handler, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler, NRF2401_ReadBuffer
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler
        LOCFRAME CSTACK, 8, STACK
        FUNCALL NRF2401_IRQ_Handler, NRF2401_ReadWriteReg
        LOCFRAME CSTACK, 8, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  296     /*¶ÁÈ¡status¼Ä´æÆ÷µÄÖµ  */
//  297     uint8_t state = NRF2401_ReadWriteReg(STATUS,0xFF);  //¶ÁÈ¡×´Ì¬¼Ä´æÆ÷µÄÖµ   
        MOV.B   #0xff, R13
        MOV.B   #0x7, R12
        CALLA   #NRF2401_ReadWriteReg
        MOV.B   R12, R10
//  298     if(state & STATUS_RX_DR) //½ÓÊÕµ½Êý¾Ý
        BIT.B   #0x40, R10
        JNC     ??NRF2401_IRQ_Handler_0
//  299     {
//  300        NRF2401_CE = 0;			//StandBy IÄ£Ê½	
        BIC.B   #0x80, &0x222
//  301        if(s_nrf24l01.CallBack_RecevieData != NULL)
        MOVA    &s_nrf24l01 + 8, R15
        CMPA    #0x0, R15
        JEQ     ??NRF2401_IRQ_Handler_1
//  302        {
//  303           NRF2401_ReadBuffer(RD_RX_PLOAD,(uint8_t *)s_nrf24l01.pReceiveData,RX_PLOAD_WIDTH);//¶ÁÈ¡Êý¾Ý
        MOV.B   #0x20, R14
        MOVA    &s_nrf24l01, R13
        MOV.B   #0x61, R12
        CALLA   #NRF2401_ReadBuffer
//  304           s_nrf24l01.CallBack_RecevieData();
        CALLA   &s_nrf24l01 + 8
//  305        }
//  306        NRF2401_ReadWriteReg(FLUSH_RX,0xff);//Çå³ýRX FIFO¼Ä´æÆ÷ 
??NRF2401_IRQ_Handler_1:
        MOV.B   #0xff, R13
        MOV.B   #0xe2, R12
        CALLA   #NRF2401_ReadWriteReg
//  307        NRF2401_CE = 1;		 //ÖÃ¸ßCE£¬¼¤·¢Êý¾Ý·¢ËÍ
        BIS.B   #0x80, &0x222
//  308     }
//  309 
//  310     if(state & STATUS_TX_DS) //·¢ËÍÍêÊý¾Ý
??NRF2401_IRQ_Handler_0:
        BIT.B   #0x20, R10
        JNC     ??NRF2401_IRQ_Handler_2
//  311     {
//  312         if(s_nrf24l01.CallBack_SendDataOk != NULL)
        MOVA    &s_nrf24l01 + 12, R15
        CMPA    #0x0, R15
        JEQ     ??NRF2401_IRQ_Handler_2
//  313         {
//  314           s_nrf24l01.CallBack_SendDataOk();
        CALLA   &s_nrf24l01 + 12
//  315         }
//  316     }
//  317 
//  318     if(state & STATUS_MAX_RT)      //·¢ËÍ³¬Ê±
??NRF2401_IRQ_Handler_2:
        BIT.B   #0x10, R10
        JNC     ??NRF2401_IRQ_Handler_3
//  319     {
//  320         if(s_nrf24l01.CallBack_SendOutTime != NULL)
        MOVA    &s_nrf24l01 + 16, R15
        CMPA    #0x0, R15
        JEQ     ??NRF2401_IRQ_Handler_4
//  321         {
//  322            s_nrf24l01.CallBack_SendOutTime();
        CALLA   &s_nrf24l01 + 16
//  323         }
//  324         NRF2401_ReadWriteReg(FLUSH_TX,0xff);//Çå³ýTX FIFO¼Ä´æÆ÷
??NRF2401_IRQ_Handler_4:
        MOV.B   #0xff, R13
        MOV.B   #0xe1, R12
        CALLA   #NRF2401_ReadWriteReg
//  325     }
//  326 
//  327     if(state & STATUS_TX_FULL) //TX FIFO Âú
??NRF2401_IRQ_Handler_3:
        BIT.B   #0x1, R10
        JNC     ??NRF2401_IRQ_Handler_5
//  328     {
//  329         if(s_nrf24l01.CallBack_TxFull != NULL)
        MOVA    &s_nrf24l01 + 20, R15
        CMPA    #0x0, R15
        JEQ     ??NRF2401_IRQ_Handler_5
//  330         {
//  331            s_nrf24l01.CallBack_TxFull();
        CALLA   &s_nrf24l01 + 20
//  332         }
//  333     }
//  334     NRF2401_ReadWriteReg(WRITE_REG+STATUS,state); //Çå³ýTX_DS»òMAX_RTÖÐ¶Ï±êÖ¾
??NRF2401_IRQ_Handler_5:
        MOV.B   R10, R13
        MOV.B   #0x27, R12
        CALLA   #NRF2401_ReadWriteReg
//  335 }
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock10
        REQUIRE _A_PBOUT_L

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
//  336 
//  337 
// 
// 794 bytes in segment CODE
//   4 bytes in segment DATA16_AN
//  15 bytes in segment DATA20_C
//  24 bytes in segment DATA20_Z
// 
// 794 bytes of CODE  memory
//  15 bytes of CONST memory
//  24 bytes of DATA  memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
