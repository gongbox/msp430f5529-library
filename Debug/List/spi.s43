///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      26/Nov/2016  11:15:14 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\spi.c                                                /
//    Command line  =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\spi.c -D DEBUG -D RAM_VECTOR -lA                     /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \ -o E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug /
//                     \Obj\ --no_cse --no_unroll --no_inline                 /
//                     --no_code_motion --no_tbaa --debug -D__MSP430F5529__   /
//                     -e --double=32 --dlib_config "D:\Program Files\IAR     /
//                     Systems\Embedded Workbench 6.4                         /
//                     Evaluation\430\LIB\DLIB\dl430xlff.h" -I                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\in /
//                     c\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Driv /
//                     ers\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\Drivers\src\USB\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I             /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\ /
//                     ¹¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_HID_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_MSC_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\  /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWar /
//                     e\delay\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\HardWare\18b20\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\KEY\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Har /
//                     dWare\12864\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\HardWare\oled\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6 /
//                     \C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc\ -I                 /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\m /
//                     pu6050\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³Ì /
//                     Ä£°å\HardWare\nokia5110\inc\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     okia5110\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤ /
//                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                         /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å /
//                     \HardWare\2.2TFT\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\ -I                       /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\    /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\ /
//                     inc\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Sy /
//                     stem\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£ /
//                     °å\User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\User\USER\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII /
//                     \App\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\L /
//                     ib\uCOSII\CONFIHG\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII /
//                     \CORE\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ /
//                     Lib\FatFs\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ /
//                     £°å\Lib\FatFs\option\ --core=430X --data_model=large   /
//                     -On --multiplier=32 --multiplier_location=4C0          /
//                     --hw_workaround=CPU40                                  /
//    List file     =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \spi.s43                                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME spi

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?DivMod32u
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC SPI_ClearITPendingBit
        FUNCTION SPI_ClearITPendingBit,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC SPI_GetITStatus
        FUNCTION SPI_GetITStatus,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC SPI_ITConfig
        FUNCTION SPI_ITConfig,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC SPI_Master_Init
        FUNCTION SPI_Master_Init,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC SPI_PIN
        PUBLIC SPI_SendReadByte
        FUNCTION SPI_SendReadByte,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC SPI_SendReadString
        FUNCTION SPI_SendReadString,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        PUBLIC SPI_SetBaudRate
        FUNCTION SPI_SetBaudRate,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 16, STACK
        PUBLIC USCIX
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN g_sClock
        EXTERN GPIO_MultiBits_Init
        FUNCTION GPIO_MultiBits_Init,0202H

// E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\src\spi.c
//    1 #include "spi.h"
//    2 #include "clock.h"
//    3 #include "gpio.h"
//    4 #include "msp430f5529.h"
//    5 #include "msp430f5529MemMap.h"
//    6 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    7 const USCI_MemMapPtr USCIX[]={USCI_A0_BASE_PTR,USCI_A1_BASE_PTR,USCI_B0_BASE_PTR,USCI_B1_BASE_PTR};
USCIX:
        DC32 5C0H, 600H, 5E0H, 620H
//    8 
//    9 const struct
//   10 {
//   11   GPIO_PIN STE_PIN ; //
//   12   GPIO_PIN SIMO_PIN; //
//   13   GPIO_PIN SOMI_PIN; //
//   14   GPIO_PIN CLK_PIN ; //

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
//   15 }SPI_PIN[]=
SPI_PIN:
        DC8 2, 2, 2, 3, 2, 4, 1, 7, 3, 3, 3, 4, 3, 5, 3, 0, 1, 1, 2, 0, 2, 1, 2
        DC8 2, 3, 0, 3, 1, 3, 2, 3, 3
//   16 { //        STE             SIMO             SOMI             CLK
//   17   /*SPI0*/{.STE_PIN={P3,2},.SIMO_PIN={P3,3},.SOMI_PIN={P3,4},.CLK_PIN={P2,7}},    
//   18   /*SPI1*/{.STE_PIN={P4,3},.SIMO_PIN={P4,4},.SOMI_PIN={P4,5},.CLK_PIN={P4,0}},       
//   19   /*SPI2*/{.STE_PIN={P2,1},.SIMO_PIN={P3,0},.SOMI_PIN={P3,1},.CLK_PIN={P3,2}},    
//   20   /*SPI3*/{.STE_PIN={P4,0},.SIMO_PIN={P4,1},.SOMI_PIN={P4,2},.CLK_PIN={P4,3}},  
//   21 };//Òý½Å³õÊ¼»¯Êý×é
//   22 /*******************************************************************************
//   23 *  º¯ÊýÃû³Æ£ºSPI_Master_Init (SPIn spin,uint32_t BaudRate,FirstBit firstbit, SPI_STE_Mode spistemode,SPI_CLK_Mode spiclkmode)
//   24 *  ¹¦ÄÜËµÃ÷£ºSPI³õÊ¼»¯
//   25 *  ²ÎÊýËµÃ÷£ºSPIn spin                  :SPIÄ£¿éºÅ
//   26              uint32_t BaudRate          :´«Êä²¨ÌØÂÊ
//   27              SPI_FirstBit firstbit      :ÏÈ·¢ËÍ¸ßÎ»»òµÍÎ»Êý¾Ý
//   28              SPI_STE_Mode spistemode    :STEÄ£Ê½
//   29              SPI_CLK_Mode spiclkmode    :SPIÊ±ÖÓÄ£Ê½
//   30 *  º¯Êý·µ»Ø£ºÎÞ
//   31 *  Ê¹ÓÃÀý³Ì£ºSPI_Master_Init(SPI2,10000000,MSB_First,SPI_STE_None,SPI_CLK_Mode_4); //³õÊ¼»¯SPIÄ£¿é£¬²¨ÌØÂÊÎª10000000£¬ÏÈ·¢ËÍ¸ßÎ»Êý¾Ý£¬STEÐÅºÅÆÁ±Î£¬Ê±ÖÓÏßÄ£Ê½4
//   32 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   33 void SPI_Master_Init (SPIn spin,uint32_t BaudRate,SPI_FirstBit firstbit, SPI_STE_Mode spistemode,SPI_CLK_Mode spiclkmode)
SPI_Master_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function SPI_Master_Init
//   34 {
        FUNCALL SPI_Master_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 30, STACK
        FUNCALL SPI_Master_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 30, STACK
        FUNCALL SPI_Master_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 30, STACK
        FUNCALL SPI_Master_Init, GPIO_MultiBits_Init
        LOCFRAME CSTACK, 30, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        SUB.W   #0x2, SP
          CFI CFA SP+30
        MOV.B   R12, R10
        MOV.W   R14, R6
        MOV.W   R15, R7
        MOV.B   R13, R8
        MOV.B   0x1e(SP), R11
        MOV.B   0x20(SP), R9
//   35   WordType BR;
//   36   BR.Word = g_sClock.SMCLK.nHZ/BaudRate;        //ÇóÈ¡²¨ÌØÂÊËùÐèµÄ·ÖÆµÏµÊý
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        MOV.W   R6, R14
        MOV.W   R7, R15
        CALLA   #?DivMod32u
        MOV.W   R12, 0(SP)
//   37   if(spistemode != SPI_STE_None)
        CMP.B   #0x0, R11
        JEQ     ??SPI_Master_Init_0
//   38   {
//   39     GPIO_Init(SPI_PIN[spin].STE_PIN.Port,SPI_PIN[spin].STE_PIN.Pin,SEL);     //Æ¬Ñ¡ÐÅºÅÒý½ÅÉèÎªµÚ¶þ¹¦ÄÜ
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 1(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_1
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_1:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN(R15), R12
        CALLA   #GPIO_MultiBits_Init
//   40   }
//   41   GPIO_Init(SPI_PIN[spin].SIMO_PIN.Port,SPI_PIN[spin].SIMO_PIN.Pin,SEL);     //Ö÷Êä³ö´ÓÊäÈëÐÅºÅÒý½ÅÉèÎªµÚ¶þ¹¦ÄÜ
??SPI_Master_Init_0:
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 3(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_2
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_2:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 2(R15), R12
        CALLA   #GPIO_MultiBits_Init
//   42   GPIO_Init(SPI_PIN[spin].SOMI_PIN.Port,SPI_PIN[spin].SOMI_PIN.Pin,SEL);     //Ö÷ÊäÈë´ÓÊä³öÐÅºÅÒý½ÅÉèÎªµÚ¶þ¹¦ÄÜ
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 5(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_3
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_3:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 4(R15), R12
        CALLA   #GPIO_MultiBits_Init
//   43   GPIO_Init(SPI_PIN[spin].CLK_PIN.Port,SPI_PIN[spin].CLK_PIN.Pin,SEL);       //Ê±ÖÓÐÅºÅÒý½ÅÉèÎªµÚ¶þ¹¦ÄÜ
        MOV.W   #0x100, R14
        MOV.W   #0x1, R13
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 7(R15), R15
        SUB.B   #0x1, R15
        JN      ??SPI_Master_Init_4
        RPT     R15
        RLAX.W  R13
??SPI_Master_Init_4:
        ADD.B   #0x1, R15
        MOV.B   R10, R15
        RLAM.A  #0x3, R15
        MOVX.B  SPI_PIN + 6(R15), R12
        CALLA   #GPIO_MultiBits_Init
//   44   
//   45   USCIX[spin]->CTL1 = UCSWRST; 
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x1, 0(R15)
//   46   USCIX[spin]->SYNC = BIT_SET;                             //Í¬²½Ä£Ê½
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   #0x1, 0x1(R15)
//   47   USCIX[spin]->MST = BIT_SET;                              //Ö÷»úÄ£Ê½
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   #0x8, 0x1(R15)
//   48   USCIX[spin]->MODE = spistemode;                      //Æ¬Ñ¡ÐÅºÅÉèÖÃ
        MOV.B   R11, R14
        RLA.B   R14
        AND.B   #0x6, R14
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   0x1(R15), R15
        AND.B   #0xf9, R15
        BIS.B   R14, R15
        MOV.B   R10, R14
        RLAM.A  #0x2, R14
        MOVX.A  USCIX(R14), R14
        MOV.B   R15, 0x1(R14)
//   49   USCIX[spin]->CKMODE = spiclkmode;                    //Ê±ÖÓÏßÄ£Ê½ÉèÖÃ
        MOV.B   R9, R14
        RPT     #0x6
        RLAX.B  R14
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   0x1(R15), R15
        AND.B   #0x3f, R15
        BIS.B   R14, R15
        MOV.B   R10, R14
        RLAM.A  #0x2, R14
        MOVX.A  USCIX(R14), R14
        MOV.B   R15, 0x1(R14)
//   50   USCIX[spin]->MSB = firstbit;                         //·¢ËÍÊ×Î»ÉèÖÃ
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIT.B   #0x1, R8
        JC      ??SPI_Master_Init_5
        BIC.B   #0x20, 0x1(R15)
        JMP     ??SPI_Master_Init_6
??SPI_Master_Init_5:
        BIS.B   #0x20, 0x1(R15)
//   51   
//   52   USCIX[spin]->SSEL= USCI_SSEL__SMCLK;                 //Ê±ÖÓÔ´ÉèÖÃ
??SPI_Master_Init_6:
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x3f, R14
        AND.B   @R15, R14
        BIS.B   #0x80, R14
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   R14, 0(R15)
//   53   
//   54   USCIX[spin]->BRW = BR.Word;                          //BRWÐ´1ÓëÐ´0·¢ÏÖ²¨ÌØÂÊÃ»ÓÐÇø±ð
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.W   @SP, 0x6(R15)
//   55   USCIX[spin]->CTL1 &=~ UCSWRST; 
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   #0x1, 0(R15)
//   56   
//   57   USCIX[spin]->IE = 0u;                                         //¹Ø±ÕËùÓÐÖÐ¶Ï
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x0, 0x1c(R15)
//   58   USCIX[spin]->RXIFG = RESET;                                   //Çå³ý½ÓÊÕÊý¾Ý±êÖ¾
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   #0x1, 0x1d(R15)
//   59   USCIX[spin]->TXIFG = BIT_SET;                                     //ÖÃÎ»·¢ËÍ»º³åÇøÎª¿Õ±êÖ¾
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   #0x2, 0x1d(R15)
//   60 }
        ADD.W   #0x2, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0
//   61 /*******************************************************************************
//   62 º¯ÊýÃû³Æ£ºSPI_SetBaudRate (SPIn spin, uint32_t BaudRate)     
//   63 ¹¦ÄÜËµÃ÷£ºÉèÖÃSPI²¨ÌØÂÊ
//   64 ²ÎÊýËµÃ÷£ºSPIn spin                  :SPIÄ£¿éºÅ
//   65           uint32_t BaudRate            :´«Êä²¨ÌØÂÊ
//   66 º¯Êý·µ»Ø£ºÎÞ
//   67 *******************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   68 void  SPI_SetBaudRate (SPIn spin, uint32_t BaudRate)                  
SPI_SetBaudRate:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function SPI_SetBaudRate
//   69 {
        PUSHM.A #0x3, R10
          CFI R8L Frame(CFA, -16)
          CFI R8H Frame(CFA, -14)
          CFI R9L Frame(CFA, -12)
          CFI R9H Frame(CFA, -10)
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+16
        MOV.B   R12, R10
        MOV.W   R14, R8
        MOV.W   R15, R9
//   70   USCIX[spin]->CTL1 = UCSSEL__SMCLK + UCSWRST;                //ÉèÖÃÊ±ÖÓÔ´
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   #0x81, 0(R15)
//   71  
//   72   USCIX[spin]->BRW =(uint16_t)g_sClock.SMCLK.nHZ/BaudRate;                                 //ÉèÖÃ²¨ÌØÂÊ
        MOVX.W  &g_sClock + 12, R12
        MOV.W   #0x0, R13
        MOV.W   R8, R14
        MOV.W   R9, R15
        CALLA   #?DivMod32u
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.W   R12, 0x6(R15)
//   73 
//   74   USCIX[spin]->CTL1 &= ~UCSWRST;      
        MOV.B   R10, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   #0x1, 0(R15)
//   75 }
        POPM.A  #0x3, R10
          CFI R10H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
//   76 /*******************************************************************************
//   77 *  º¯ÊýÃû³Æ£ºSPI_SendReadByte(SPIn spin,uint8_t data)
//   78 *  ¹¦ÄÜËµÃ÷£ºSPI·¢ËÍ²¢½ÓÊÕÒ»×Ö½ÚÊý¾Ý£¬·¢ËÍµÄÍ¬Ê±Ò»¶¨»á½ÓÊÕÊý¾Ý
//   79 *  ²ÎÊýËµÃ÷£ºSPIn spin :SPIÄ£¿éºÅ
//   80              uint8_t data:Òª·¢ËÍµÄÊý¾Ý
//   81 *  º¯Êý·µ»Ø£º¶ÁÈ¡µ½µÄÊý¾Ý
//   82 *  Ê¹ÓÃÊ¾Àý£ºSPI_SendReadByte(SPIn spin,uint8_t data)
//   83 *  ×¢Òâ£º²»Ìá¹©Æ¬Ñ¡ÐÅºÅ£¬ÐèÒª×Ô¼ºÊ¹ÓÃIO¿ÚÄ£ÄâCSÆ¬Ñ¡ÐÅºÅ
//   84 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   85 uint8_t SPI_SendReadByte(SPIn spin,uint8_t data)
SPI_SendReadByte:
??SPI_SendReadByte_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function SPI_SendReadByte
//   86 {
//   87   while(USCIX[spin]->UC_BUSY == BIT_SET);                   //ÅÐ¶ÏSPInÓ²¼þÊÇ·ñÃ¦
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIT.B   #0x1, 0xa(R15)
        JC      ??SPI_SendReadByte_0
//   88   USCIX[spin]->TXBUF = data;                            // Ð´ÈëÒª·¢ËÍµÄÊý¾Ý
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        MOV.B   R13, 0xe(R15)
//   89   while(USCIX[spin]->UC_BUSY == BIT_SET);                   //ÅÐ¶ÏSPInÓ²¼þÊÇ·ñÃ¦
??SPI_SendReadByte_1:
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIT.B   #0x1, 0xa(R15)
        JC      ??SPI_SendReadByte_1
//   90   return USCIX[spin]->RXBUF;                            //·µ»Ø½ÓÊÕµ½µÄÊý¾Ý,¶ÁÈ¡RXBUFºóRXIFGÎ»×Ô¶¯Çå³ý
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  USCIX(R12), R15
        MOV.B   0xc(R15), R12
        RETA
          CFI EndBlock cfiBlock2
//   91 }
//   92 /*******************************************************************************
//   93 *  º¯ÊýÃû³Æ£ºSPI_SendReadString(SPIn spin,char * SendData,char * ReceiveData,uint16_t Length)
//   94 *  ¹¦ÄÜËµÃ÷£ºSPIn·¢ËÍ²¢½ÓÊÕ¶à×Ö½ÚÊý¾Ý
//   95 *  ²ÎÊýËµÃ÷£ºSPIn spin          :SPIÄ£¿éºÅ
//   96              char * SendData    :·¢ËÍÊý¾ÝµØÖ·
//   97              char * ReceiveData :½ÓÊÕÊý¾Ý»º´æµØÖ·
//   98              uint16_t Length      :Òª·¢ËÍÊý¾Ý×Ö½ÚÊý
//   99 *  º¯Êý·µ»Ø£ºÎÞ
//  100 *  Ê¹ÓÃÊ¾Àý£ºchar SendData[20] = "Hello!";
//  101              char ReceiveData[20];
//  102              SPI_SendReadString(SPI0,SendData,ReceiveData,strlen("Hello!")); //SPI0·¢ËÍ×Ö·û´®
//  103 *  ×¢Òâ£º²»Ìá¹©Æ¬Ñ¡ÐÅºÅ£¬ÐèÒª×Ô¼ºÊ¹ÓÃIO¿ÚÄ£ÄâCSÆ¬Ñ¡ÐÅºÅ
//  104 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  105 void SPI_SendReadString(SPIn spin,char * SendData,char * ReceiveData,uint16_t Length)
SPI_SendReadString:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function SPI_SendReadString
//  106 {
        FUNCALL SPI_SendReadString, SPI_SendReadByte
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOV.B   R12, R11
        MOVA    R13, R8
        MOVA    R14, R9
        MOV.W   R15, R10
//  107   while(Length--)
??SPI_SendReadString_0:
        MOV.W   R10, R15
        MOV.W   R15, R10
        ADD.W   #0xffff, R10
        CMP.W   #0x0, R15
        JEQ     ??SPI_SendReadString_1
//  108   {
//  109     *ReceiveData++=SPI_SendReadByte(spin, *SendData++);
        MOV.B   @R8, R13
        MOV.B   R11, R12
        CALLA   #SPI_SendReadByte
        ADDA    #0x1, R8
        MOV.B   R12, 0(R9)
        ADDA    #0x1, R9
        JMP     ??SPI_SendReadString_0
//  110   }
//  111 }
??SPI_SendReadString_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
//  112 /*******************************************************************************
//  113 *  º¯ÊýÃû³Æ£ºSPI_ITConfig    (SPIn spin,SPI_IRQn irqn,STATUS ITState)
//  114 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃSPIÄ³Ò»ÖÐ¶ÏÊÇ·ñÊ¹ÄÜ
//  115 *  ²ÎÊýËµÃ÷£ºSPIn spin          :SPIÄ£¿éºÅ
//  116              SPI_IRQn irqn      :ÖÐ¶ÏÊÂ¼þÑ¡Ôñ
//  117              STATUS ITState     :ÖÐ¶ÏÊÇ·ñÊ¹ÄÜ
//  118 *  º¯Êý·µ»Ø£ºÎÞ
//  119 *  Ê¹ÓÃÊ¾Àý£ºSPI_ITConfig    (SPI1,SPI_RX_IRQn,ENABLE);  //Ê¹ÄÜSPI1µÄ½ÓÊÕÖÐ¶Ï
//  120 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  121 void  SPI_ITConfig    (SPIn spin,SPI_IRQn irqn,STATUS ITState)
SPI_ITConfig:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function SPI_ITConfig
//  122 {
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
//  123   if(ITState != DISABLE)
        CMP.B   #0x0, R14
        JEQ     ??SPI_ITConfig_0
//  124   {
//  125     USCIX[spin]->IE |= irqn;
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIS.B   R13, 0x1c(R15)
        JMP     ??SPI_ITConfig_1
//  126   }
//  127   else
//  128   {
//  129     USCIX[spin]->IE &=~irqn;
??SPI_ITConfig_0:
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   R13, 0x1c(R15)
//  130   }
//  131 }
??SPI_ITConfig_1:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4
//  132 /*******************************************************************************
//  133 *  º¯ÊýÃû³Æ£ºSPI_GetITStatus(SPIn spin,SPI_IRQn irqn)
//  134 *  ¹¦ÄÜËµÃ÷£º»ñÈ¡SPIÖÐ¶Ï±êÖ¾Î»×´Ì¬
//  135 *  ²ÎÊýËµÃ÷£ºSPIn spin          :SPIÄ£¿éºÅ
//  136              SPI_IRQn irqn      :ÖÐ¶ÏÊÂ¼þÑ¡Ôñ
//  137 *  º¯Êý·µ»Ø£ºSTATUS :TRUE-ÖÐ¶ÏÊÂ¼þ·¢Éú FALSE-ÖÐ¶ÏÊÂ¼þÎ´·¢Éú
//  138 *  Ê¹ÓÃÊ¾Àý£ºif(TRUE == SPI_GetITStatus(SPI1,SPI_RX_IRQn)){...}  //ÅÐ¶ÏSPI1½ÓÊÕÖÐ¶ÏÊÂ¼þÊÇ·ñ·¢Éú
//  139 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  140 STATUS  SPI_GetITStatus(SPIn spin,SPI_IRQn irqn)
SPI_GetITStatus:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function SPI_GetITStatus
//  141 {
//  142   return ((USCIX[spin]->IFG & irqn) ? TRUE : FALSE);
        MOV.B   R12, R12
        RLAM.A  #0x2, R12
        MOVX.A  USCIX(R12), R15
        BIT.B   R13, 0x1d(R15)
        JEQ     ??SPI_GetITStatus_0
        MOV.B   #0x1, R12
        RETA
??SPI_GetITStatus_0:
        MOV.B   #0x0, R12
        RETA
          CFI EndBlock cfiBlock5
//  143 }
//  144 /*******************************************************************************
//  145 *  º¯ÊýÃû³Æ£ºSPI_ClearITPendingBit(SPIn spin,SPI_IRQn irqn)
//  146 *  ¹¦ÄÜËµÃ÷£ºSPInÇå³ýÖÐ¶Ï±êÖ¾Î»×´Ì¬
//  147 *  ²ÎÊýËµÃ÷£ºSPIn spin          :SPIÄ£¿éºÅ
//  148              SPI_IRQn irqn      :ÖÐ¶ÏÊÂ¼þÑ¡Ôñ
//  149 *  º¯Êý·µ»Ø£ºÎÞ
//  150 *  Ê¹ÓÃÊ¾Àý£ºSPI_ClearITPendingBit(SPI1,SPI_RX_IRQn);  //Çå³ýSPI1½ÓÊÕÖÐ¶Ï±êÖ¾
//  151 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  152 void   SPI_ClearITPendingBit(SPIn spin,SPI_IRQn irqn)
SPI_ClearITPendingBit:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SPI_ClearITPendingBit
//  153 {
//  154    USCIX[spin]->IFG &=~ irqn;
        MOV.B   R12, R15
        RLAM.A  #0x2, R15
        MOVX.A  USCIX(R15), R15
        BIC.B   R13, 0x1d(R15)
//  155 }
        RETA
          CFI EndBlock cfiBlock6

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 730 bytes in segment CODE
//  48 bytes in segment DATA20_C
// 
// 730 bytes of CODE  memory
//  48 bytes of CONST memory
//
//Errors: none
//Warnings: none
