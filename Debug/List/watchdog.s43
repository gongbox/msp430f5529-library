///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      26/Nov/2016  11:15:11 /
// IAR C/C++ Compiler V5.50.1.20465/W32, Evaluation edition for MSP430        /
// Copyright 1996-2012 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  32                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\watchdog.c                                           /
//    Command line  =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\watchdog.c -D DEBUG -D RAM_VECTOR -lA                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \ -o E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug /
//                     \Obj\ --no_cse --no_unroll --no_inline                 /
//                     --no_code_motion --no_tbaa --debug -D__MSP430F5529__   /
//                     -e --double=32 --dlib_config "D:\Program Files\IAR     /
//                     Systems\Embedded Workbench 6.4                         /
//                     Evaluation\430\LIB\DLIB\dl430xlff.h" -I                /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\in /
//                     c\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Driv /
//                     ers\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\Drivers\src\USB\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Drivers\src\USB\USB_config\ -I             /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\ /
//                     ¹¤³ÌÄ£°å\Drivers\srcUSB\USB_API\USB_CDC_API\ -I        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_HID_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\sr /
//                     c\USB\USB_API\USB_MSC_API\ -I                          /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\  /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWar /
//                     e\delay\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\HardWare\18b20\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\KEY\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     ED\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Har /
//                     dWare\12864\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\HardWare\oled\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6 /
//                     \C°æ\¹¤³ÌÄ£°å\HardWare\mpu6050\inc\ -I                 /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\m /
//                     pu6050\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³Ì /
//                     Ä£°å\HardWare\nokia5110\inc\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\n /
//                     okia5110\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤ /
//                     ³ÌÄ£°å\HardWare\LQ_1.8_TFT\ -I                         /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\HardWare\L /
//                     CD_API\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å /
//                     \HardWare\2.2TFT\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C° /
//                     æ\¹¤³ÌÄ£°å\HardWare\nrf24l01\ -I                       /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\    /
//                     -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\System\ /
//                     inc\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Sy /
//                     stem\src\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£ /
//                     °å\User\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£° /
//                     å\User\USER\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ /
//                     ÌÄ£°å\Lib\UCOSII\CONFIG\ -I                            /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\uCOSII /
//                     \App\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\L /
//                     ib\uCOSII\CONFIHG\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C /
//                     °æ\¹¤³ÌÄ£°å\Lib\uCOSII\PORT\ -I                        /
//                     E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Lib\UCOSII /
//                     \CORE\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\ /
//                     Lib\FatFs\ -I E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ /
//                     £°å\Lib\FatFs\option\ --core=430X --data_model=large   /
//                     -On --multiplier=32 --multiplier_location=4C0          /
//                     --hw_workaround=CPU40                                  /
//    List file     =  E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Debug\List /
//                     \watchdog.s43                                          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME watchdog

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__double_size", "32"
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?DivMod32u
        EXTERN ?Mul32
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        PUBLIC DisableWatchDog
        FUNCTION DisableWatchDog,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC SoftWare_RESET
        FUNCTION SoftWare_RESET,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC WDTX
        PUBLIC WatchDog_Delay_Ms
        FUNCTION WatchDog_Delay_Ms,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC WatchDog_Feed
        FUNCTION WatchDog_Feed,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC WatchDog_ITConfig
        FUNCTION WatchDog_ITConfig,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC WatchDog_Init
        FUNCTION WatchDog_Init,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC WatchDog_Time_Cal
        FUNCTION WatchDog_Time_Cal,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 66, STACK
        PUBLIC WatchDog_Timer_Init
        FUNCTION WatchDog_Timer_Init,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBWEAK _A_WDTCTL_L
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN g_sClock
        EXTERN _Cast32uto32f
        FUNCTION _Cast32uto32f,0202H
        EXTERN _Cast32sto32f
        FUNCTION _Cast32sto32f,0202H
        EXTERN _Div32f
        FUNCTION _Div32f,0202H
        EXTERN _CmpGe32f
        FUNCTION _CmpGe32f,0202H
        EXTERN SFRX

// E:\MSP430\MSP430F5529¿âº¯Êý2.6\C°æ\¹¤³ÌÄ£°å\Drivers\src\watchdog.c
//    1 #include "watchdog.h"

        ASEGN DATA16_AN:DATA:NOROOT,015cH
// union <unnamed> __data16 _A_WDTCTL_L
_A_WDTCTL_L:
        DS8 2
//    2 #include "clock.h"
//    3 #include "msp430f5529.h"
//    4 #include "msp430f5529MemMap.h"
//    5 

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    6 static const uint32_t WDT_Counter[]={2000000000u,128000000u,8192000u,512000u,32768u,8192u,512u,64u};
WDT_Counter:
        DC32 2000000000, 128000000, 8192000, 512000, 32768, 8192, 512, 64

        RSEG DATA20_C:CONST:SORT:NOROOT(1)
//    7 const WDT_MemMapPtr WDTX = WDT_BASE_PTR;
WDTX:
        DC32 150H
//    8 extern const SFR_MemMapPtr SFRX;
//    9 uint16_t WatchDog_Time_Cal(uint32_t ms);
//   10 /*******************************************************************************
//   11 *  º¯ÊýÃû³Æ£ºDisableWatchDog(void)
//   12 *  ¹¦ÄÜËµÃ÷£º¹Ø±Õ¿´ÃÅ¹·
//   13 *  ²ÎÊýËµÃ÷£ºÎÞ
//   14 *  º¯Êý·µ»Ø£ºÎÞ
//   15 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   16 void DisableWatchDog(void)
DisableWatchDog:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function DisableWatchDog
//   17 {
//   18   WDTCTL = (WDTCTL&0xFF)|(WDTPW+WDTHOLD);
        MOV.W   &0x15c, R15
        AND.W   #0xff, R15
        BIS.W   #0x5a80, R15
        MOV.W   R15, &0x15c
//   19 } 
        RETA
          CFI EndBlock cfiBlock0
        REQUIRE _A_WDTCTL_L
//   20 /*******************************************************************************
//   21 *  º¯ÊýÃû³Æ£ºWatchDog_Init(uint32_t ms) 
//   22 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃ¿´ÃÅ¹·Ê±¼ä£¬×¢Òâ¶¨Ê±Ê±¼äÖ»ÊÇ±È½Ï½Ó½üÉèÖÃÊ±¼äµÄÒ»¸öÊ±¼ä£¬²¢²»¾«×¼,·µ»Ø¼°Ê±¼äÆ«
//   23 *  ²ÎÊýËµÃ÷£ºuint32_t ms          £º¹¦ÄÜÊ±¼ä
//   24 *  º¯Êý·µ»Ø£º//Îó²îÊ±¼ä£¨µ¥Î»£ºms£©
//   25 *  Ê¹ÓÃÊ¾Àý£º WatchDog_Init(500);   //ÉèÖÃ¿´ÃÅ¹·Ê±¼äÎª500ms
//   26 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   27 void  WatchDog_Init(uint32_t ms)                                        //¿´ÃÅ¹·¹¦ÄÜÅäÖÃ
WatchDog_Init:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function WatchDog_Init
//   28 {
        FUNCALL WatchDog_Init, WatchDog_Time_Cal
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//   29   uint16_t WDT_Reg_Val = WatchDog_Time_Cal(ms);
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #WatchDog_Time_Cal
//   30   SFRX->IE.WDT = DISABLE;                      //¹Ø±Õ¿´ÃÅ¹·ÖÐ¶Ï
        MOVA    &SFRX, R15
        BIC.W   #0x1, 0(R15)
//   31   WDTCTL = WDTPW | WDTCNTCL | WDT_Reg_Val ; //ÅäÖÃ
        MOV.W   R12, R15
        BIS.W   #0x5a08, R15
        MOV.W   R15, &0x15c
//   32 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1
        REQUIRE _A_WDTCTL_L
//   33 /*******************************************************************************
//   34 *  º¯ÊýÃû³Æ£ºWatchDog_Timer_Init(uint32_t ms) 
//   35 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃ¿´ÃÅ¹·×÷Îª¶¨Ê±Æ÷²¢ÉèÖÃÊ±¼ä£¬×¢Òâ¶¨Ê±Ê±¼äÖ»ÊÇ±È½Ï½Ó½üÉèÖÃÊ±¼äµÄÒ»¸öÊ±¼ä£¬²¢²»¾«×¼,·µ»Ø¼°Ê±¼äÆ«
//   36 *  ²ÎÊýËµÃ÷£ºuint32_t ms          £º¹¦ÄÜÊ±¼ä
//   37 *  º¯Êý·µ»Ø£º//Îó²îÊ±¼ä£¨µ¥Î»£ºms£©
//   38 *  Ê¹ÓÃÊ¾Àý£º WatchDog_Timer_Init(500);   //ÉèÖÃ¿´ÃÅ¹·¶¨Ê±Ê±¼äÎª500ms
//   39 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   40 void  WatchDog_Timer_Init(uint32_t ms)                                  //¿´ÃÅ¹·¶¨Ê±Æ÷¹¦ÄÜ³õÊ¼»¯
WatchDog_Timer_Init:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function WatchDog_Timer_Init
//   41 {
        FUNCALL WatchDog_Timer_Init, WatchDog_Time_Cal
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//   42   uint16_t WDT_Reg_Val = WatchDog_Time_Cal(ms);
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #WatchDog_Time_Cal
//   43   SFRX->IE.WDT = DISABLE;                      //¹Ø±Õ¿´ÃÅ¹·ÖÐ¶Ï
        MOVA    &SFRX, R15
        BIC.W   #0x1, 0(R15)
//   44   WDTCTL = WDTPW | WDTCNTCL | WDT_Reg_Val | WDTTMSEL; //ÅäÖÃ
        MOV.W   R12, R15
        BIS.W   #0x5a18, R15
        MOV.W   R15, &0x15c
//   45 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2
        REQUIRE _A_WDTCTL_L
//   46 /*******************************************************************************
//   47 *  º¯ÊýÃû³Æ£ºWatchDog_Delay_Ms(uint32_t ms) 
//   48 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃ¿´ÃÅ¹·ÑÓÊ±Ò»¶ÎÊ±¼ä£¬×¢Òâ¶¨Ê±Ê±¼äÖ»ÊÇ±È½Ï½Ó½üÉèÖÃÊ±¼äµÄÒ»¸öÊ±¼ä£¬²¢²»¾«×¼,·µ»Ø¼°Ê±¼äÆ«
//   49 *  ²ÎÊýËµÃ÷£ºuint32_t ms          £º¹¦ÄÜÊ±¼ä
//   50 *  º¯Êý·µ»Ø£º//Îó²îÊ±¼ä£¨µ¥Î»£ºms£©
//   51 *  Ê¹ÓÃÊ¾Àý£ºWatchDog_Delay_Ms(500);   //ÉèÖÃÔÚ´Ë´¦Ê¹ÓÃ¿´ÃÅ¹·ÑÓÊ±500ms
//   52 ********************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   53 void  WatchDog_Delay_Ms  (uint32_t ms)                                  //¿´ÃÅ¹·ÑÓÊ±Ê¹ÓÃ
WatchDog_Delay_Ms:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function WatchDog_Delay_Ms
//   54 {
        FUNCALL WatchDog_Delay_Ms, WatchDog_Time_Cal
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOV.W   R12, R10
        MOV.W   R13, R11
//   55   SFRX->IFG.WDT = RESET;
        MOVA    &SFRX, R15
        BIC.W   #0x1, 0x2(R15)
//   56   uint16_t WDT_Reg_Val = WatchDog_Time_Cal(ms);
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #WatchDog_Time_Cal
//   57   SFRX->IE.WDT = DISABLE;                      //¹Ø±Õ¿´ÃÅ¹·ÖÐ¶Ï
        MOVA    &SFRX, R15
        BIC.W   #0x1, 0(R15)
//   58   WDTCTL = WDTPW | WDTCNTCL | WDT_Reg_Val | WDTTMSEL; //ÅäÖÃ
        MOV.W   R12, R15
        BIS.W   #0x5a18, R15
        MOV.W   R15, &0x15c
//   59   while(SFRX->IFG.WDT == RESET);
??WatchDog_Delay_Ms_0:
        MOVA    &SFRX, R15
        BIT.W   #0x1, 0x2(R15)
        JNC     ??WatchDog_Delay_Ms_0
//   60 }
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock3
        REQUIRE _A_WDTCTL_L
//   61 /*************************************************************************
//   62 *  º¯ÊýÃû³Æ£ºWatchDog_Feed(void)
//   63 *  ¹¦ÄÜËµÃ÷£ºÎ¹¹·
//   64 *  ²ÎÊýËµÃ÷£ºÎÞ
//   65 *  º¯Êý·µ»Ø£ºÎÞ
//   66 *  Ê¹ÓÃÊ¾Àý£ºWatchDog_Feed();  //Î¹¹·£¬Çå³ý¿´ÃÅ¹·¼ÆÊýÖµ
//   67 *************************************************************************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   68 void  WatchDog_Feed(void)
WatchDog_Feed:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function WatchDog_Feed
//   69 {
//   70   WDTCTL =(WDTCTL&0X00FF) | (WDTCNTCL + WDTPW);                //¼ÆÊýÖµÇåÁã
        MOV.W   &0x15c, R15
        AND.W   #0xff, R15
        BIS.W   #0x5a08, R15
        MOV.W   R15, &0x15c
//   71 }
        RETA
          CFI EndBlock cfiBlock4
        REQUIRE _A_WDTCTL_L
//   72 /*************************************************************************
//   73 *  º¯ÊýÃû³Æ£ºWatchDog_ITConfig(STATUS ITState)
//   74 *  ¹¦ÄÜËµÃ÷£ºÉèÖÃ¿´ÃÅ¹·ÖÐ¶ÏÊÇ·ñÊ¹ÄÜ
//   75 *  ²ÎÊýËµÃ÷£ºSTATUS ITState £ºÊÇ·ñÊ¹ÄÜÖÐ¶Ï
//   76 *  º¯Êý·µ»Ø£ºÎÞ
//   77 *  Ê¹ÓÃÊ¾Àý£ºWatchDog_ITConfig(ENABLE);  //Ê¹ÄÜ¿´ÃÅ¹·ÖÐ¶Ï
//   78 *************************************************************************/

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   79 void  WatchDog_ITConfig(STATUS ITState)
WatchDog_ITConfig:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function WatchDog_ITConfig
//   80 {
//   81   if(ITState != DISABLE)
        CMP.B   #0x0, R12
        JEQ     ??WatchDog_ITConfig_0
//   82   {
//   83     SFRX->IFG.WDT = RESET;
        MOVA    &SFRX, R15
        BIC.W   #0x1, 0x2(R15)
//   84     SFRX->IE.WDT = ENABLE;  //¿ªÆô¿´ÃÅ¹·ÖÐ¶Ï
        MOVA    &SFRX, R15
        BIS.W   #0x1, 0(R15)
        RETA
//   85   }
//   86   else
//   87   {
//   88     SFRX->IE.WDT = DISABLE;
??WatchDog_ITConfig_0:
        MOVA    &SFRX, R15
        BIC.W   #0x1, 0(R15)
//   89   }
//   90 }
        RETA
          CFI EndBlock cfiBlock5
//   91 /*************************************************************************
//   92 *  º¯ÊýÃû³Æ£ºSoftWare_RESET(void)
//   93 *  ¹¦ÄÜËµÃ÷£ºÈí¼þ´¥·¢Ò»´Î¸´Î»
//   94 *  ²ÎÊýËµÃ÷£ºÎÞ
//   95 *  º¯Êý·µ»Ø£ºÎÞ
//   96 *  Ê¹ÓÃÊ¾Àý£ºSoftWare_RESET();  //Èí¼þ¸´Î»Ò»´Îµ¥Æ¬»ú
//   97 *****************************************************{********************/  

        RSEG CODE:CODE:REORDER:NOROOT(1)
//   98 void  SoftWare_RESET(void)
SoftWare_RESET:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function SoftWare_RESET
//   99 {
//  100   WDTCTL = 0x0000;
        MOV.W   #0x0, &0x15c
//  101 }
        RETA
          CFI EndBlock cfiBlock6
        REQUIRE _A_WDTCTL_L
//  102 //¿´ÃÅ¹·¼ÆËãÊ±¼äº¯Êý

        RSEG CODE:CODE:REORDER:NOROOT(1)
//  103 uint16_t WatchDog_Time_Cal(uint32_t ms)
WatchDog_Time_Cal:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function WatchDog_Time_Cal
//  104 {
        FUNCALL WatchDog_Time_Cal, _Cast32uto32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Cast32sto32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Div32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Cast32uto32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Cast32sto32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Div32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Cast32sto32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _Div32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _CmpGe32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _CmpGe32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _CmpGe32f
        LOCFRAME CSTACK, 66, STACK
        FUNCALL WatchDog_Time_Cal, _CmpGe32f
        LOCFRAME CSTACK, 66, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R13
          CFI CFA SP+38
        PUSH.W  R12
          CFI CFA SP+40
        SUB.W   #0x1a, SP
          CFI CFA SP+66
//  105   float smclk_OffectTime,aclk_OffectTime,vlo_OffectTime; //Îó²îÊ±¼ä
//  106   int32_t smclk_OffectTimeTemp = 0,aclk_OffectTimeTemp = 0 ,vlo_OffectTimeTemp = 0;
        MOV.W   #0x0, 0x6(SP)
        MOV.W   #0x0, 0x8(SP)
        MOV.W   #0x0, R6
        MOV.W   #0x0, R7
        MOV.W   #0x0, R8
        MOV.W   #0x0, R9
//  107   uint16_t smclk_DividerValue = 7 ,aclk_DividerValue = 7, vlo_DividerValue = 7;
        MOV.W   #0x7, 0x4(SP)
        MOV.W   #0x7, 0x2(SP)
        MOV.W   #0x7, 0(SP)
//  108   uint32_t SelectClock;
//  109   uint32_t WDT_CounterValue;
//  110   /**********************¼ÆËãÊ±ÖÓÔ´¼°¼ÆÊ±Ê±¼ä**********************************/
//  111   //SMCLK
//  112   SelectClock = g_sClock.SMCLK.nHZ/1000;
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R12, 0xa(SP)
        MOV.W   R13, 0xc(SP)
//  113   WDT_CounterValue = ms*SelectClock;
        MOV.W   0x1a(SP), R12
        MOV.W   0x1c(SP), R13
        MOV.W   0xa(SP), R14
        MOV.W   0xc(SP), R15
        CALLA   #?Mul32
        MOV.W   R12, R10
        MOV.W   R13, R11
//  114   while((WDT_CounterValue > WDT_Counter[smclk_DividerValue]) && (smclk_DividerValue > 0))
??WatchDog_Time_Cal_0:
        MOV.W   0x4(SP), R15
        RLAM.A  #0x2, R15
        CMPX.W  R11, WDT_Counter + 2(R15)
        JNC     ??WatchDog_Time_Cal_9
        JNE     ??WatchDog_Time_Cal_10
        CMPX.W  R10, WDT_Counter(R15)
        JC      ??WatchDog_Time_Cal_10
??WatchDog_Time_Cal_9:
        CMP.W   #0x0, 0x4(SP)
        JEQ     ??WatchDog_Time_Cal_10
//  115   {
//  116     smclk_DividerValue --;
        MOV.W   0x4(SP), R15
        ADD.W   #0xffff, R15
        MOV.W   R15, 0x4(SP)
        JMP     ??WatchDog_Time_Cal_0
//  117   }
//  118   if(smclk_DividerValue == 7 || smclk_DividerValue == 0)
??WatchDog_Time_Cal_10:
        CMP.W   #0x7, 0x4(SP)
        JEQ     ??WatchDog_Time_Cal_11
        CMP.W   #0x0, 0x4(SP)
        JNE     ??WatchDog_Time_Cal_12
//  119   {
//  120     smclk_OffectTimeTemp = (WDT_Counter[smclk_DividerValue]-WDT_CounterValue);
??WatchDog_Time_Cal_11:
        MOV.W   0x4(SP), R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        MOV.W   R14, 0x6(SP)
        MOV.W   R15, 0x8(SP)
        JMP     ??WatchDog_Time_Cal_13
//  121   }
//  122   else //ÔÚÁ½¸öÊ±¼äÄÚÑ¡³öÎó²îÊ±¼ä×î¶ÌµÄ
//  123   {
//  124     if((WDT_Counter[smclk_DividerValue ]-WDT_CounterValue) > (WDT_CounterValue-WDT_Counter[smclk_DividerValue +1]))
??WatchDog_Time_Cal_12:
        MOV.W   0x4(SP), R15
        ADD.W   #0x1, R15
        RLAM.A  #0x2, R15
        MOV.W   R10, R4
        MOV.W   R11, R5
        SUBX.W  WDT_Counter(R15), R4
        SUBCX.W WDT_Counter + 2(R15), R5
        MOV.W   0x4(SP), R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        CMP.W   R15, R5
        JNC     ??WatchDog_Time_Cal_14
        JNE     ??WatchDog_Time_Cal_15
        CMP.W   R14, R4
        JC      ??WatchDog_Time_Cal_15
//  125     {
//  126       smclk_OffectTimeTemp = (WDT_CounterValue-WDT_Counter[++smclk_DividerValue ]);
??WatchDog_Time_Cal_14:
        MOV.W   0x4(SP), R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0x4(SP)
        RLAM.A  #0x2, R15
        MOV.W   R10, R4
        MOV.W   R11, R5
        SUBX.W  WDT_Counter(R15), R4
        SUBCX.W WDT_Counter + 2(R15), R5
        MOV.W   R4, 0x6(SP)
        MOV.W   R5, 0x8(SP)
        JMP     ??WatchDog_Time_Cal_13
//  127     }
//  128     else
//  129     {
//  130       smclk_OffectTimeTemp = (WDT_Counter[smclk_DividerValue ]-WDT_CounterValue);
??WatchDog_Time_Cal_15:
        MOV.W   0x4(SP), R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        MOV.W   R14, 0x6(SP)
        MOV.W   R15, 0x8(SP)
//  131     }
//  132   }
//  133   smclk_OffectTimeTemp = smclk_OffectTimeTemp>0 ? smclk_OffectTimeTemp : -smclk_OffectTimeTemp;
??WatchDog_Time_Cal_13:
        CMP.W   #0x0, 0x8(SP)
        JL      ??WatchDog_Time_Cal_16
        JNE     ??WatchDog_Time_Cal_17
        CMP.W   #0x1, 0x6(SP)
        JNC     ??WatchDog_Time_Cal_16
??WatchDog_Time_Cal_17:
        MOV.W   0x6(SP), 0x6(SP)
        MOV.W   0x8(SP), 0x8(SP)
        JMP     ??WatchDog_Time_Cal_18
??WatchDog_Time_Cal_16:
        MOV.W   0x6(SP), R14
        MOV.W   0x8(SP), R15
        XOR.W   #0xffff, R14
        XOR.W   #0xffff, R15
        ADD.W   #0x1, R14
        ADDC.W  #0x0, R15
        MOV.W   R14, 0x6(SP)
        MOV.W   R15, 0x8(SP)
//  134   smclk_OffectTime = (float)smclk_OffectTimeTemp/(float)g_sClock.SMCLK.nHZ;
??WatchDog_Time_Cal_18:
        MOVX.W  &g_sClock + 12, R12
        MOVX.W  &g_sClock + 14, R13
        CALLA   #_Cast32uto32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   0x6(SP), R12
        MOV.W   0x8(SP), R13
        CALLA   #_Cast32sto32f
        MOV.W   R4, R14
        MOV.W   R5, R15
        CALLA   #_Div32f
        MOV.W   R12, 0x12(SP)
        MOV.W   R13, 0x14(SP)
//  135   /*ACLK*/
//  136   SelectClock = g_sClock.ACLK.nHZ;
        MOVX.W  &g_sClock + 24, 0xa(SP)
        MOVX.W  &g_sClock + 26, 0xc(SP)
//  137   WDT_CounterValue = ms*SelectClock/1000;
        MOV.W   0x1a(SP), R12
        MOV.W   0x1c(SP), R13
        MOV.W   0xa(SP), R14
        MOV.W   0xc(SP), R15
        CALLA   #?Mul32
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R12, R10
        MOV.W   R13, R11
//  138   while((WDT_CounterValue > WDT_Counter[aclk_DividerValue]) && (aclk_DividerValue > 0))
??WatchDog_Time_Cal_1:
        MOV.W   0x2(SP), R15
        RLAM.A  #0x2, R15
        CMPX.W  R11, WDT_Counter + 2(R15)
        JNC     ??WatchDog_Time_Cal_19
        JNE     ??WatchDog_Time_Cal_20
        CMPX.W  R10, WDT_Counter(R15)
        JC      ??WatchDog_Time_Cal_20
??WatchDog_Time_Cal_19:
        CMP.W   #0x0, 0x2(SP)
        JEQ     ??WatchDog_Time_Cal_20
//  139   {
//  140     aclk_DividerValue--;
        MOV.W   0x2(SP), R15
        ADD.W   #0xffff, R15
        MOV.W   R15, 0x2(SP)
        JMP     ??WatchDog_Time_Cal_1
//  141   }
//  142   if(aclk_DividerValue == 7 || aclk_DividerValue == 0)
??WatchDog_Time_Cal_20:
        CMP.W   #0x7, 0x2(SP)
        JEQ     ??WatchDog_Time_Cal_21
        CMP.W   #0x0, 0x2(SP)
        JNE     ??WatchDog_Time_Cal_22
//  143   {
//  144     aclk_OffectTimeTemp = (WDT_Counter[aclk_DividerValue]-WDT_CounterValue);
??WatchDog_Time_Cal_21:
        MOV.W   0x2(SP), R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        MOV.W   R14, R6
        MOV.W   R15, R7
        JMP     ??WatchDog_Time_Cal_23
//  145   }
//  146   else //ÔÚÁ½¸öÊ±¼äÄÚÑ¡³öÎó²îÊ±¼ä×î¶ÌµÄ
//  147   {
//  148     if((WDT_Counter[aclk_DividerValue ]-WDT_CounterValue) > (WDT_CounterValue-WDT_Counter[aclk_DividerValue +1]))
??WatchDog_Time_Cal_22:
        MOV.W   0x2(SP), R15
        ADD.W   #0x1, R15
        RLAM.A  #0x2, R15
        MOV.W   R10, R4
        MOV.W   R11, R5
        SUBX.W  WDT_Counter(R15), R4
        SUBCX.W WDT_Counter + 2(R15), R5
        MOV.W   0x2(SP), R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        CMP.W   R15, R5
        JNC     ??WatchDog_Time_Cal_24
        JNE     ??WatchDog_Time_Cal_25
        CMP.W   R14, R4
        JC      ??WatchDog_Time_Cal_25
//  149     {
//  150       aclk_OffectTimeTemp = (WDT_CounterValue-WDT_Counter[++aclk_DividerValue]);
??WatchDog_Time_Cal_24:
        MOV.W   0x2(SP), R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0x2(SP)
        RLAM.A  #0x2, R15
        MOV.W   R10, R4
        MOV.W   R11, R5
        SUBX.W  WDT_Counter(R15), R4
        SUBCX.W WDT_Counter + 2(R15), R5
        MOV.W   R4, R6
        MOV.W   R5, R7
        JMP     ??WatchDog_Time_Cal_23
//  151     }
//  152     else
//  153     {
//  154       aclk_OffectTimeTemp = (WDT_Counter[aclk_DividerValue]-WDT_CounterValue);
??WatchDog_Time_Cal_25:
        MOV.W   0x2(SP), R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        MOV.W   R14, R6
        MOV.W   R15, R7
//  155     }  
//  156   }
//  157   aclk_OffectTimeTemp = aclk_OffectTimeTemp>0 ? aclk_OffectTimeTemp : -aclk_OffectTimeTemp;
??WatchDog_Time_Cal_23:
        CMP.W   #0x0, R7
        JL      ??WatchDog_Time_Cal_7
        JNE     ??WatchDog_Time_Cal_4
        CMP.W   #0x1, R6
        JC      ??WatchDog_Time_Cal_4
??WatchDog_Time_Cal_7:
        XOR.W   #0xffff, R6
        XOR.W   #0xffff, R7
        ADD.W   #0x1, R6
        ADDC.W  #0x0, R7
//  158   aclk_OffectTime = (float)aclk_OffectTimeTemp/(float)g_sClock.ACLK.nHZ;
??WatchDog_Time_Cal_4:
        MOVX.W  &g_sClock + 24, R12
        MOVX.W  &g_sClock + 26, R13
        CALLA   #_Cast32uto32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   R6, R12
        MOV.W   R7, R13
        CALLA   #_Cast32sto32f
        MOV.W   R4, R14
        MOV.W   R5, R15
        CALLA   #_Div32f
        MOV.W   R12, 0xe(SP)
        MOV.W   R13, 0x10(SP)
//  159   /**VLOCLK_10K*/
//  160   SelectClock = VLOCLK_FREQUENCY;
        MOV.W   #0x2710, 0xa(SP)
        MOV.W   #0x0, 0xc(SP)
//  161   WDT_CounterValue = ms*SelectClock/1000;
        MOV.W   0x1a(SP), R12
        MOV.W   0x1c(SP), R13
        MOV.W   0xa(SP), R14
        MOV.W   0xc(SP), R15
        CALLA   #?Mul32
        MOV.W   #0x3e8, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R12, R10
        MOV.W   R13, R11
//  162   while((WDT_CounterValue > WDT_Counter[vlo_DividerValue]) && (vlo_DividerValue > 0))
??WatchDog_Time_Cal_2:
        MOV.W   @SP, R15
        RLAM.A  #0x2, R15
        CMPX.W  R11, WDT_Counter + 2(R15)
        JNC     ??WatchDog_Time_Cal_26
        JNE     ??WatchDog_Time_Cal_27
        CMPX.W  R10, WDT_Counter(R15)
        JC      ??WatchDog_Time_Cal_27
??WatchDog_Time_Cal_26:
        CMP.W   #0x0, 0(SP)
        JEQ     ??WatchDog_Time_Cal_27
//  163   {
//  164     vlo_DividerValue--;
        MOV.W   @SP, R15
        ADD.W   #0xffff, R15
        MOV.W   R15, 0(SP)
        JMP     ??WatchDog_Time_Cal_2
//  165   }
//  166   if(vlo_DividerValue == 7 || vlo_DividerValue == 0)
??WatchDog_Time_Cal_27:
        CMP.W   #0x7, 0(SP)
        JEQ     ??WatchDog_Time_Cal_28
        CMP.W   #0x0, 0(SP)
        JNE     ??WatchDog_Time_Cal_29
//  167   {
//  168     vlo_OffectTimeTemp = (WDT_Counter[vlo_DividerValue]-WDT_CounterValue);
??WatchDog_Time_Cal_28:
        MOV.W   @SP, R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        MOV.W   R14, R8
        MOV.W   R15, R9
        JMP     ??WatchDog_Time_Cal_30
//  169   }
//  170   else //ÔÚÁ½¸öÊ±¼äÄÚÑ¡³öÎó²îÊ±¼ä×î¶ÌµÄ
//  171   {
//  172     if((WDT_Counter[vlo_DividerValue]-WDT_CounterValue) > (WDT_CounterValue-WDT_Counter[vlo_DividerValue+1]))
??WatchDog_Time_Cal_29:
        MOV.W   @SP, R15
        ADD.W   #0x1, R15
        RLAM.A  #0x2, R15
        MOV.W   R10, R4
        MOV.W   R11, R5
        SUBX.W  WDT_Counter(R15), R4
        SUBCX.W WDT_Counter + 2(R15), R5
        MOV.W   @SP, R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        CMP.W   R15, R5
        JNC     ??WatchDog_Time_Cal_31
        JNE     ??WatchDog_Time_Cal_32
        CMP.W   R14, R4
        JC      ??WatchDog_Time_Cal_32
//  173     {
//  174       vlo_OffectTimeTemp = (WDT_CounterValue-WDT_Counter[++vlo_DividerValue]);
??WatchDog_Time_Cal_31:
        MOV.W   @SP, R15
        ADD.W   #0x1, R15
        MOV.W   R15, 0(SP)
        RLAM.A  #0x2, R15
        MOV.W   R10, R4
        MOV.W   R11, R5
        SUBX.W  WDT_Counter(R15), R4
        SUBCX.W WDT_Counter + 2(R15), R5
        MOV.W   R4, R8
        MOV.W   R5, R9
        JMP     ??WatchDog_Time_Cal_30
//  175     }
//  176     else
//  177     {
//  178       vlo_OffectTimeTemp = (WDT_Counter[vlo_DividerValue]-WDT_CounterValue);
??WatchDog_Time_Cal_32:
        MOV.W   @SP, R15
        RLAM.A  #0x2, R15
        MOVX.W  WDT_Counter(R15), R14
        MOVX.W  WDT_Counter + 2(R15), R15
        SUB.W   R10, R14
        SUBC.W  R11, R15
        MOV.W   R14, R8
        MOV.W   R15, R9
//  179     }
//  180   }
//  181   vlo_OffectTimeTemp = vlo_OffectTimeTemp>0 ? vlo_OffectTimeTemp : -vlo_OffectTimeTemp;
??WatchDog_Time_Cal_30:
        CMP.W   #0x0, R9
        JL      ??WatchDog_Time_Cal_8
        JNE     ??WatchDog_Time_Cal_6
        CMP.W   #0x1, R8
        JC      ??WatchDog_Time_Cal_6
??WatchDog_Time_Cal_8:
        XOR.W   #0xffff, R8
        XOR.W   #0xffff, R9
        ADD.W   #0x1, R8
        ADDC.W  #0x0, R9
//  182   vlo_OffectTime = (float)vlo_OffectTimeTemp/(float)VLOCLK_FREQUENCY; 
??WatchDog_Time_Cal_6:
        MOV.W   R8, R12
        MOV.W   R9, R13
        CALLA   #_Cast32sto32f
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   #0x4000, R14
        MOV.W   #0x461c, R15
        MOV.W   R4, R12
        MOV.W   R5, R13
        CALLA   #_Div32f
        MOV.W   R12, 0x16(SP)
        MOV.W   R13, 0x18(SP)
//  183   /*********±È½Ï¸÷¸öÊ±ÖÓÔ´µÄ¶¨Ê±¾«¶È£¬Ñ¡Ôñ×î¸ß¾«¶ÈµÄÊ±ÖÓÔ´¼°¶¨Ê±Ê±¼ä**********/
//  184   if((smclk_OffectTime <= aclk_OffectTime) && (smclk_OffectTime <= vlo_OffectTime))
        MOV.W   0x12(SP), R14
        MOV.W   0x14(SP), R15
        MOV.W   0xe(SP), R12
        MOV.W   0x10(SP), R13
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??WatchDog_Time_Cal_33
        MOV.W   0x12(SP), R14
        MOV.W   0x14(SP), R15
        MOV.W   0x16(SP), R12
        MOV.W   0x18(SP), R13
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??WatchDog_Time_Cal_33
//  185   {
//  186     return (WDTSSEL__SMCLK | smclk_DividerValue);
        MOV.W   0x4(SP), R12
        JMP     ??WatchDog_Time_Cal_34
//  187   }
//  188   else if((aclk_OffectTime <= smclk_OffectTime) && (aclk_OffectTime <= vlo_OffectTime))
??WatchDog_Time_Cal_33:
        MOV.W   0xe(SP), R14
        MOV.W   0x10(SP), R15
        MOV.W   0x12(SP), R12
        MOV.W   0x14(SP), R13
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??WatchDog_Time_Cal_35
        MOV.W   0xe(SP), R14
        MOV.W   0x10(SP), R15
        MOV.W   0x16(SP), R12
        MOV.W   0x18(SP), R13
        CALLA   #_CmpGe32f
        CMP.W   #0x0, R12
        JEQ     ??WatchDog_Time_Cal_35
//  189   {
//  190     return (WDTSSEL__ACLK | aclk_DividerValue);
        MOV.W   0x2(SP), R12
        BIS.W   #0x20, R12
        JMP     ??WatchDog_Time_Cal_34
//  191   }
//  192   else
//  193   {
//  194     return (WDTSSEL__VLO | vlo_DividerValue);
??WatchDog_Time_Cal_35:
        MOV.W   @SP, R12
        BIS.W   #0x40, R12
??WatchDog_Time_Cal_34:
        ADD.W   #0x1e, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock7
//  195   }
//  196 }

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 1 332 bytes in segment CODE
//     2 bytes in segment DATA16_AN
//    36 bytes in segment DATA20_C
// 
// 1 332 bytes of CODE  memory
//    36 bytes of CONST memory
//     0 bytes of DATA  memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
